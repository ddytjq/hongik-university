ID=D0596
URL=http://www.jadcentral.com/newscentral/idg/articles/jms.trans.deliv3.jsp
SIZE=44330
DATE=16/07/02
TIME=14:52:35
DATASET=Java
HTML=

















<HTML>
<HEAD>
<TITLE>JADCentral : Transaction and redelivery in JMS (Part 3)</TITLE>
 	
    <link href="/css/jadcentral.css" media="screen" type="text/css" rel="stylesheet"/>

<script type="text/javascript" language="javascript">
function removeCode (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}

function addComment (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}
function partnerInquiryWin (URL)
{
  var inquiry_win = window.open (URL,"comment_win","width=405,height=175,resizable=yes,screenX=300,screenY=100"); 
  inquiry_win.focus();
  
}

function jugInquiryWin (URL)
{
  var inquiry_win = window.open (URL,"inquiry_win","width=405,height=175,resizable=yes,screenX=300,screenY=100"); 
  inquiry_win.focus();
  
}

function partnerLinkWin (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}

function jugLinkWin (URL)
{

  var edit_win = window.open (URL,"edit_win","width=420,height=227,scrollbars=yes,resizable=yes,screenX=300,screenY=100"); 
  edit_win.focus();

}

function jugEventWin (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}

function closeWin ()
{
opener = window.opener;
href = opener.location.href;
opener.location.href=href;
window.close();
}

function partnerWhitepaperWin (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}

function partnerEditWin (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}
function jugEditWin (URL)
{

  var edit_win = window.open (URL,"edit_win","width=415,height=390,scrollbars=yes,resizable=yes,screenX=300,screenY=100"); 
  edit_win.moveTo(200,100);
  edit_win.focus();

  
}

function removePartner (URL)
{
  if (confirm("Do you want to remove this partner?"))
  {
  	window.location.href=URL;
  }
}

function removeJUG (URL)
{
  if (confirm("Do you want to remove this Java User Group?"))
  {
  	window.location.href=URL;
  }
}

function newFocusWin (URL)
{
  var new_win = window.open (URL,"new_win","");
  new_win.focus();
}

function addFavorite (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
  
}

function addNotify (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
}

function downloadCode (URL)
{
  
  alert ("You must be logged in to download code..");
  
}


function profileOption (URL)
{
  
  alert ("You must be logged in to use this feature ..");
  
}

function removeFromFeatured(URL)
{

}

function addFeaturedCode(URL)
{

}

function removeFeature(URL)
{
  if (confirm("Do you want to remove this Feature Story?"))
  	window.location.href=URL;
 
}

if (document.images) {


var codecentral_on = new Image();
codecentral_on.src = "/images/topnav/codecentral-on.gif";
var codecentral_off = new Image();
codecentral_off.src = "/images/topnav/codecentral-off.gif";

var forums_on = new Image();
forums_on.src = "/images/topnav/forums-on.gif";
var forums_off = new Image();
forums_off.src = "/images/topnav/forums-off.gif";

var newscentral_on = new Image();
newscentral_on.src = "/images/topnav/newscentral-on.gif";
var newscentral_off = new Image();
newscentral_off.src = "/images/topnav/newscentral-off.gif";

var resources_on = new Image();
resources_on.src = "/images/topnav/resources-on.gif";
var resources_off = new Image();
resources_off.src = "/images/topnav/resources-off.gif";

var jugcentral_on = new Image();
jugcentral_on.src = "/images/topnav/jugcentral-on.gif";
var jugcentral_off = new Image();
jugcentral_off.src = "/images/topnav/jugcentral-off.gif";

var tech_showcase_on = new Image();
tech_showcase_on.src = "/images/topnav/tech_showcase-on.gif";
var tech_showcase_off = new Image();
tech_showcase_off.src = "/images/topnav/tech_showcase-off.gif";


}

function rollOn ( imageBase )
{
  //alert("rollOn");
  if (document.images)
  {
    document.images[imageBase].src = eval(imageBase+"_on.src");
  }
}
function rollOff ( imageBase )
{
  //alert("rollOff");
  if (document.images)
  {
    document.images[imageBase].src = eval(imageBase+"_off.src");
  }
}
</script>

</HEAD>

<body bgcolor="#ffffff" marginwidth="0" marginheight="0" topmargin="0" leftmargin="0" >


<!--- TOP --->
<table width="750" cellspacing="0" cellpadding="0" border="0">
<tr>
    <td width="60" height="65" valign="top" rowspan="4"><a href="/"><img src="/images/box.gif" width=60 height=65 alt="" border="0"></a></td>
    <td align="right" height="14"><img src="/images/separator-top.gif" width=2 height=14 alt="" border="0"><a href="/"><img src="/images/topnav/home-off.gif" width=44 height=14 alt="home" border="0"></a><img src="/images/separator-top.gif" width=2 height=14 alt="" border="0"><a href="/my_account/login_action.jsp"><img src="/images/topnav/myaccount-off.gif" width=85 height=14 alt="my account" border="0"></a><img src="/images/separator-top.gif" width=2 height=14 alt="" border="0"><a href="/help/"><img src="/images/topnav/help-off.gif" width=44 height=14 alt="help" border="0"></a><img src="/images/separator-top.gif" width=2 height=14 alt="" border="0"><img src="/images/spacer.gif" width=14 height=14 alt="" border="0"></td>
</tr>
<tr>
    <td height="21"><a href="/"><img src="/images/logo.gif" width=396 height=20 alt="" border="0"></a></td>
</tr>
<tr>
    <td height="2" bgcolor="#CCCCCC"><img src="/images/spacer.gif" width=1 height=2 alt="" border="0"></td>
</tr>
<tr>
    <td height="28" bgcolor="#999999" valign="top">
	<table width="690" cellspacing="0" cellpadding="0" border="0">
    <tr><form action="/search.jsp" method=GET>
	    <td valign="top"><a href="/codecentral/" onMouseOver="rollOn('codecentral')" onMouseOut="rollOff('codecentral')"><img src="/images/topnav/codecentral-off.gif" width=84 height=19 alt="" border="0" name="codecentral"></a><img src="/images/spacer.gif" width=8 height=14 alt="" border="0"><a href="/forums/" onMouseOver="rollOn('forums')" onMouseOut="rollOff('forums')"><img src="/images/topnav/forums-off.gif" width=47 height=19 alt="" border="0" name="forums"></a><img src="/images/spacer.gif" width=8 height=14 alt="" border="0"><a href="/newscentral/"><img src="/images/topnav/newscentral-on.gif" width=86 height=19 alt="" border="0" name="newscentral"></a><img src="/images/spacer.gif" width=8 height=14 alt="" border="0"><a href="/resources/" onMouseOver="rollOn('resources')" onMouseOut="rollOff('resources')"><img src="/images/topnav/resources-off.gif" width=67 height=19 alt="" border="0" name="resources"></a><img src="/images/spacer.gif" width=8 height=14 alt="" border="0"><a href="/tech_showcase/" onMouseOver="rollOn('tech_showcase')" onMouseOut="rollOff('tech_showcase')"><img src="/images/topnav/tech_showcase-off.gif" width=97 height=19 alt="" border="0" name="tech_showcase"></a><a href="/jugcentral/" onMouseOver="rollOn('jugcentral')" onMouseOut="rollOff('jugcentral')"><img src="/images/topnav/jugcentral-off.gif" width=79 height=19 alt="" border="0" name="jugcentral"></a></td>
	    <td align="right"><img src="/images/spacer.gif" width=1 height=3 alt="" border="0"><br>
		
		
		<table cellspacing="0" cellpadding="0" border="0" width="178">
		<tr>
		    <td bgcolor="#cccccc" width="1" valign="top"><img src="/images/corner-search.gif" width=1 height=1 alt="" border="0"></td>
		    <td bgcolor="#cccccc" width="54" rowspan="2" align="center"><img src="/images/search.gif" width=41 height=7 alt="" border="0"></td>
		    <td bgcolor="#cccccc" width="94" rowspan="2" class=content><input type="text" class="search" name="search" size="12"></td>
		    <td bgcolor="#cccccc" width="23" rowspan="2"><input type="image" src="/images/search-arrow.gif" width=23 height=11 alt="" border="0"></td>			
		    <td bgcolor="#cccccc" width="1" valign="top"><img src="/images/corner-search.gif" width=1 height=1 alt="" border="0"></td>
		    <td bgcolor="#999999" width="5" rowspan="2"><img src="/images/spacer.gif" width=5 height=1 alt="" border="0"></td>
		</tr>
		<tr>
		    <td bgcolor="#cccccc" width="1" valign="bottom"><img src="/images/corner-search.gif" width=1 height=1 alt="" border="0"></td>
		    <td bgcolor="#cccccc" width="1" valign="bottom"><img src="/images/corner-search.gif" width=1 height=1 alt="" border="0"></td>					
		</tr>
		</table>
		
		</td>
	</form>
	</tr>
	</table>	
	</td>
</tr>
<tr>
    <td height="2" bgcolor="#CCCCCC" colspan="2"><img src="/images/spacer.gif" width=1 height=2 alt="" border="0"></td>
</tr>
</table>
<!--- END TOP ---><!--- MAIN ---><table width="750" cellspacing="0" cellpadding="0" border="0"><tr>    <td width="14"><img src="/images/spacer.gif" width=14 height=1 alt="" border="0"></td>    <td width="544" valign="top" class=content>	<img src="/images/spacer.gif" width=300 height=20 alt="" border="0"><br>		<!--- *****CONTENT TABLE***** --->			<table border="0" width="500" cellspacing="5">	<tr valign="top"><td class="content">		<font class=articletitle>Transaction and redelivery in JMS (Part 3)</font>	<br><br>		<font class="articlebyline">by Prakash Malani</font>	<br><br>		<b class=contentBold>03/19/2002</b><br><br>		</td><td align="center" valign="middle">	<img src="/images/idg/javaworld.gif" border="0" align="right" hspace="5" vspace="5"><br>	</td></tr>	</table>			<font class="content">	        <p> (IDG) -- <FONT SIZE="+1"><STRONG> Duplicates okay acknowledgement </STRONG></FONT><BR>The duplicates okay acknowledgement mode closely resembles the auto acknowledgement mode. However, rather than pass <code>Session.AUTO_ACKNOWLEDGE</code>, you specify <code>Session.DUPS_OK_ACKNOWLEDGE</code> as the acknowledgement mode of <code>createSession()</code>'s second argument.  With less overhead than auto mode, in duplicates okay mode, the JMS provider guarantees at-least-once message delivery.  During failure recovery, certain messages are probably delivered more than once. <P>Listing 4 describes the <code>DuplicatesOkayReceiver</code> class, which extends the <code>Receiver</code> superclass.  As shown, <code>DuplicatesOkayReceiver</code> creates a nontransacted session with duplicates okay acknowledgement mode in the <code>createQueueSession()</code> method: <P><strong>Listing 4. DuplicatesOkayReceiver</strong><br> <CODE><P>package com.malani.examples.jms.transactions;<BR><BR>import javax.naming.InitialContext;<BR>import javax.jms.*;<BR>import java.io.InputStreamReader;<BR><BR>public class DuplicatesOkayReceiver extends Receiver {<BR>&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Starting...");<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new DuplicatesOkayReceiver().doAll();<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Ending...");<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;protected QueueSession createQueueSession(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueueConnection aQC<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) throws JMSException {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return aQC.createQueueSession(false, Session.DUPS_OK_ACKNOWLEDGE);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>}<BR></CODE><P>Executing Listing 4 produces the following output; type character <code>q</code> and press Return to end the program: <P><CODE><P>Starting...<BR>Java (TM) Message Service 1.0.2 Reference Implementation (build b14)<BR>0 1 2 3 4 5 6 7 8 9 q<BR>Ending...<BR></CODE><P>The difference between auto mode and duplicates okay mode is a classic tradeoff between delivery guarantee and throughput.  With at-least-once message delivery guarantee, duplicates okay mode achieves higher throughput. <P>In Figure 5, a message is automatically acknowledged after the application successfully processes it, which is after the message successfully returns from the <code>onMessage()</code> method.  The JMS provider does the same thing as in Figure 4, except in the duplicates okay mode, it acknowledges the message lazily. <P><CENTER><P><TABLE CELLPADDING="5" BORDER="0"><TR><TD><P><CENTER><P><IMG VSPACE="3" WIDTH="440" HEIGHT="216" SRC="http://www.idg.net/microsites/javaworld//legacy/jw-03-2002/images/jw-0315-jms5.gif"><P><BR><FONT SIZE="-1"><STRONG><P>Figure 5. Duplicates okay acknowledgement  </STRONG></FONT></CENTER><P></TD></TR></TABLE><P></CENTER><P><FONT SIZE="+1"><STRONG> Client acknowledgement </STRONG></FONT><BR>To implement client acknowledgement mode, when you create the receiver's session, specify <code>false</code> as <code>createSession()</code>'s first argument and <code>Session.CLIENT_ACKNOWLEDGE</code> as its second argument. Specifying <code>false</code> creates a nontransacted session.  In client mode, invoking the <code>Message</code> class's <code>acknowledge()</code> method explicitly acknowledges the message.  In fact, using the <code>acknowledge()</code> method makes sense when only using the client mode. <P>Listing 5 represents the <code>ClientReceiver</code> class. The <code>ClientReceiver</code> class extends the <code>Receiver</code> superclass.  As shown, the <code>ClientReceiver</code> creates a nontransacted session where the client acknowledges the messages in the <code>createQueueSession()</code> method.  In the <code>processMessage()</code> method, the <code>ClientReceiver</code> acknowledges only message <code>5</code>: <P><strong>Listing 5. ClientReceiver</strong><br> <CODE><P>package com.malani.examples.jms.transactions;<BR><BR>import javax.naming.InitialContext;<BR>import javax.jms.*;<BR>import java.io.InputStreamReader;<BR><BR>public class ClientReceiver extends Receiver {<BR>&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Starting...");<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new ClientReceiver().doAll();<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Ending...");<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;protected QueueSession createQueueSession(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueueConnection aQC<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) throws JMSException {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return aQC.createQueueSession(false, Session.CLIENT_ACKNOWLEDGE);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;protected void processMessage(Message aMessage, QueueSession aQS)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws JMSException<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (aMessage instanceof ObjectMessage) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectMessage aOM = (ObjectMessage) aMessage;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(aOM.getObject() + " " );<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer i = (Integer) aOM.getObject();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ii = i.intValue();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ii == 5) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aOM.acknowledge();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>}<BR></CODE><P>Executing Listing 5 produces the following output: <P><CODE><P>Starting...<BR>Java (TM) Message Service 1.0.2 Reference Implementation (build b14)<BR>0 1 2 3 4 5 6 7 8 9 r<BR>6 7 8 9 q<BR>Ending...<BR></CODE><P>Consider the following scenario:  An application receives but does not acknowledge a message. The application receives a subsequent message and acknowledges it.  What happens to the former message?  The former message is also considered acknowledged.  Generally, acknowledging a particular message acknowledges all prior messages the session receives.  In the above output, only message <code>5</code> is explicitly acknowledged.  All the messages before message <code>5</code> are implicitly acknowledged.  Messages after message <code>5</code> are not acknowledged. <P>What happens to messages that are in the session but never acknowledged?  The messages remain at the destination until they expire or forever if they lack an expiration date. Message redelivery is not automatic, but messages are redelivered under certain circumstances.  First, calling the <code>Session</code> class's <code>recover()</code> method recovers the session.  Invoking the <code>recover()</code> method causes the redelivery of all unacknowledged messages. Second, the receiving application restarts, causing the session to restart.  Restarting the session causes all unacknowledged messages to be redelivered.  In Listing 5's sample program, typing character <code>r</code> and pressing Return recovers the messages.  Recovering the session causes the JMS provider to redeliver message <code>6</code>, <code>7</code>, <code>8</code>, and <code>9</code>. <P>In Figure 6, the application acknowledges the message by invoking the <code>acknowledge()</code> method when processing the message in the <code>onMessage()</code> method. <P><CENTER><P><TABLE CELLPADDING="5" BORDER="0"><TR><TD><P><CENTER><P><IMG VSPACE="3" WIDTH="409" HEIGHT="219" SRC="http://www.idg.net/microsites/javaworld//legacy/jw-03-2002/images/jw-0315-jms6.gif"><P><BR><FONT SIZE="-1"><STRONG><P>Figure 6. Client acknowledgement  </STRONG></FONT></CENTER><P></TD></TR></TABLE><P></CENTER><P><P><FONT SIZE="+1"><STRONG> Transacted session </STRONG></FONT><BR>To implement the transacted session mode, when creating the receiver's session, specify <code>true</code> as <code>createSession()</code>'s first argument.  You ignore the <code>createSession()</code> method's second argument; to clearly denote its lack of use, pass in a dummy value such as <code>-1</code>. <P>The application indicates successful message processing by invoking the <code>Session</code> class's <code>commit()</code> method.  The application can reject a message or a message group by invoking <code>Session</code> class's <code>rollback()</code> method.  Calling the <code>commit()</code> method commits all the messages the session receives.  Similarly, calling the <code>rollback()</code> method rejects all the messages the session receives.  <code>Session</code>'s <code>commit()</code> and <code>rollback()</code> methods make sense only with the transacted session option.  The transacted session uses a <em>chained-transaction </em> model.  In a chained-transaction model, an application does not explicitly start a transaction.  Upon calling either the <code>commit()</code> or the <code>rollback()</code> methods, the application automatically starts a new transaction.  Because a transaction is not explicitly started, it is always present and available. <P>Listing 6 describes the <code>TransactedReceiver</code> class. The <code>TransactedReceiver</code> class extends the <code>Receiver</code> superclass.  As shown, the <code>TransactedReceiver</code> creates a transacted session in the <code> createQueueSession()</code> method.  In the <code>processMessage()</code> method, the <code>TransactedReceiver</code> commits message <code>5</code> and rolls back message <code>9</code>:<P><strong>Listing 6. TransactedReceiver</strong><br> <CODE><P>package com.malani.examples.jms.transactions;<BR><BR>import javax.naming.InitialContext;<BR>import javax.jms.*;<BR>import java.io.InputStreamReader;<BR><BR>public class TransactedReceiver extends Receiver {<BR>&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Starting...");<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new TransactedReceiver().doAll();<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Ending...");<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;protected QueueSession createQueueSession(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueueConnection aQC<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) throws JMSException {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return aQC.createQueueSession(true, -1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;protected void processMessage(Message aMessage, QueueSession aQS)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws JMSException<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (aMessage instanceof ObjectMessage) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectMessage aOM = (ObjectMessage) aMessage;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(aOM.getObject() + " " );<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer i = (Integer) aOM.getObject();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ii = i.intValue();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ii == 5) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aQS.commit();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (ii == 9) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aQS.rollback();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>}<BR></CODE><P>Executing Listing 6 produces the following output: <P><CODE><P>Starting...<BR>Java (TM) Message Service 1.0.2 Reference Implementation (build b14)<BR>0 1 2 3 4 5 6 7 8 9 6 7 8 9 6 7 8 9 6 7 8 9 6 7 8 9 6 7 8 9 6 7 8 9 6 7 8 9 q<BR>Ending...<P></CODE><P>In the above example, only message <code>5</code> is explicitly committed.  All messages before message <code>5</code> are implicitly committed.  Rolling back each message <code>9</code> causes all messages received after <code>5</code> to roll back. <P>What happens to rolled-back messages?  The JMS provider automatically redelivers these messages so the application can reprocess them.  In the above example, messages received after message <code>5</code> until message <code>9</code> (inclusive) are automatically redelivered.  JMS providers may include these configuration parameters to fine-tune redelivery: <P><ul><li><em>Redelivery count</em>:  The number of times to redeliver a message.  Redelivery count is important because poison messages, messages the application can never successfully process, can eventually crash the system.</li> <P><li><em>Exception destination</em>:  What happens to a message that is redelivered redelivery-count times?  The JMS provider can do any of the following:<ul><li>Log the message</li><li>Forward the message to an exception or error destination</li><li>Lose the message</li></ul></li> <P><li><em>Time to redeliver</em>:  An application that has just rolled back messages might not be ready to reprocess the same messages.  This parameter specifies the time to wait before redelivering the message.  This delay lets the JMS provider and the application recover to a stable state. </li></ul> <P>Does a redelivered message go to the back of the queue or sneak to the front?  Barring message priorities and specifically sorted queues, the message sneaks to the queue's front.  The default configuration sorts and delivers the messages by time.  A redelivered message maintains its original timestamp. Consider this scenario: The sender sends messages <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, and <code>9</code>.  Now, the receiver processes <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, and <code>4</code>.  Only message <code>5</code> is rolled back.  Let's assume the receiver has processed messages <code>6</code> and <code>7</code> in the meantime.  The receiver will process message <code>5</code> next (again) and continue with messages <code>8</code> and <code>9</code>.  Message <code>5</code> will not go to the end of the queue; thus, depending upon the configuration and how long it takes to process a message, message <code>5</code> will sneak to the front.<P>In Figure 7, the JMS provider automatically starts a transaction before it delivers a message to the application.  The application commits or rolls back the transaction by invoking the <code>commit()</code> or <code>rollback()</code> methods.  Since the transaction includes message delivery, a rollback causes the message to be redelivered. <P><CENTER><P><TABLE CELLPADDING="5" BORDER="0"><TR><TD><P><CENTER><P><IMG VSPACE="3" WIDTH="409" HEIGHT="218" SRC="http://www.idg.net/microsites/javaworld//legacy/jw-03-2002/images/jw-0315-jms7.gif"><P><BR><FONT SIZE="-1"><STRONG><P>Figure 7. Transacted session  </STRONG></FONT></CENTER><P></TD></TR></TABLE><P></CENTER><P><P><FONT SIZE="+1"><STRONG> Message-driven bean with CMTD </STRONG></FONT><BR>Upon deploying a message-driven bean, CMTD is specified in the XML deployment descriptor.  The following XML fragment from the <code>ejb-jar.xml</code> depicts that the <code>&lt;transaction-type&gt;</code> attribute is <code>Container</code>: <P><CODE><P>&nbsp;&nbsp;&nbsp;&nbsp;&lt;message-driven&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ejb-name&gt;cmtdBean&lt;/ejb-name&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ejb-class&gt;com.malani.examples.jms.transactions.MDB_CMTD&lt;/ejb-class&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transaction-type&gt;Container&lt;/transaction-type&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;message-driven-destination&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;destination-type&gt;javax.jms.Queue&lt;/destination-type&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/message-driven-destination&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/message-driven&gt;<P></CODE><P>Plus, the <code>&lt;trans-attribute&gt;</code> is specified as <code>Required</code>: <P><CODE><P>&nbsp;&nbsp;&nbsp;&nbsp;&lt;assembly-descriptor&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;container-transaction&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;method&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ejb-name&gt;cmtdBean&lt;/ejb-name&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;method-name&gt;*&lt;/method-name&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/method&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;trans-attribute&gt;Required&lt;/trans-attribute&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/container-transaction&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/assembly-descriptor&gt;<BR></CODE><P>A transaction automatically starts when the JMS provider removes the message from the destination and delivers it to the MDB's <code>onMessage()</code> method.  The transaction commits upon successful return from the <code>onMessage()</code> method.  Since the configuration is CMTD, the container manages the transaction's begin, commit, and roll back.  An MDB can indicate to the container the transaction should be rolled back by calling <code>MessageDrivenContext</code>'s <code>setRollbackOnly()</code> method.  When a container rolls back a transaction, the message is automatically redelivered.  This option's redelivery semantics and mechanics resemble that of the transacted session option. <P>Listing 7 describes the <code>MDB_CMTD</code> class, which implements the <code>MessageListener</code> interface's <code>onMessage()</code> method.  In <code>onMessage()</code>, all messages above message <code>5</code> are rolled back by invoking <code>MessageDrivenContext</code>'s <code>setRollbackOnly()</code> method: <P><strong>Listing 7. MDB_CMTD</strong><br> <CODE><P>package com.malani.examples.jms.transactions;<BR><BR>import javax.ejb.*;<BR>import javax.jms.*;<BR><BR>public class MDB_CMTD extends MDB {<BR>&nbsp;&nbsp;&nbsp;&nbsp;public void onMessage(Message aMessage) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (aMessage instanceof ObjectMessage) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectMessage aOM = (ObjectMessage) aMessage;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(aOM.getObject() + " " );<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer i = (Integer) aOM.getObject();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ii = i.intValue();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ii &gt; 5) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMDC.setRollbackOnly();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ii == 9) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (JMSException e) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>}<BR></CODE><P>Executing Listing 7 produces the following output: <P><CODE><P>0 1 2 3 4 5 6 7 8 9 <BR>6 7 8 9 <BR>6 7 8 9 <BR>6 7 8 9 <BR>6 7 8 9 <BR>6 7 8 9 <BR>6 7 8 9 <BR>6 7 8 9<P></CODE><P>In the above output, any message greater than message <code>5</code> is rolled back using the <code>setRollbackOnly()</code> method.  This causes the JMS provider to redeliver messages <code>6</code>, <code>7</code>, <code>8</code>, and <code>9</code>. <P>In Figure 8, the container automatically starts a transaction before the message is delivered to the application.  The container automatically either commits or rolls back the transaction at the end of the <code>onMessage()</code> method.  Invoking the <code>setRollbackOnly()</code> method indicates that the application rolls back the transaction.  Since the transaction includes message delivery, a rollback causes the JMS provider to redeliver the message. <P><CENTER><P><TABLE CELLPADDING="5" BORDER="0"><TR><TD><P><CENTER><P><IMG VSPACE="3" WIDTH="438" HEIGHT="262" SRC="http://www.idg.net/microsites/javaworld//legacy/jw-03-2002/images/jw-0315-jms8.gif"><P><BR><FONT SIZE="-1"><STRONG><P>Figure 8. Message-driven bean with CMTD  </STRONG></FONT></CENTER><P></TD></TR></TABLE><P></CENTER><P><P><FONT SIZE="+1"><STRONG> Message-driven bean with BMTD </STRONG></FONT><BR>Upon deploying a message-driven bean, BMTD is specified in the XML deployment descriptor.  The following XML fragment from the <code>ejb-jar.xml</code> depicts that the <code>&lt;transaction-type&gt;</code> attribute is <code>Bean</code>: <P><CODE><P>&nbsp;&nbsp;&nbsp;&nbsp;&lt;message-driven&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ejb-name&gt;bmtdBean&lt;/ejb-name&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ejb-class&gt;com.malani.examples.jms.transactions.MDB_BMTD&lt;/ejb-class&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transaction-type&gt;Bean&lt;/transaction-type&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;message-driven-destination&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;destination-type&gt;javax.jms.Queue&lt;/destination-type&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/message-driven-destination&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/message-driven&gt;<P></CODE><P>A message-driven bean with BMTD can obtain a transaction by calling <code>MessageDrivenContext</code>'s <code>getUserTransaction()</code> method.  Invoking the <code>UserTransaction</code> interface's <code>begin()</code>, <code>commit()</code>, and <code>rollback()</code> methods controls the user transaction.  Because the transaction starts inside the MDB, it does not span the JMS provider's message retrieval from the original destination.  The transaction has no impact on message acknowledgement and in turn has no impact on message redelivery.  Rolling back the transaction does not cause the messages to be redelivered. <P>To implement message-driven beans with BMTD, specify the <code>Session.AUTO_ACKNOWLEDGE</code> or <code>Session.DUPS_OK_ACKNOWLEDGE</code> as the acknowledgement mode.  Hence, the MDB with BMTD option works with auto acknowledgement and duplications okay acknowledgement options. <P>Listing 8 describes the <code>MDB_BMTD</code> class, which implements the <code>MessageListener</code> interface's <code>onMessage</code>.  A <code>UserTransaction</code> is obtained by invoking the <code>MessageDrivenContext</code>'s <code>getUserTransaction()</code> method.  The transaction is committed for messages below <code>5</code> (inclusive) and rolled back for messages above <code>5</code>:<P><strong>Listing 8. MDB_BMTD</strong><br> <P><CODE><P>package com.malani.examples.jms.transactions;<BR><BR>import javax.ejb.*;<BR>import javax.jms.*;<BR>import javax.transaction.UserTransaction;<BR><BR>public class MDB_BMTD extends MDB {<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;public void onMessage(Message aMessage) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (aMessage instanceof ObjectMessage) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UserTransaction aUT = mMDC.getUserTransaction();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aUT.begin();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectMessage aOM = (ObjectMessage) aMessage;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(aOM.getObject() + " " );<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer i = (Integer) aOM.getObject();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ii = i.intValue();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ii &gt; 5) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aUT.rollback();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aUT.commit();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ii == 9) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (Exception e) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR><BR>}<P></CODE><P>Executing Listing 8 produces the following output: <P><CODE><P>0 1 2 3 4 5 6 7 8 9<P></CODE><P>In Figure 9, the application starts the transaction by invoking the <code>UserTransaction</code>'s <code>begin()</code> method.  The application either commits or rolls back the transaction by invoking either the <code>UserTransaction</code>'s <code>commit()</code> or <code>rollback()</code> method.  The container automatically acknowledges the message at the end of the <code>onMessage()</code> method.  Since the transaction does not span the message retrieval from the original destination, rolling back the transaction does not result in message redelivery. <P><CENTER><P><TABLE CELLPADDING="5" BORDER="0"><TR><TD><P><CENTER><P><IMG VSPACE="3" WIDTH="504" HEIGHT="268" SRC="http://www.idg.net/microsites/javaworld//legacy/jw-03-2002/images/jw-0315-jms9.gif"><P><BR><FONT SIZE="-1"><STRONG><P>Figure 9. Message-driven bean with BMTD  </STRONG></FONT></CENTER><P></TD></TR></TABLE><P></CENTER><P><FONT SIZE="+1"><STRONG> Disclaimer </STRONG></FONT><BR>I tested the above examples with Java 2 SDK, Enterprise Edition 1.3.  Your mileage may vary with different JMS providers and configuration options.  For further information, please refer to the JMS provider's administration and configuration guide. <P><FONT SIZE="+1"><STRONG> Knowledge is power </STRONG></FONT><BR>In this article, I presented and evaluated the redelivery impact in acknowledgement modes (auto, duplicates okay, and client) and transaction options (transacted session, MDB with CMTD, and MDB with BMTD).  Understanding and applying transaction and redelivery concepts are crucial in leveraging and harnessing the JMS API's power and flexibility.  This knowledge is critical in architecture, design, and implementation of JMS-based solutions. <P><em>I would sincerely like to thank Max Cooper, Stephen Ditlinger, Lina Chu, Roshni Malani, and Clare Zhang for reviewing this article.</em></p>    	</font>		<br><br>	<center>      <img src="/images/idg/idgnet_copyright.gif" width="93" height="60" border="0"><br>	<font size="1">Copyright 2001 IDG.net</font>	</center>	<!--- *****END CONTENT TABLE***** --->	</td>    <td width="10"><img src="/images/spacer.gif" width=10 height=1 alt="" border="0"></td>    <td width="1" bgcolor="#e2e2e2"><img src="/images/spacer.gif" width=1 height=1 alt="" border="0"></td>    	<!--- SIDEBAR --->	<td width="153" valign="top">	<table width="153" cellpadding="0" cellspacing="0" border="0">	<tr>	    <td valign="top">				<!--- *****LOGIN***** --->				





		<!--- ***** LOGIN ***** --->
		<table width="150" cellspacing="3" cellpadding="0" border="0">
		<tr valign="top">
		    <td>
		    <table width="150" cellspacing="0" cellpadding="0" border="0">
			<tr>
			    <td bgcolor="#666666"><img src="/images/tableheaders/login.gif" width=149 height=13 alt="" border="0"></td>
			</tr>
			<tr>
			    <td><img src="/images/spacer.gif" width=1 height=2 alt="" border="0"></td>
			</tr>
		    </table>
		    <table width="150" cellspacing="0" cellpadding="0" border="0" align="center">
			<tr>
				<td width="10">&#160</td>
			    <td bgcolor="#ffffff" class="content">
				
	
			
			    <form action="/my_account/sign-in.jsp" method="post">
			    	<a href="/my_account/new_user.jsp">Not a member? register</a><br><br>
			    
			    	<input type="hidden" name="redirectURL" value="/newscentral/idg/articles/jms.trans.deliv3.jsp?">
			    
			    	<table width="145" cellspacing="0" cellpadding="0" border="0" align="center">
					
				<tr>
				    <td colspan="2" class="content"><b>Already registered?</b></td>
				</tr>	
				<tr>
				    	<td width="50"><img src="/images/username.gif" width=45 height=5 alt="" border="0"></td>
				 	<td width="95"><input class="content" type="text" name="user_id" size="11"></td>
                		</tr>
				<tr>
			        	<td width="50"><img src="/images/password.gif" width=49 height=5 alt="" border="0"></td>
					<td width="95"><input class="content" type="password" name="password" size="11"></td>
				</tr>
				</table>
				
				<table width="145" cellspacing="0" cellpadding="0" border="0" align="center">
				<tr>
					<td valign="top" width="20"><input class=content type="checkbox" name="save_cookie" value="true"></td>
					<td width="138" class="content"> Remember me</td> 
			    	</tr>
			    	<tr>
				    <td colspan="2" align="center"><input type="image" src="/images/sign-in.gif" border=0></td>
					
				</tr>	
			    	</table><br>
			    	
			    	<a href="/my_account/forgot_password.jsp">Forgot your password?</a>
			     		
			   
			    	</form>
			    
			
			</td>
			
			</tr>
			</table>
		</td>
		</tr>
		</table>
		
		<!--- ***** END LOGIN ***** --->		<!--- *****END LOGIN***** --->			    </td>	</tr>	<tr>	    <td valign="top" bgcolor="#e2e2e2"><img src="/images/spacer.gif" width=150 height=1 alt="" border="0"></td>	</tr>		<tr>	    <td valign="top">			<table width="150" cellspacing="3" cellpadding="0" border="0">
		<tr valign="top">
		    <td>
		    <table width="150" cellspacing="0" cellpadding="0" border="0">
			<tr>
			    <td bgcolor="#666666"><a href="/resources/developer_tornado.jsp"><img src="/images/tableheaders/developer_tornado.gif" width=149 height=13 alt="" border="0"></a></td>
			</tr>
			<tr>
			    <td><img src="/images/spacer.gif" width=1 height=2 alt="" border="0"></td>
			</tr>
		    </table>
		    <table width="150" cellspacing="0" cellpadding="0" border="0">
			<tr>
			
          <td bgcolor="#ffffff" class="content" align="center"> 
		  
		  <OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
 codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0"
 WIDTH=150 HEIGHT=240>
 <PARAM NAME=movie VALUE="/swf/developer_tornado.swf"> <PARAM NAME=quality VALUE=high> <PARAM NAME=bgcolor VALUE=#FFFFFF> <EMBED src="/swf/developer_tornado.swf" quality=high bgcolor=#FFFFFF  WIDTH=150 HEIGHT=240 TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"></EMBED>
</OBJECT> 
		  <!--
		  <a target="newwin" href="http://nextel.sourceforge.net"> <img border="0" vspace="5" src="/images/logos/nextel.gif"> 
    </a>
	<a target="newwin" href="http://www.codewarrioru.com/CodeWarriorU"> <img border="0" vspace="5" src="/images/logos/metrowerks.gif" width="115" height="56"> 
    </a>
	<a target="newwin" href="http://www.webgain.com/communities/developers/"> <img border="0" vspace="5" src="/images/logos/webgain.gif"></a> 
		  
	<a target="newwin" href="http://e-www.motorola.com/adc/streamaster/developers/"> <img border="0" vspace="5" src="/images/logos/motorola.gif" width="119" height="42"> 
    </a>
 
		  
		  <a href="http://www-106.ibm.com/developerworks/"><img border="0" vspace="5" src="/images/logos/ibm.gif" width="92" height="40"></a> 
      <a href="http://developer.java.sun.com/?frontpage-jdc"> <img border="0" vspace="5" src="/images/logos/sun.gif" width="132" height="61"> 
    </a> <a href="http://education.bea.com/education/certification_program.jsp"> 
    <img border="0" vspace="5" src="/images/logos/bea.gif" width="92" height="53"> 
    </a> <a href="http://msdn.microsoft.com/community/"> <img border="0" vspace="5" src="/images/logos/microsoft.gif" width="112" height="40"> 
    </a> <a href="http://csa.compaq.com/"> <img border="0" vspace="5" src="/images/logos/compaq.gif" width="131" height="26"> 
    </a>  
    <a href="http://dsportal.eservices.hp.com/dspp/home/home_HomePage_IDX/1,1292,,00.html"> 
    <img border="0" vspace="5" src="/images/logos/hp.gif"></a> <a href="http://www.symbiandevnet.com/"> 
    <img border="0" vspace="5" src="/images/logos/symbian.jpg" width="110" height="47"></a> 
    <a href="http://otn.oracle.com/"><img border="0" vspace="5" src="/images/logos/oracle.gif" width="149" height="24"></a> 
    <a href="http://www.sybase.com/developer"> <img border="0" vspace="5" src="/images/logos/sybase.gif" width="150" height="42"></a> 
    <a href="http://www.redhat.com/devnet/"> <img border="0" vspace="5" src="/images/logos/redhat.gif" width="129" height="31"></a> 
	-->
          </td>
			
			</tr>
			</table>
		</td>
		</tr>
		</table>
		
		
			</td>	</tr>	<tr>		<td valign="top" bgcolor="#e2e2e2"><img src="/images/spacer.gif" width=150 height=1 alt="" border="0"></td>	</tr>	<tr>	    <td valign="top">		
		<table width="150" cellspacing="3" cellpadding="0" border="0">
		<tr>
		    <td>
		    <table width="150" cellspacing="0" cellpadding="0" border="0">
			<tr>
			    
          <td bgcolor="#666666"><a href="/tech_showcase/"><img src="/images/tableheaders/tech_showcase.gif" width=149 height=13 alt="" border="0"></a></td>
			</tr>
			<tr>
			    <td><img src="/images/spacer.gif" width=1 height=2 alt="" border="0"></td>
			</tr>
		    </table>
		    <table width="130" cellspacing="0" cellpadding="10" border="0">
			<tr>
			
 
          <td bgcolor="#ffffff" class="content" align="center"> <a href="/tech_showcase/partner.jsp?partner_ID=11"><img src="/tech_showcase/partner_11/fieldworker.gif" border="0" vspace="4" width="100" height="109"></a><br>
            <a href="/tech_showcase/partner.jsp?partner_ID=99"><img src="/tech_showcase/partner_99/bigface.gif" border="0" vspace="8" width="100" height="28"></a><br>
            <a href="/tech_showcase/partner.jsp?partner_ID=3"><img src="/tech_showcase/partner_3/pblogosml.gif" border="0" vspace="4" width="100" height="30"></a><br>
            <a href="/tech_showcase/partner.jsp?partner_ID=68"><img src="/tech_showcase/partner_74/OnTheEdge2.jpg" border="0" vspace="8" width="120" height="85" ></a><br>
			</td>
			
			</tr>
			</table>
		</td>
		</tr>
		</table>
			</td>	</tr><tr>		<td valign="top" bgcolor="#e2e2e2"><img src="/images/spacer.gif" width=150 height=1 alt="" border="0"></td>	</tr>	<tr>	    <td valign="top">		<table width="150" cellpadding="0" cellspacing="3" border="0">
	<tr>
	    <td valign="top">	
	    
		<table width="150" cellspacing="0" cellpadding="0" border="0">
		<tr>
		<td bgcolor="#666666" colspan="2" width="150">
		<a href="/newscentral/events/"><img src="/images/tableheaders/java_events.gif" width=149 height=13 alt="" border="0"></a></td>
		
		</tr>
		<tr>
		  <td bgcolor="#ffffff" colspan="2" width="150" align="center"> 
			
<!--<a target="new" href="http://servlet.java.sun.com/javaone/home/0-sf2002.jsp"><img src="/images/events/javaone.gif" width="150" height="40" border="0" vspace="4"></a><br>
	-->		

			  <center>
              <a href="http://www.sys-con.com/java/readerschoice2002/" target="_blank"><img src="/images/events/JDJ_ReadersChoice.jpg" width="65" height="70" border="0" vspace="10"></a> 
            </center>
          </td>
				
		</tr>
		</table>
		
	</td>
</tr>
</table>
			</td>	</tr>	</table></td>	<!--- END SIDEBAR ---></tr><tr>
<td colspan="3" align="center">
<font class="textlinks">
<br>

<a href="/codecentral/">CODECENTRAL</a> | <a href="/forums/">FORUMS</a> | <a href="/newscentral/">NEWS CENTRAL</a> | <A href="/resources/">RESOURCES</a> | <a href="/tech_showcase/">TECH SHOWCASE</a> | <a href="/jugcentral/">JUG CENTRAL</a> | <a href="/privacy.jsp">PRIVACY POLICY & DISCLAIMER</a><br>
<a href="/index.jsp">HOME</a> | 
<a href="/my_account/login_action.jsp">MY ACCOUNT</a> | 
<a href="/help/index.jsp">HELP</a> | <a href="/contact_us.jsp">CONTACT US</a>
</font>
</td>
<td colspan="2">&#160;</td>
</tr></table><!--- END MAIN ---></body></html>
