ID=E0051
URL=http://www.linuxdoc.org/HOWTO/PHP-HOWTO-23.html
SIZE=20894
DATE=12/07/02
TIME=19:16:51
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>PHP HOW-TO: PHP Tutorial </TITLE>
 <LINK HREF="PHP-HOWTO-24.html" REL=next>
 <LINK HREF="PHP-HOWTO-22.html" REL=previous>
 <LINK HREF="PHP-HOWTO.html#toc23" REL=contents>
</HEAD>
<BODY>
<A HREF="PHP-HOWTO-24.html">Next</A>
<A HREF="PHP-HOWTO-22.html">Previous</A>
<A HREF="PHP-HOWTO.html#toc23">Contents</A>
<HR>
<H2><A NAME="PHP Tutorial"></A> <A NAME="s23">23. PHP Tutorial </A></H2>

<P>Visit the following PHP tutorial sites -
<UL>
<LI> PHP Resource index - important PHP site - has 
complete scripts, Functions, classes, documentation, examples and tutorials
<A HREF="http://php.resourceindex.com">http://php.resourceindex.com</A></LI>
<LI> PHP portal 
<A HREF="http://zend.com">http://zend.com</A>
<P>
</LI>
<LI> <B>PHP Hot scripts </B>site 
<A HREF="http://www.hotscripts.com/PHP">http://www.hotscripts.com/PHP</A>
<P>
</LI>
<LI> Very <B>popular PHP resources</B> 
<A HREF="http://php.resourceindex.com">http://php.resourceindex.com</A> 
and 
<A HREF="http://cgi-resources.com">CGI-Resources</A>
<P>
</LI>
<LI> Simple tutorial 
<A HREF="http://www.php.net/tut.php">http://www.php.net/tut.php</A></LI>
<LI> Web Monkey 
<A HREF="http://hotwired.lycos.com/webmonkey/99/21/index2a.html">http://hotwired.lycos.com/webmonkey/99/21/index2a.html</A></LI>
<LI> Dev Shed 
<A HREF="http://www.devshed.com/Server_Side/PHP/Introduction">http://www.devshed.com/Server_Side/PHP/Introduction</A></LI>
<LI> PHP TidBits 
<A HREF="http://www.htmlwizard.net/resources/tutorials">http://www.htmlwizard.net/resources/tutorials</A></LI>
<LI> PHP Builder 
<A HREF="http://www.phpbuilder.com/getit">http://www.phpbuilder.com/getit</A></LI>
<LI> PHP tutorials at 
<A HREF="http://www.cgi-network.net">http://www.cgi-network.net</A></LI>
<LI> LinuxGuruZ PHP tutorials at 
<A HREF="http://www.linuxguruz.org">http://www.linuxguruz.org</A></LI>
<LI> PHP Wizard 
<A HREF="http://www.phpWizard.net">http://www.phpWizard.net</A></LI>
</UL>
<P>In this tutorial we assume that your server has support for PHP activated
and that all files ending in .php are handled by PHP.
If you are using Apache then you should edit httpd.conf and make appropriate 
changes to enable PHP.
<P>Your first PHP-enabled page:  
Create a file named hello.php and in it put the following lines:
<HR>
<PRE>
&lt;html>
&lt;head> 
&lt;title>
PHP Test&lt;/title>
&lt;/head>
&lt;body>
&lt;h1>
This is an example of php script. 
&lt;br>
Below, you will see one line saying 'Hello World' and 'foo is foobar':
&lt;/h1>
&lt;?php 
echo "Hello World"; 
$foo = "foobar";
echo "&lt;br>foo is $foo";
?> 
&lt;/body> 
&lt;/html>
</PRE>
<HR>
<P>Copy this file hello.php to the directory known to Apache, like 
<B>/var/www/html</B> which is also known as DocumentRoot in httpd.conf file.
Now, to run this example, bring up a web browser and type the URL
<I>http://localhost/hello.php</I> or you can type <I>http://127.0.0.1/hello.php</I>.
But make sure you bring up Apache web server on your system.
When you run the example you will get an output like:
<HR>
<PRE>
This is an example of php script. 
Below, you will see one line saying 'Hello World' and 'foo is foobar': 

Hello World
foo is foobar 
</PRE>
<HR>

If you get some errors or if you see the file with tags then your Apache Web server may 
not be working properly or PHP is not enabled.
<P>Note that this is not like a CGI script. 
Think of it as a normal HTML file which happens to have a set of
special tags available to you.
<P>If you tried this example and it didn't output anything, chances are that
the server you are on does not have PHP enabled. Ask your administrator to
enable it for you.
<P>The point of the example is to show the special PHP tag format. In this
example we used &lt; ?php to indicate the start of a PHP tag. Then we put the
PHP statement and left PHP mode by adding the closing tag, ? &gt; . You may jump
in and out of PHP mode in an HTML file like this all you want.
<P>We are going to check what sort of
browser the person viewing the page is using. In order to do that we check
the user agent string that the browser sends as part of its request. This
information is stored in a variable. Variables always start with a
dollar-sign in PHP. The variable we are interested in is $HTTP_USER_AGENT.
To display this variable we can simply do:
<HR>
<PRE>
      &lt;?php echo $HTTP_USER_AGENT; ?>
</PRE>
<HR>
<P>For the browser that you are using right now to view this page, this
displays:
<P>Mozilla/4.0 (compatible; MSIE 4.01; Windows 98)
<P>There are many other variables that are automatically set by your web
server. You can get a complete list of them by creating a file that looks
like this:
<HR>
<PRE>
      &lt;?php phpinfo()?>
</PRE>
<HR>
<P>Then load up this file in your browser and you will see a page full of
information about PHP along with a list of all the variables available to
you.
<P>You can put multiple PHP statements inside a PHP tag and create little
blocks of code that do more than just a single echo. 
<HR>
<PRE>
      &lt;?php
      if(strstr($HTTP_USER_AGENT,"MSIE")) {
          echo "You are using Internet Explorer&lt;br>";
      }
      ?>
</PRE>
<HR>
<P>We can take this a step further and show how you can jump in and out of PHP
mode even in the middle of a PHP block:
<P>
<HR>
<PRE>
        &lt;?php
        if(strstr($HTTP_USER_AGENT,"MSIE")) 
        {
                ?>
                &lt;center>&lt;b>You are using Internet Explorer&lt;/b>&lt;/center>
                &lt;?
        } 
        else 
        {
                ?>
                &lt;center>&lt;b>You are not using Internet Explorer&lt;/b>&lt;/center>
                &lt;?
        }
        ?>
</PRE>
<HR>

Instead of using a PHP echo statement to output something, we jumped out of
PHP mode and just sent straight HTML. The important and powerful point to
note here is that the logical flow of the script remain intact. Only one of
the HTML blocks will end up getting sent to the viewer. Running this script
right now results in:
<P>You are using Internet Explorer
<P>Dealing with Forms
<P>One of the most powerful features of PHP is the way it handles HTML forms.
The basic concept that is important to understand is that any form element
in a form will automatically result in a variable with the same name as the
element being created on the target page. This probably sounds confusing, so
here is a simple example. Assume you have a page with a form like this on
it:
<HR>
<PRE>
      &lt;form action="action.php3" method="POST">
      Your name: &lt;input type=text name=name>
      You age: &lt;input type=text name=age>
      &lt;input type=submit>
      &lt;/form>
</PRE>
<HR>

There is nothing special about this form. It is a straight HTML form with no
special tags of any kind. When the user fills in this form and hits the
submit button, the action.php3 page is called. In this file you would have
something like this:
<HR>
<PRE>
      Hi &lt;?php echo $name?>.  You are &lt;?php echo $age?> years old.
</PRE>
<HR>

Surprise!! The $name and $age variables are automatically set for you by PHP !!
<P>
<P>
<H2><A NAME="sessions"></A> <A NAME="ss23.1">23.1 Primer on PHP Sessions</A>
</H2>

<P>This section is written by 
<A HREF="mailto:   yzhang@sfu.ca   ">   Ying Zhang  </A>.
<P>Before we begin, let's quickly go over the concept of a session and the reason we need it. It's hard (for me) to define what a session is exactly, so let's use an example that should be very familiar to you -- logging in to your computer and using it every day. After you log in, your computer knows who you are. Every action that you perform is done so with your name.
<P>So what's so special about that -- we take it for granted every time we have to login to any system. What's the big deal with doing this on the web? Well, the web (or specifically, the HTTP protocol) is connectionless. That means each request made to a web server is independent of all the other requests. Whereas your computer keeps information about you in memory and knows when you log in and out, a web server doesn't. A web server simply waits for requests and sends responses.
<P>Let's illustrate this a little bit:
<P>
<HR>
<PRE>
John Doe           __________         Jane Doe 
  1               |          |            2
  3  ------------>|web server|&lt;---------- 4
  5               |__________|            6
</PRE>
<HR>
<P>Let's say we only have two people, John Doe and Jane Doe, accessing MyMarket, and their actions are like this:
<P>
<OL>
<LI> John looks at the product catalog. </LI>
<LI> Jane looks at the product catalog. </LI>
<LI> John adds an item to his basket. </LI>
<LI> Jane adds an item to her basket. </LI>
<LI> John goes to the checkout. </LI>
<LI> Jane goes to the checkout.</LI>
</OL>
<P>Since HTTP is connectionless, each request is completely isolated from the other requests. So how does the server know who's doing what? How does the server know that actions 1, 3, 5 are from John, and actions 2, 4, 6 are from Jane? Well, to make a long story short, the web server doesn't have to know. It can continue on happily responding to requests, session management has to be done with the backend scripting language.
<P>What we need is a way to group together requests by the same person into the same session. This is where PHP4's session management capabilities come in. It can group together requests made from the same source (eg. client's browser) into the same session, we have to provide the smarts to associate users with sessions.
<P>In other words, PHP4's session management can tell us requests 1, 3, and 5 belong to the same session (call it session A). Our application has to know that session A is owned by John Doe.
<P>
<P>
<H2><A NAME="sessionsmgmt"></A> <A NAME="ss23.2">23.2 Session Management in PHP4</A>
</H2>

<P>PHP4 adds some session management functions that make our life easier when dealing with sessions. The ones we are interested in are:
<HR>
<PRE>
session_start(); 
session_register();
</PRE>
<HR>
<P>session_start() is used to start up PHP4's session management capabilities; you need to call it before you use any of the other session functions. session_register() is used to tell PHP which variables to track in the session. A typical call to these functions would look like this:
<P>session_register("SESSION");
<P>This tells PHP to start up the session manager, and tells PHP that the variable called SESSION is a session variable. You can register as many session variables as you like, but I prefer to only register one session variable called SESSION, and anything I need persistent I put into this variable. For example, I like to say:
<P>
<HR>
<PRE>
session_register("SESSION");
$SESSION["var1"] = 5;
$SESSION["var2"] = 6;
</PRE>
<HR>
<P>instead of
<HR>
<PRE>
session_register("var1");
session_register("var2");
$var1 = 5;
$var2 = 6;
</PRE>
<HR>

because after you register lots of session variables, you tend to forget what 
they were, well, at least I do :).
<P>Anyhow, by now you probably want to see some code in action, so create a script called session_test.php somewhere accessible, and put into it:
<P>
<HR>
<PRE>
&lt;?
session_start();
session_register("SESSION");

if (! isset($SESSION)) {
        $SESSION["count"] = 0;
        echo "&lt;li>Counter initialized, please reload this page to see it increment";
} else {
        echo "&lt;li>Waking up session $PHPSESSID";
        $SESSION["count"]++;
}
echo "&lt;li>The counter is now $SESSION[count] ";
?>
</PRE>
<HR>
<P>Fire that up in your browser, the first time you hit the page, it should say " Counter initialized, please reload this page to see it increment". Each time you reload it, the counter value should increment by one. You will also see the session ID. If it does, then hurray, your PHP4 session manager works :)
<P>So how does this work? Well, when you call session_start(), PHP4 determines a unique session ID for the client. This session ID is an MD5 hash of something (not sure what), and 
is either <B>stored in a cookie</B> on the client's PC or is <B>propagated in the URL</B>.
<P>
<P>Now each time that client makes a request, PHP4 will read this session ID and load up the data for the session. When you call session_register(), you are telling PHP4 which variables you want kept in the session. Each page that loads up, the previous values for the registered variables will be reloaded, and each time the page ends PHP4 will save the values of the registered variables.
<P>By default, PHP keeps track of the sessions in temporary files in the /tmp 
directory. If you leave this set to a world-readable directory, such as /tmp (the
default), other users on the server may be able to hijack sessions by
getting the list of files in that directory.
<P><B>session.save_path</B> defines the argument which is passed to the save 
handler. If you choose the default files handler, this is the path where 
the files are created. Defaults to /tmp.
<P>Take a listings and see for yourself:
<P>You will see something like this:
<P>
<HR>
<PRE>
-rw-------   1 apache   web            10 May  7 15:27 sess_6dd9ea8e61cd49cd3ad6de8c8b8885e8
-rw-------   1 apache   web            10 May  7 19:49 sess_7d7f97afb6759948f554b00272494e52
-rw-------   1 apache   web             6 May  9 01:00 sess_8ab78830e151add9d79b628958ce4eb9
-rw-------   1 apache   web            31 May  9 11:41 sess_a3058a6bb1baf57f565c3844c8810f4b
-rw-------   1 apache   web            30 May  9 11:42 sess_c379faad83ad3dc8ab6d22c14dbab3b4
-rw-------   1 apache   web             6 May  8 01:00 sess_cd68a5054241aff1a8157c289683e869
-rw-------   1 apache   web            34 May  7 15:17 sess_cd97e41912b28c44cc0481b7d978cb61
-rw-------   1 apache   web            42 May  9 11:23 sess_d1285edd0c951c70b1aec17a5f602fc0
-rw-------   1 apache   web            30 May  9 11:42 sess_da93f6e19b6be01257d7a6453766a23d
-rw-------   1 apache   web            42 May  7 21:26 sess_e837123c1af78c538e89b47030fde337
</PRE>
<HR>
<P>Each one of those files is a session, let's take a look at one of them (note, you probably have to su to root to peek inside a session file). Tip: don't just cut and paste the following commands, you need to specify the name of a real file:
<P>
<HR>
<PRE>
# more /tmp/sess_a3058a6bb1baf57f565c3844c8810f4b
</PRE>
<HR>
<P>You will see something like this:
<P>
<HR>
<PRE>
SESSION|a:1:{s:5:"count";i:234;}
</PRE>
<HR>
<P>Does that look familiar? It should if you've ever used the serialize() and unserialize() functions in PHP. If not, don't worry about it. Anyhow, I just wanted to illustrate how sessions were stored. You can rewrite the PHP session handlers to store sessions into a database or whatever else, but that's beyond the scope of this tutorial (but it's not hard at all).
<P>
<P>
<P>
<P>
<H2><A NAME="sessionpropagate"></A> <A NAME="ss23.3">23.3 Session Propagation</A>
</H2>

<P>There are two methods to propagate a session id: 
<UL>
<LI>Cookies 
<P>
</LI>
<LI>URL parameter </LI>
</UL>

The session module supports both methods. Cookies are optimal, but since they are
not reliable (clients are not bound to accept them), we cannot rely on
them. The second method embeds the session id directly into URLs. 
<P>PHP is capable of doing this transparently when compiled with --enable-trans-sid. If you
enable this option, relative URIs will be changed to contain the session id 
automatically. Alternatively, you can use the constant SID which is defined, if the 
client did not send the appropriate cookie. SID is either of the form
session_name=session_id or is an empty string. 
<P>The following example demonstrates how to register a variable, and how to link 
correctly to another page using SID.
<P>Example : Counting the number of hits of a single user
<HR>
<PRE>
&lt;html>
&lt;h1&gt;Example : Counting the number of hits of a single user&lt;/h1>
&lt;br>
&lt;php
session_register ("count");
$count++;
?>

Hello visitor, you have seen this page &lt;?php echo $count; ?> times.&lt;p>;

&lt;php
# the &lt;?=SID?> is necessary to preserve the session id
# in the case that the user has disabled cookies
?>

To continue, &lt;A HREF="nextpage.php?&lt;?=SID?>">click here&lt;/A>
&lt;html>
</PRE>
<HR>

The &lt;?=SID?> is not necessary, if --enable-trans-sid was used to compile PHP. 
<P>Note: Non-relative URLs are assumed to point to external sites and hence 
don't append the SID, as it would be a security risk to leak the SID
to a different server.
<P>
<P>
<P>
<H2><A NAME="usermgt"></A> <A NAME="ss23.4">23.4 User Management and Privileges</A>
</H2>

<P>Okay, we've spend enough time on PHP4's session management, all you really need to get out of that was the two functions session_start() and session_register(). Let's get back to the issue of keeping track of users.
<P>PHP can help us keep track of sessions, and group requests from the same session together. Now, we have to do our part and associate user accounts with these sessions. We will use a variable called SESSION["user"] to keep track of user information. When a user logs in, we will put their information into this variable. As long as this variable is defined, we will assume that a user has logged in. When a user logs off, we will clear out this variable.
<P>Specifically, we will keep the following information about the user:
<P>
<HR>
<PRE>
SESSION["user"]["username"] This is the user's login ID (their nick name if you will), and it is how we tell users apart from each other. 
SESSION["user"]["firstname"] The user's firstname. 
SESSION["user"]["lastname"] The user's lastname. 
SESSION["user"]["email"] The user's email address. 
SESSION["user"]["priv"] The user's privilege level.
</PRE>
<HR>
<P>Let's talk a bit about the privilege levels. We are going to have two levels of security: (1) normal customers and (2) administrative users. Normal customers can use the system, browse through the catalog, and do other customer functions. Administrators can do everything a normal user can do, but also has the ability to perform system administrative functions. In real life, there are probably many more privilege levels that you want defined but we are going to keep things simple here.
<P>This is all fine and dandy, but where do we get this user information from? We need to have a way to store all the users on the system, and the perfect place for that would be in the database. We're going to create a users table to hold all our users.
<P>
<P>
<P>
<H2><A NAME="usertable"></A> <A NAME="ss23.5">23.5 Step1: Creating the Users Table</A>
</H2>

<P>Start up database server and login to database.
Let's create the user table:
<P>
<HR>
<PRE>
psql> CREATE TABLE users (
->   username     char(16) not null,
->   password     char(32) not null,
->   priv         char(5) not null,
->   firstname    varchar(64) not null,
->   lastname     varchar(64) not null,
->   email        varchar(128) not null,
->   phone        varchar(32) not null,
->   address      varchar(255) not null,
->   PRIMARY KEY (username),
->   UNIQUE email (email)
-> );
</PRE>
<HR>

Notice the constraints we've put on the users table, the username is the primary key (which makes sense, you should be able to identify a user record based on the username). The email address has a unique constraint as well because we don't want duplicate email addresses. 
<P>Now let's add a record to create the root user with the password password:
<P>
<HR>
<PRE>
psql> INSERT INTO users VALUES (
->    'root',
->    '5f4dcc3b5aa765d61d8327deb882cf99',
->    'admin',
->    'System',
->    'Administrator',
->    'root@mymarket.com',
->    '555-5555',
->    '123 5 Avenue'
-> );
</PRE>
<HR>
<P>Notice the password looks a bit wierd, <B>5f4dcc3b5aa765d61d8327deb882cf99</B>. This 
is the MD5 hash of the the word "password", I won't go into details here, but the important thing to note is that it's a one-way algorithm and it always produces a 32 character string.
<P>That's it, we have a users table to track our users, and one administrative account 
so we can try logging in and out of the system using the example tar file 
(download the example tar file from 
<A HREF="http://www.devshed.com/Server_Side/PHP/Commerce1">http://www.devshed.com/Server_Side/PHP/Commerce1</A>
).
<P>
<P>
<HR>
<A HREF="PHP-HOWTO-24.html">Next</A>
<A HREF="PHP-HOWTO-22.html">Previous</A>
<A HREF="PHP-HOWTO.html#toc23">Contents</A>
</BODY>
</HTML>

