ID=E0637
URL=http://www.research.att.com/~bs/dne_errata.html
SIZE=11428
DATE=12/07/02
TIME=19:22:58
DATASET=C
HTML=<html>
<head>
<title>Stroustrup: Errata for The Design and Evolution of C++</title>
</head>
<body bgcolor="FFFBFB">
<center>
<h1>Errata for The Design and Evolution of C++</h1>
</center>
Errata for
<a href="homepage.html">
Bjarne Stroustrup</a>:
<a href="dne.html">
The Design and Evolution of C++</a>,
Addison-Wesley 1995,
ISBN 0-201-54330-3
<p>
This is errata for the first printing. All but corrections
marked with * are fixed for the current (3rd) printing.
<p>
You find the printing number as the first number on the last line
of the copyright page.
<p>
I only list things that can affect understanding. Spelling mistakes
you can fix yourself if you spot them.
<p>
I very much appreciate reports of errors and constructive comments
on the contents in general.
<p>
For brevity, I use the old replacement syntax: s/old/new/
<p>
	- Bjarne
<hr>
<h3>Errata to the first printing:</h3>
pg32	s/(_temp.impl.rest_)/(sec15.11.3)/
<p>
pg64	s/Stratchey/Strachey/
<p>
pg67	s/McClusky/McCluskey/
<p>
pg78	at the end of sec3.5.3 add
<p>
	See sec17.5.2 for a way to explicitly request overloading
	of base and derived class functions.
<p>
pg99	replace the last paragraph of 3.11.5.1 with
<p>
	This rule was the subject of much discussion and was eventually
	revised to match the rule for declarations in conditions (sec3.11.5.2).
	That is, a name introduced in a for-statement initializer goes out
	 of scope at the end of the  for-statement.
<p>
pg165	s/Sing/Singh/
<p>
pg190	s/Erathostenes/Eratosthenes/
<p>
pg228	s/and surprising/and less surprising/
<p>
pg 255	change the definitions of true and TRUE to
<pre>
	const true = 1;
	#define TRUE 1
</pre>
pg343	add after sec15.3.1
<p>
	Class templates as template arguments were approved at the March
	1994 meeting in San Diego.
<p>
pg 349	s/lookup<Buffer/lookup(Buffer/
<p>
pg 359	replace body of compare function with
<pre>
	for(int i=0; i< str1.length() && i< str2.length(); i++)
		if (!C::eq(str1[i],str2[i]))
			return C::lt(str1[i],str2[i]);
	return str2.length()-str1.length();
</pre>
pg360	s/compare(swede1,swede2,LITERATE)/compare<char,LITERATE>(swede1,swede2)/
<p>
	s/compare(s1,s2,NOCASE)/compare<char,NOCASE>(s1,s2)/
<p>
pg362	replace the last sentense of 15.9.1 by
<p>
	Member templates are described in sec15.9.3.
<p>
pg364	first line s/aren't allowed/weren't allowed/
<p>
	third line from bottom: s/I hope to see member templates in C++.//
<p>
pg375	write should be defined like this:
<pre>
	void write(int vv) { v=vv; }
</pre>
pg389	in comment s/close/open/
<p>
pg426	s/syntactically correct/syntactically correct and type check/
<hr>
<h3>Errata to the second printing:</h3>
pg5	change
<pre>
		1994	Sep	Draft ANSI/ISO  standard due
	to
		1994	Aug	ANSI/ISO Committee Draft registered
</pre>
pg6	move CLOS to 1988
<p>
pg80	at the end of 3.6.1 add
<p>
	Naturally, I realized that not all constructors defined
	meaningful and unsurprising implicit conversions. For example, a
	vector type usually has a constructor taking an integer argument
	indicating the number of elements. It was an unfortunate sideefect
	to have v=7 construct a vector of seven elements and assign it to
	v . I didn't consider this problem urgent, though. Several members
	 of the C++ standards committee (sec6.2), notably Nathan Myers,
	suggested that a solution was necessary. In 1995, the problem was
	solved by allowing the prefix explicit to be added to the declaration
	of a constructor. A constructor declared explicit is used for explicit
	construction only and not for implicit conversions. For example,
	declaring vector's constructor ``explicit vector(int);'' makes v=7
	an error while the more explicit v=vector(7) as ever constructs and
	assigns a vector.
<p>
pg129	add footnote
<p>
	In July 1994, the committee voted for ``CD registration'' as the
	first step of the completion of the ISO process is now called.
	Scheduling a standard isn't easy. In particular, ``details'' such
	as what a standard is and how you must make one aren't standardized
	and seem to change every year.
<p>
pg131	add and modify list entries
<ul>
<li> Declarations in conditions (sec3.11.5.2)
<li> Mutable (sec13.3.3)
<li> Member templates (sec15.8.2)
<li> Class templates as template arguments (sec15.3.1)
<li> A const static member of integral type can be initialized by a
	  constant-expression within a class declaration.
<li> Explicit constructors (sec3.6.1)
<li> Static checking of exception specifications (sec16.9).
</ul>
pg150-152 replace sec6.4.2 with 
<p>
	So how is the committee doing? We won't really know until the
	standard appears because there is no way of knowing how new proposals
	will fare. This summary is based on the state of affairs after the
	November 1994 meeting in Valley Forge.
<p>
	Proposing extensions for C++ seems to be popular. For example:
<ul>
<li> Extended (international) character sets (sec6.5.3.2)
<li> Various template extensions (sec15.4, sec15.9.3)
<li> Garbage collection (sec10.7)
<li> NCEG proposals (for example, sec6.5.2)
<li> Discriminated unions
<li> User-defined operators (sec11.6.2)
<li> Evolvable/indirect classes
<li> Enumerations with predefined ++ , << , etc., operators
<li> Overloading based on return type
<li> Composite Operators (sec11.6.3)
<li> Keyword for the null pointer (NULL , nil, etc.) (sec11.2.3)
<li> Pre- and post-conditions
<li> Improvements to the Cpp macros
<li> Rebinding of references
<li> Continuations
<li> Currying.
</ul>
	There is some hope of restraint and that accepted features will be
	properly integrated into the language. Only a few new features have
	been accepted so far:
<ul>
<li> Exception handling (``mandated'') (sec16)
<li> Templates (``mandated'') (sec15)
<li> European character set representation of C++ (sec6.5.3.1)
<li> Relaxing rule for return types for overriding functions (sec13.7)
<li> Run-time type identification (sec14.2)
<li> Declarations in conditions (sec3.11.5.2)
<li> Overloading based on enumerations (sec11.7.1)
<li> User-defined allocation and deallocation operators for arrays (sec10.3)
<li> Forward declaration of nested classes (sec13.5)
<li> Namespaces (sec17)
<li> Mutable (sec13.3.3)
<li> Boolean type (sec11.7.2)
<li> A new syntax for type conversion (sec14.3)
<li> An explicit template instantiation operator (sec15.10.4)
<li> Explicit template arguments in template function calls (sec15.6.2)
<li> Member templates (sec15.9.3)
<li> Class templates as template arguments (sec15.3.1)
<li> A const static member of integral type can be initialized by a
	  constant-expression within a class declaration
<li> Explicit constructors (sec3.6.1)
<li> Static checking of exception specifications (sec16.9).
</ul>
	Exceptions and templates stand out among the extensions as being
	mandated by the original proposal and described in the ARM, and also
	by being a couple of orders of magnitudes more difficult to define
	and to implement than any of the other proposals.
<p>
	To contrast, the committee has rejected many proposals. For example:
<ul>
<li> Several proposals for direct support for concurrency
<li> Renaming of inherited names (sec12.8)
<li> Keyword arguments (sec6.5.1)
<li> Several proposals for slight modifications of the data hiding rules
<li> Restricted pointers (``son of noalias'') (sec6.5.2)
<li> Exponentiation operator (sec11.5.2)
<li> Automatically generated composite operators
<li> User-defined operator.() (sec11.5.2)
<li> Nested functions
<li> Binary literals
<li> General initialization of members within a class declaration.
</ul>
	Please note that a rejection doesn't imply that the proposal was
	deemed bad or even useless. In fact, most proposals that reach the
	committee are technically sound and would help at least some subset
	of the C++ user community. The reason is that most ideas never make
	it through the initial scrutiny and effort to make it into a proposal.
<p>
pg157	s/color(green)/Color(green)/
<p>
pg194	add footnote
<p>
	Here, I have the great pleasure of eating my words!
	The committee did raise to the occasion and approved a splendid
	library of containers, iterators, and fundamental algorithms
	designed by Alex Stepanov. This library, often called the STL,
	is an elegant, efficient, formally sound, and well-tested framework
	for containers and their use (Alexander Stepanov and Meng Lee:
	The Standard Template Library, HP Labs Technical Report HPL-94-34
	(R. 1), August, 1994. Mike Vilot: An Introduction to the STL Library.
	The C++ Report, October 94). Naturally, the STL includes map and
	list classes, and subsumes the dynarray, bits, and bitstring
	classes mentioned above. In addition, the committee approved vector
	classes to support numeric/scientific computation based on a proposal
	from Ken Budge from Sandia Labs.
<p>
pg239	s/struct {/struct Y {/
<p>
pg241	s/someone sitting on my right/Jim Howard/
	delete sentence beginning /Unfortunately, I have forgotten/
<p>
pg244	the last code fragment should be
<pre>
	void h(RefNum r, Num& x)
	{
		r.bind(x);     // error: no Num::bind
		(&r)->bind(x); // ok: call RefNum::bind
	}
</pre>
pg245	s/RefX/RefNum/
<p>
pg246	in example 1,2,3, and 5 swap X and X& in the return types.
	in example 4 swap postfix and prefix in the comments.
<p>
pg263	s/D { g }/D { g() }/
<p>
pg265	s/f(2)/f(2);/
<p>
pg274	s/int go_draw/void go_draw/
<p>
pg278	end of paragraph near middle of page:
<p>
	s/this simple notion/this simple notion directly/
<p>
pg283	declare members of B and C public.
<p>
pg304	s/S::f/S::mf/
<p>
	s/p->*pf/p->*pmf/
<p>
*pg322	s/}/return p; }/
<p>
	s/the usual way except/the usual way by/
<p>
pg332	Replace sentense near the middle by
<p>
	pd2 will point to the start of the D object passed, whereas
	pd1 will point to the start of D 's B sub-object.
<p>
pg333	replace example by
<pre>
	const char cc = 'a';
	const char* pcc = &cc;
	const char** ppcc = &pcc;
	void* pv = ppcc; // no cast needed:
	                 // ppcc isn't a const, it only points to one,
	                 // but const vanished!
	char** ppc = (char**)pv; // points to pcc

	void f()
	{
		**ppc = 'x'; // Zap!
	}
</pre>
pg352	s/(B<int>*)d/(B<int>*)pd/
<p>
pg359	s/lt()/lt(char a, char b)/
<p>
*pg374	replace the definition Comparable by:
<pre>
		template<class T> class Comparable {
			T val;
			// ...
			bool operator==(const Comparable<T>& r)
				{ return val==r.val; }
		};
</pre>
pg389	at the end of the declaration of FilePtr: s/}/};/
<p>
pg396	add to just beforethe start of sec16.9.1
<p>
	In 1995, we found a scheme that allows some static checking of
	exception specifications and improved code generation without
	causing the problems described above. Consequently, exception
	specifications are now checked so that pointer to function assignments,
	initializations, and virtual function overriding cannot lead to
	violations. Some unexpected exceptions can still occur, and those
	are caught at run time as ever.
<hr>
<h3>Comments:</h3>
<p>	
D&E was awarded one of ``Software Development'' Magazine's Productivity awards.
<p>
You can find reviews in Dr. Dobbs Journal, August 1994 (by Al Stevens)
and The C++ Report, October 1994 (by Keith Gorlen)
</body>
</html>


