ID=E0128
URL=http://www.bcbdev.com/faqs/faq76.htm
SIZE=35353
DATE=12/07/02
TIME=19:17:48
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>BCBDEV.COM: FAQs</TITLE>
   <META NAME="Author" CONTENT="Harold Howe">
</HEAD>
<BODY BGCOLOR="WHITE">

<CENTER>
<TABLE  BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="640">
<TR>
<TD WIDTH="240" NOWRAP ROWSPAN=2 VALIGN="CENTER">
<IMG SRC="../images/faq.gif" BORDER=0 ALIGN="CENTER" HSPACE="0">
</TD>
<TD WIDTH="400" NOWRAP COLSPAN=6 VALIGN="BOTTOM">
<IMG SRC="../images/bcbdev.gif" BORDER=0 ALIGN="CENTER" HSPACE="0">
</TD>
</TR>
<TR>
<TD WIDTH="70" VALIGN="TOP"><A href="http://www.bcbdev.com"> <IMG SRC="../images/home.gif"     ALT="Home"      BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP"></A></TD>
<TD WIDTH="75" VALIGN="TOP"><A href="../articles.htm">       <IMG SRC="../images/articles.gif" ALT="Articles"  BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP"></A></TD>
<TD WIDTH="55" VALIGN="TOP"><A href="../books.htm">          <IMG SRC="../images/books.gif"    ALT="Books"     BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP"></A></TD>
<TD WIDTH="90" VALIGN="TOP"><A href="../download.htm">       <IMG SRC="../images/download.gif" ALT="Downloads" BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP"></A></TD>
<TD WIDTH="55" VALIGN="TOP"><A href="../faqs.htm">           <IMG SRC="../images/faqs.gif"     ALT="FAQs"      BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP"></A></TD>
<TD WIDTH="55" VALIGN="TOP"><A href="../idetips.htm">        <IMG SRC="../images/tips.gif"     ALT="Tips"      BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP"></A></TD>
</TR>
<TR>
<TD COLSPAN=7>
<HR>



<H3>
Q: Sublcass a windows control
</H3>
<BR>
<H3>Answer</H3>
<P>
The term <I>subclass</I> can mean different things to different people. In C++ language terms, subclassing equates to
deriving a new class from a base class. In Windows API terms, subclassing is the act of hooking the window procedure
of a window so you can intercept messages. This FAQ describes how to subclass a window to intercept messages. There
are several ways to accomplish this. You can use the windows API, you can assign a VCL property, or you can derive
a new VCL class that overrides the behavior of the base control.
</P>
<HR>
<H4>
Subclassing with the Windows API
</H4>
<P>
The API contains a function called <TT>SetWindowLong</TT>. Among other things,
this function allows you to set the window procedure (<TT>WNDPROC</TT>) of any window handle in your program's
address space. The function <TT>GetWindowLong</TT> allows you to retrieve the window procedure of a window handle.
The code listing below uses <TT>GetWindowLong</TT> and <TT>SetWindowLong</TT> to sublcass a <TT>TListView</TT>. The
program intercepts the <TT>WM_ERASEBKGND</TT> message to paint a custom background in the list view. Figure 1
illustrates what the code is doing.
<pre>
<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// header file</font>
<b>class</b> TForm1 <b>:</b> <b>public</b> TForm
<b>{</b>
<b>__published</b><b>:</b>	<font color="navy">// IDE-managed Components</font>
    TListView <b>*</b>ListView1<b>;</b>
    TImageList <b>*</b>ImageList1<b>;</b>
    <b>void</b> <b>__fastcall</b> FormResize<b>(</b>TObject <b>*</b>Sender<b>)</b><b>;</b>
<b>private</b><b>:</b>	<font color="navy">// User declarations</font>
    WNDPROC FOriginalProc<b>;</b>
    <b>void</b> <b>__fastcall</b> PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b><b>;</b>
<b>public</b><b>:</b>		<font color="navy">// User declarations</font>
    <b>__fastcall</b> TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b><b>;</b>
    <b>__fastcall</b> <b>~</b>TForm1<b>(</b><b>)</b><b>;</b>

    LRESULT <b>__fastcall</b> ListViewProc<b>(</b>HWND hWnd<b>,</b>
                                    UINT uMsg<b>,</b>
                                    WPARAM wParam<b>,</b>
                                    LPARAM lParam<b>)</b><b>;</b>
<b>}</b><b>;</b>


<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// source file</font>
<font color="navy">//-------------------------------------------------------</font>
<font color="green">#include &lt;vcl.h></font>
<font color="green">#pragma hdrstop</font>

<font color="green">#include "main.h"</font>
<font color="navy">//-------------------------------------------------------</font>
<font color="green">#pragma package(smart_init)</font>
<font color="green">#pragma resource "*.dfm"</font>
TForm1 <b>*</b>Form1<b>;</b>
<font color="navy">//-------------------------------------------------------</font>
LRESULT CALLBACK ControlWndProc<b>(</b>HWND hWnd<b>,</b>
                                UINT uMsg<b>,</b>
                                WPARAM wParam<b>,</b>
                                LPARAM lParam<b>)</b>
<b>{</b>
    <b>return</b> Form1<b>-></b>ListViewProc<b>(</b>hWnd<b>,</b> uMsg<b>,</b> wParam<b>,</b> lParam<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b>TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b>
    <b>:</b> TForm<b>(</b>Owner<b>)</b>
<b>{</b>
    <font color="navy">// Call GetWindowLong to retrieve the original window proc</font>
    FOriginalProc <b>=</b> <b>(</b>WNDPROC<b>)</b> GetWindowLong<b>(</b>ListView1<b>-></b>Handle<b>,</b> GWL_WNDPROC<b>)</b><b>;</b>

    <font color="navy">// Call SetWindowLong to assign the new window proc for the listview</font>
    SetWindowLong<b>(</b>ListView1<b>-></b>Handle<b>,</b> GWL_WNDPROC<b>,</b> <b>(</b>LONG<b>)</b>ControlWndProc<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b><b>~</b>TForm1<b>(</b><b>)</b>
<b>{</b>
    <font color="navy">// Set the window proc back to the original function</font>
    SetWindowLong<b>(</b>ListView1<b>-></b>Handle<b>,</b> GWL_WNDPROC<b>,</b> <b>(</b>LONG<b>)</b> FOriginalProc<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
LRESULT <b>__fastcall</b> TForm1<b>:</b><b>:</b>ListViewProc<b>(</b>HWND hWnd<b>,</b>
                                        UINT uMsg<b>,</b>
                                        WPARAM wParam<b>,</b>
                                        LPARAM lParam<b>)</b>
<b>{</b>
    LRESULT lResult <b>=</b> <font color="blue">0</font><b>;</b>
    <b>switch</b><b>(</b>uMsg<b>)</b>
    <b>{</b>
        <b>case</b> WM_ERASEBKGND<b>:</b>
            PaintListView<b>(</b><b>(</b>HDC<b>)</b>wParam<b>)</b><b>;</b>
            lResult <b>=</b> <font color="blue">0</font><b>;</b>
            <b>break</b><b>;</b>
        <b>case</b> WM_HSCROLL<b>:</b>
        <b>case</b> WM_VSCROLL<b>:</b>
            LockWindowUpdate<b>(</b>hWnd<b>)</b><b>;</b>
            lResult <b>=</b> CallWindowProc <b>(</b><b>(</b>FARPROC<b>)</b>FOriginalProc<b>,</b> hWnd<b>,</b> uMsg<b>,</b>
                                      wParam<b>,</b> lParam<b>)</b><b>;</b>
            InvalidateRect <b>(</b>hWnd<b>,</b> <font color="blue">0</font><b>,</b> <b>true</b><b>)</b><b>;</b>
            LockWindowUpdate<b>(</b>NULL<b>)</b><b>;</b>
            <b>break</b><b>;</b>
        <b>default</b><b>:</b>
            lResult <b>=</b> CallWindowProc <b>(</b><b>(</b>FARPROC<b>)</b>FOriginalProc<b>,</b> hWnd<b>,</b> uMsg<b>,</b>
                                      wParam<b>,</b> lParam<b>)</b><b>;</b>
            <b>break</b><b>;</b>
    <b>}</b>
    <b>return</b> lResult<b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b>
<b>{</b>
    TRect rect <b>=</b> ListView1<b>-></b>BoundsRect<b>;</b>

    Graphics<b>:</b><b>:</b>TBitmap <b>*</b>MemBitmap <b>=</b> <b>new</b> Graphics<b>:</b><b>:</b>TBitmap<b>;</b>
    MemBitmap<b>-></b>Width <b>=</b> rect<b>.</b>Right <b>-</b> rect<b>.</b>Left<b>;</b>
    MemBitmap<b>-></b>Height<b>=</b> rect<b>.</b>Bottom<b>-</b> rect<b>.</b>Top<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>Brush<b>-></b>Style <b>=</b> bsSolid<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>Brush<b>-></b>Color <b>=</b> clAqua<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>FillRect<b>(</b>Rect<b>(</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>,</b>
                                     MemBitmap<b>-></b>Width<b>,</b>
                                     MemBitmap<b>-></b>Height<b>)</b><b>)</b><b>;</b>

    MemBitmap<b>-></b>Canvas<b>-></b>Pen<b>-></b>Color <b>=</b> clNavy<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>Pen<b>-></b>Width <b>=</b> <font color="blue">20</font><b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>MoveTo<b>(</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>)</b><b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>LineTo<b>(</b>MemBitmap<b>-></b>Width<b>,</b> MemBitmap<b>-></b>Height<b>)</b><b>;</b>

    <b>:</b><b>:</b>BitBlt<b>(</b>dc<b>,</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>,</b>MemBitmap<b>-></b>Width<b>,</b> MemBitmap<b>-></b>Height<b>,</b>
             MemBitmap<b>-></b>Canvas<b>-></b>Handle<b>,</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>,</b>SRCCOPY<b>)</b><b>;</b>
    <b>delete</b> MemBitmap<b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b><b>/</b> TForm1<b>:</b><b>:</b>FormResize<b>(</b>TObject <b>*</b>Sender<b>)</b>
<b>{</b>
    ListView1<b>-></b>Repaint<b>(</b><b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
</pre>
<IMG SRC="subclass.gif"  ALT="An MDI Window menu"    BORDER=0 HSPACE="0" ALIGN="CENTER" VALIGN="TOP">
<P><B>Figure 1: Painting the background of a TListView control.</B></P>

<P>
<B>Note 1:</B> Windows is picky about the kind of function that you pass to <TT>SetWindowLong</TT>. Unfortunately,
it waits until runtime to let you know if anything is wrong. <TT>SetWindowLong</TT> passes the
callback function as a <TT>LONG</TT> variable. The problem is that you can cast just about anything as a <TT>LONG</TT>.
If you prototype the callback function incorrectly, the compiler cannot catch your mistake at compile time. Make sure
that the function that you pass to <TT>SetWindowLong</TT> takes four arguments, returns a <TT>LONG</TT> value, and uses
the <TT>__stdcall</TT> calling convention. If you prototype the function like this, you shouldn't have any problems.
</P>
<pre>
LRESULT CALLBACK ControlWndProc<b>(</b>HWND hWnd<b>,</b>
                                UINT uMsg<b>,</b>
                                WPARAM wParam<b>,</b>
                                LPARAM lParam<b>)</b>
</pre>
<P>
<B>Note 2:</B> The window procedure that you pass to <TT>SetWindowLong</TT> cannot be a non-static method of class.
Non-static member functions take a hidden <TT>this</TT> pointer as their first argument. The hidden pointer identifies
the object whose method you are calling. This is a result of how compilers implement classes and objects in C++.
</P>
<P>
For example, look at the <TT>ListViewProc</TT> method of <TT>TForm1</TT>. The function takes four arguments, an
<TT>HWND</TT>, an integer, a <TT>WPARAM</TT>, and an <TT>LPARAM</TT>. In reality, the function takes a fifth argument
that is a pointer to a <TT>TForm1</TT> object. The form pointer identifies the form whose method is being invoked.  You
can see the hidden pointer argument by inspecting the assembly language generated by a call to the
<TT>ListViewProc</TT> function.
</P>
<P>
Windows has no concept of <TT>this</TT> pointers, objects and classes. When you subclass a window procedure, the
operating system expects to see a function that takes four arguments: an <TT>HWND</TT>, an integer, a <TT>WPARAM</TT>,
and an <TT>LPARAM</TT>. It doesn't expect
to find a function that takes a fifth pointer argument. If you subclass a window procedure with a non-static member
function, Windows will not pass arguments to the function correctly. If you attempt to dereference any members of the
class from inside your window procedure, you could cause an access violation because the hidden <TT>this</TT> pointer
will probably be a garbage value. Also you run the risk of corrupting your stack because the wrong number of arguments
will be popped off when the function returns.
</P>
<P>
You can subclass a window procedure with a static member function of a class, because static member functions don't
have a hidden pointer argument. If you decide to try this technique, make sure that your static member function follows
the same calling convention that Windows will use to call the function. The code below shows how you would declare
the function.
</P>
<pre>
<b>class</b> TForm1 <b>:</b> <b>public</b> TForm
<b>{</b>
<b>...</b>
<b>private</b><b>:</b>
    <b>static</b> LRESULT CALLBACK ListViewProc<b>(</b>HWND hWnd<b>,</b>
                                         UINT uMsg<b>,</b>
                                         WPARAM wParam<b>,</b>
                                         LPARAM lParam<b>)</b><b>;</b>
<b>}</b><b>;</b>

</pre>
<P>
When you use a static member function as your callback procedure, you cannot attempt to call non-static member functions
and you can't dereference non-static member variables of the class. This presents a problem in this example, because we
store the original window procedure in a private variable. We would not be able to dereference this variable from a
static callback function (unless we made the variable static too). The next section describes a VCL technique that
allows you to subclass using a non-static member function of a class.
</P>


<P>
<B>Note 3:</B> The original window proc for the listview is stored in a variable called <TT>FOriginalProc</TT>. This
variable serves two purposes. First, it allows us to pass on window messages when we don't want to alter the default
behavior of the control. Secondly, when the form's destructor executes, we set the window proc of the listview back
to the original handler. This is very important. The lifetime of the listview exceeds the lifetime of the form.
Actually, to be more precise, it exceeds the lifetime of the <TT>TForm1</TT> part of the form.</P>
<P>
The listview is deleted by the base classes of the form. When the listview gets destroyed, certain messages are sent.
Windows will send those messages to the <TT>ControlWndProc</TT> function if we don't restore the original handler.
The problem is that <TT>ControlWndProc</TT> calls a method of <TT>TForm1</TT>.
This is a bad scenario if the <TT>TForm1</TT> destructor has already executed. To prevent this from occuring, the code
restores the original window procedure of the listview in the destructor of the form.
</P>

<BR>
<HR>
<H4>
Subclassing with the VCL MakeObjectInstance function
</H4>
<P>
The VCL provides a utility function called <TT>MakeObjectInstance</TT> that allows you to sublcass a window using
a member function of a class. When you subclass using <TT>MakeObjectInstance</TT>, the actual window proc is a method
inside the VCL called <TT>StdWndProc</TT>. <TT>StdWndProc</TT> dispatches windows messages to the method of your
class. <TT>StdWndProc</TT> handles the task of determining which object should get
the message. Put another way, <TT>StdWndProc</TT> knows the value of the hidden <TT>this</TT> pointer that must be
passed when your member function is called.
</P>
<P>
The code snippets below demonstrate how to sublcass the listview using <TT>MakeObjectInstance</TT>. Notice that the
stand alone function <TT>ControlWndProc</TT> is no longer needed.
</P>
<pre>
<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// header file</font>
<b>class</b> TForm1 <b>:</b> <b>public</b> TForm
<b>{</b>
<b>__published</b><b>:</b>	<font color="navy">// IDE-managed Components</font>
    TListView <b>*</b>ListView1<b>;</b>
    TImageList <b>*</b>ImageList1<b>;</b>
    <b>void</b> <b>__fastcall</b> FormResize<b>(</b>TObject <b>*</b>Sender<b>)</b><b>;</b>
<b>private</b><b>:</b>	<font color="navy">// User declarations</font>
    WNDPROC FOriginalProc<b>;</b>
    <b>void</b> <b>*</b>  FObjectInstance<b>;</b>
    <b>void</b> <b>__fastcall</b> PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b><b>;</b>
    <b>void</b> <b>__fastcall</b> ListViewProc<b>(</b>TMessage <b>&</b>msg<b>)</b><b>;</b>

<b>public</b><b>:</b>		<font color="navy">// User declarations</font>
    <b>__fastcall</b> TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b><b>;</b>
    <b>__fastcall</b> <b>~</b>TForm1<b>(</b><b>)</b><b>;</b>
<b>}</b><b>;</b>


<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// source file</font>
<font color="navy">//-------------------------------------------------------</font>

<font color="navy">//-------------------------------------------------------</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b>TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b>
    <b>:</b> TForm<b>(</b>Owner<b>)</b>
<b>{</b>
    <font color="navy">// Call GetWindowLong to retrieve the original window proc</font>
    FOriginalProc <b>=</b> <b>(</b>WNDPROC<b>)</b> GetWindowLong<b>(</b>ListView1<b>-></b>Handle<b>,</b> GWL_WNDPROC<b>)</b><b>;</b>

    <font color="navy">// Call MakeObjectInstance to setup a wndproc for the member function</font>
    FObjectInstance <b>=</b> MakeObjectInstance<b>(</b>ListViewProc<b>)</b><b>;</b>

    <font color="navy">// Pass the result of MakeObjectInstance to SetWindowLong</font>
    <font color="navy">// to assign the new window proc for the listview</font>
    SetWindowLong<b>(</b>ListView1<b>-></b>Handle<b>,</b> GWL_WNDPROC<b>,</b> <b>(</b>LONG<b>)</b>FObjectInstance<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b><b>~</b>TForm1<b>(</b><b>)</b>
<b>{</b>
    <font color="navy">// Set the window proc back to the original function</font>
    SetWindowLong<b>(</b>ListView1<b>-></b>Handle<b>,</b> GWL_WNDPROC<b>,</b> <b>(</b>LONG<b>)</b> FOriginalProc<b>)</b><b>;</b>

    <font color="navy">// Call FreeObjectInstance to release memory consumed by MakeObjectInstance</font>
    FreeObjectInstance<b>(</b>FObjectInstance<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>ListViewProc<b>(</b>TMessage <b>&</b>msg<b>)</b>
<b>{</b>
    msg<b>.</b>Result <b>=</b> <font color="blue">0</font><b>;</b>
    <b>switch</b><b>(</b>msg<b>.</b>Msg<b>)</b>
    <b>{</b>
        <b>case</b> WM_ERASEBKGND<b>:</b>
            PaintListView<b>(</b><b>(</b>HDC<b>)</b>msg<b>.</b>WParam<b>)</b><b>;</b>
            msg<b>.</b>Result <b>=</b> <font color="blue">0</font><b>;</b>
            <b>break</b><b>;</b>
        <b>case</b> WM_HSCROLL<b>:</b>
        <b>case</b> WM_VSCROLL<b>:</b>
            LockWindowUpdate<b>(</b>ListView1<b>-></b>Handle<b>)</b><b>;</b>
            msg<b>.</b>Result <b>=</b> CallWindowProc <b>(</b><b>(</b>FARPROC<b>)</b>FOriginalProc<b>,</b>
                                         ListView1<b>-></b>Handle<b>,</b>
                                         msg<b>.</b>Msg<b>,</b>
                                         msg<b>.</b>WParam<b>,</b>
                                         msg<b>.</b>LParam<b>)</b><b>;</b>
            InvalidateRect <b>(</b>ListView1<b>-></b>Handle<b>,</b> <font color="blue">0</font><b>,</b> <b>true</b><b>)</b><b>;</b>
            LockWindowUpdate<b>(</b>NULL<b>)</b><b>;</b>
            <b>break</b><b>;</b>
        <b>default</b><b>:</b>
            msg<b>.</b>Result <b>=</b> CallWindowProc <b>(</b><b>(</b>FARPROC<b>)</b>FOriginalProc<b>,</b>
                                         ListView1<b>-></b>Handle<b>,</b>
                                         msg<b>.</b>Msg<b>,</b>
                                         msg<b>.</b>WParam<b>,</b>
                                         msg<b>.</b>LParam<b>)</b><b>;</b>
            <b>break</b><b>;</b>
    <b>}</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b>
<b>{</b>
    <font color="navy">//Same painting code as before</font>
    <b>...</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b><b>/</b> TForm1<b>:</b><b>:</b>FormResize<b>(</b>TObject <b>*</b>Sender<b>)</b>
<b>{</b>
    ListView1<b>-></b>Repaint<b>(</b><b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
</pre>

<P>
<B>Note 1:</B> <TT>MakeObjectInstance</TT> returns a <TT>void</TT> pointer. This <TT>void</TT> pointer should
be passed to the <TT>SetWindowLong</TT> API function. Do not pass the name of your member function to
<TT>SetWindowLong</TT>.
</P>
<P>
<B>Note 2:</B> Every call to <TT>MakeObjectInstance</TT> should have a corresponding call to
<TT>FreeObjectInstance</TT>. <TT>MakeObjectInstance</TT> allocates memory that is not freed until you call
<TT>FreeObjectInstance</TT>. Failing to free up this memory causes memory leaks.
</P>


<BR>
<HR>
<H4>
Subclassing with the WindowProc property of a control</H4>
<P>
The <TT>TControl</TT> class from the VCL provides a public property that allows you to subclass a control without much
effort. The property is called <TT>WindowProc</TT>. You can intercept messages sent to a control by assigning a new
function to the <TT>WindowProc</TT> property of a control. The next code listing demonstrates how to subclass the
listview control through its <TT>WindowProc</TT> property.
</P>
<pre>
<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// header file</font>
<b>class</b> TForm1 <b>:</b> <b>public</b> TForm
<b>{</b>
<b>__published</b><b>:</b>	<font color="navy">// IDE-managed Components</font>
    TListView <b>*</b>ListView1<b>;</b>
    TImageList <b>*</b>ImageList1<b>;</b>
    <b>void</b> <b>__fastcall</b> FormResize<b>(</b>TObject <b>*</b>Sender<b>)</b><b>;</b>
<b>private</b><b>:</b>	<font color="navy">// User declarations</font>
    TWndMethod FOriginalProc<b>;</b>

    <b>void</b> <b>__fastcall</b> ListViewProc<b>(</b>TMessage <b>&</b>msg<b>)</b><b>;</b>
    <b>void</b> <b>__fastcall</b> PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b><b>;</b>

<b>public</b><b>:</b>		<font color="navy">// User declarations</font>
    <b>__fastcall</b> TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b><b>;</b>
    <b>__fastcall</b> <b>~</b>TForm1<b>(</b><b>)</b><b>;</b>
<b>}</b><b>;</b>


<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// source file</font>
<font color="navy">//-------------------------------------------------------</font>

<b>__fastcall</b> TForm1<b>:</b><b>:</b>TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b>
    <b>:</b> TForm<b>(</b>Owner<b>)</b>
<b>{</b>
    <font color="navy">// Store the original valud of WindowProc in the member variable</font>
    <font color="navy">// and then assign our method to the WindowProc property</font>
    FOriginalProc <b>=</b> ListView1<b>-></b>WindowProc<b>;</b>
    ListView1<b>-></b>WindowProc <b>=</b> ListViewProc<b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b><b>~</b>TForm1<b>(</b><b>)</b>
<b>{</b>
    <font color="navy">// Set the window proc back to the original function</font>
    ListView1<b>-></b>WindowProc <b>=</b> FOriginalProc<b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>ListViewProc<b>(</b>TMessage <b>&</b>msg<b>)</b>
<b>{</b>
    msg<b>.</b>Result <b>=</b> <font color="blue">0</font><b>;</b>
    <b>switch</b><b>(</b>msg<b>.</b>Msg<b>)</b>
    <b>{</b>
        <b>case</b> WM_ERASEBKGND<b>:</b>
            PaintListView<b>(</b><b>(</b>HDC<b>)</b>msg<b>.</b>WParam<b>)</b><b>;</b>
            msg<b>.</b>Result <b>=</b> <font color="blue">0</font><b>;</b>
            <b>break</b><b>;</b>
        <b>case</b> WM_HSCROLL<b>:</b>
        <b>case</b> WM_VSCROLL<b>:</b>
            LockWindowUpdate<b>(</b>ListView1<b>-></b>Handle<b>)</b><b>;</b>
            FOriginalProc<b>(</b>msg<b>)</b><b>;</b>
            InvalidateRect <b>(</b>ListView1<b>-></b>Handle<b>,</b> <font color="blue">0</font><b>,</b> <b>true</b><b>)</b><b>;</b>
            LockWindowUpdate<b>(</b>NULL<b>)</b><b>;</b>
            <b>break</b><b>;</b>
        <b>default</b><b>:</b>
            FOriginalProc<b>(</b>msg<b>)</b><b>;</b>
            <b>break</b><b>;</b>
    <b>}</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b>
<b>{</b>
    <font color="navy">//Same painting code as before</font>
    <b>...</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b><b>/</b> TForm1<b>:</b><b>:</b>FormResize<b>(</b>TObject <b>*</b>Sender<b>)</b>
<b>{</b>
    ListView1<b>-></b>Repaint<b>(</b><b>)</b><b>;</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
</pre>

<P>
<B>Note:</B> Notice that value returned by the <TT>WindowProc</TT> property is of the type <TT>TWndMethod</TT> and
not <TT>WNDPROC</TT>. This has an important consequence. <TT>TWndMethod</TT> functions already know how to deal with
the VCL's <TT>TMessage</TT> structure. This means that you can call the original <TT>WindowProc</TT> function without
bothering with the API <TT>CallWindowProc</TT> function. You simply call the original <TT>WindowProc</TT> and pass it
the <TT>TMessage</TT> structure.
</P>


<BR>
<HR>
<H4>
Subclassing by deriving a new control</H4>
<P>
It turns out all VCL classes that inherit from <TT>TWinControl</TT> already subclass the window handle of the control.
The subclassing is done so that the VCL class can respond to messages sent to the control. Without subclassing, none
of the internal message maps or <TT>WndProc</TT> functions would ever get called. In fact, the base class uses
<TT>MakeObjectInstance</TT> to perform the subclassing, and the subclassed proc executes the function stored
by the <TT>WindowProc</TT> property to handle the message (see <TT>TWinControl.MainWndProc</TT> in CONTROLS.PAS).
</P>
<P>
Because VCL classes already subclass the window handle, you can intercept messages by deriving a new class from a
VCL base class. When you utilize this technique, you subclass a window handle by subclassing, or inheriting from, a
existing base class. The code below shows how to derive a class from <TT>TListView</TT> that paints the custom
background.
</P>
<pre>
<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// header file</font>
<b>class</b> PACKAGE TXListView <b>:</b> <b>public</b> TListView
<b>{</b>
<b>private</b><b>:</b>
<b>protected</b><b>:</b>
    <b>void</b> <b>__fastcall</b> WndProc<b>(</b>TMessage <b>&</b>msg<b>)</b><b>;</b>
    <b>void</b> <b>__fastcall</b> PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b><b>;</b>
<b>public</b><b>:</b>
    <b>__fastcall</b> TXListView<b>(</b>TComponent<b>*</b> Owner<b>)</b><b>;</b>
<b>}</b><b>;</b>


<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// source file</font>

<font color="navy">//-------------------------------------------------------</font>
<b>__fastcall</b> TXListView<b>:</b><b>:</b>TXListView<b>(</b>TComponent<b>*</b> Owner<b>)</b>
    <b>:</b> TListView<b>(</b>Owner<b>)</b>
<b>{</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TXListView<b>:</b><b>:</b>WndProc<b>(</b>TMessage <b>&</b>msg<b>)</b>
<b>{</b>
    msg<b>.</b>Result <b>=</b> <font color="blue">0</font><b>;</b>
    <b>switch</b><b>(</b>msg<b>.</b>Msg<b>)</b>
    <b>{</b>
        <b>case</b> WM_ERASEBKGND<b>:</b>
            PaintListView<b>(</b><b>(</b>HDC<b>)</b>msg<b>.</b>WParam<b>)</b><b>;</b>
            msg<b>.</b>Result <b>=</b> <font color="blue">0</font><b>;</b>
            <b>break</b><b>;</b>
        <b>case</b> WM_HSCROLL<b>:</b>
        <b>case</b> WM_VSCROLL<b>:</b>
            LockWindowUpdate<b>(</b>Handle<b>)</b><b>;</b>
            TListView<b>:</b><b>:</b>WndProc<b>(</b>msg<b>)</b><b>;</b>
            InvalidateRect <b>(</b>Handle<b>,</b> <font color="blue">0</font><b>,</b> <b>true</b><b>)</b><b>;</b>
            LockWindowUpdate<b>(</b>NULL<b>)</b><b>;</b>
            <b>break</b><b>;</b>
        <b>default</b><b>:</b>
            TListView<b>:</b><b>:</b>WndProc<b>(</b>msg<b>)</b><b>;</b>
            <b>break</b><b>;</b>
    <b>}</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TXListView<b>:</b><b>:</b>PaintListView<b>(</b>HDC <b>&</b>dc<b>)</b>
<b>{</b>
    TRect rect <b>=</b> BoundsRect<b>;</b>

    Graphics<b>:</b><b>:</b>TBitmap <b>*</b>MemBitmap <b>=</b> <b>new</b> Graphics<b>:</b><b>:</b>TBitmap<b>;</b>
    MemBitmap<b>-></b>Width <b>=</b> rect<b>.</b>Right <b>-</b> rect<b>.</b>Left<b>;</b>
    MemBitmap<b>-></b>Height<b>=</b> rect<b>.</b>Bottom<b>-</b> rect<b>.</b>Top<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>Brush<b>-></b>Style <b>=</b> bsSolid<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>Brush<b>-></b>Color <b>=</b> clAqua<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>FillRect<b>(</b>Rect<b>(</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>,</b>
                                   MemBitmap<b>-></b>Width<b>,</b>
                                   MemBitmap<b>-></b>Height<b>)</b><b>)</b><b>;</b>

    MemBitmap<b>-></b>Canvas<b>-></b>Pen<b>-></b>Color <b>=</b> clNavy<b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>Pen<b>-></b>Width <b>=</b> <font color="blue">20</font><b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>MoveTo<b>(</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>)</b><b>;</b>
    MemBitmap<b>-></b>Canvas<b>-></b>LineTo<b>(</b>MemBitmap<b>-></b>Width<b>,</b> MemBitmap<b>-></b>Height<b>)</b><b>;</b>

    <b>:</b><b>:</b>BitBlt<b>(</b>dc<b>,</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>,</b>MemBitmap<b>-></b>Width<b>,</b> MemBitmap<b>-></b>Height<b>,</b>
           MemBitmap<b>-></b>Canvas<b>-></b>Handle<b>,</b><font color="blue">0</font><b>,</b><font color="blue">0</font><b>,</b>SRCCOPY<b>)</b><b>;</b>
    <b>delete</b> MemBitmap<b>;</b>
<b>}</b>


<font color="navy">//-------------------------------------------------------</font>
<font color="navy">// using the component from a form</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b>TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b>
    <b>:</b> TForm<b>(</b>Owner<b>)</b>
<b>{</b>
    TXListView <b>*</b>ListView1 <b>=</b> <b>new</b> TXListView<b>(</b><b>this</b><b>)</b><b>;</b>
    ListView1<b>-></b>Align <b>=</b> alClient<b>;</b>
    ListView1<b>-></b>Parent <b>=</b> <b>this</b><b>;</b>
    ListView1<b>-></b>LargeImages <b>=</b> ImageList1<b>;</b>
    ListView1<b>-></b>IconOptions <b>-></b>Arrangement <b>=</b> iaLeft<b>;</b>

    <b>int</b> nCount <b>=</b> ImageList1<b>-></b>Count<b>;</b>
    <b>for</b><b>(</b><b>int</b> j<b>=</b><font color="blue">0</font><b>;</b> jItems<b>-></b>Add<b>(</b><b>)</b><b>;</b>
        item<b>-></b>Caption <b>=</b> <font color="blue">"item "</font> <b>+</b> IntToStr<b>(</b>j<b>)</b><b>;</b>
        item<b>-></b>ImageIndex <b>=</b> j<b>;</b>
    <b>}</b>
<b>}</b>
<font color="navy">//-------------------------------------------------------</font>
</pre>

<P>
<B>Note:</B> Of all the subclassing techniques described in this article, the technique of inheriting a new class is
probably the best strategy from an object oriented standpoint. It is a bad design practice to litter a form class with
a bunch of code that subclasses and paints the background of a listview control. It is wiser to derive a new class and
encapsulate the custom behavior while maintaining the default behavior of the base class.
</P>
<P>
Notice that you don't have
to write code that subclasses the window handle when you derive a new class from <TT>TListView</TT>. The base class
already does that, and deriving a new class leverages that code in the base classes. Also, you don't have to worry
about listview messages being sent to a form that is in the middle of being destroyed. Not only is deriving a new
class cleaner from an object oriented point of view, it is probably more robust and less prone to failure.
</P>

<BR>
<TABLE  BORDER=1 CELLPADDING=10 CELLSPACING=0 WIDTH="100%">
<TR> <TD colspan = 2><B>Downloads for this FAQ</B> </TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass1.zip" >subclass1.zip </A></TT></TD> <TD>BCB3 project that demonstrates <TT>SetWindowLong</TT> to subclass a listview.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass1x.zip">subclass1x.zip</A></TT></TD> <TD>Same as subclass1.zip. Includes an EXE. Zip is 170k.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass2.zip" >subclass2.zip </A></TT></TD> <TD>BCB3 project that uses <TT>MakeObjectInstance</TT> to subclass a listview.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass2x.zip">subclass2x.zip</A></TT></TD> <TD>Same as subclass2.zip. Includes an EXE. Zip is 170k.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass3.zip" >subclass3.zip </A></TT></TD> <TD>BCB3 project that subclasses a listview through its <TT>WindowProc</TT> property.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass3x.zip">subclass3x.zip</A></TT></TD> <TD>Same as subclass3.zip. Includes an EXE. Zip is 170k.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass4.zip" >subclass4.zip </A></TT></TD> <TD>BCB3 project that shows how to subclass a listview by deriving a new class.</TD> </TR>
<TR> <TD><TT><A HREF="http://www.bcbdev.com/ftp/source/subclass4x.zip">subclass4x.zip</A></TT></TD> <TD>Same as subclass4.zip. Includes an EXE. Zip is 170k.</TD> </TR>
</TABLE>



</TD> </TR>
<TR>  <TD COLSPAN=7>
<BR><HR>
<CENTER>
<FONT size="-1">
<I>
Copyright &copy; 1997-2000 by <A HREF="mailto:hhowe@bcbdev.com">Harold Howe</A>.<BR>
All rights reserved.
</I>
</FONT>
</CENTER>
</TD> </TR>
</TABLE>
</CENTER>
</BODY>
</HTML>

