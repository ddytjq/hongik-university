ID=E0833
URL=http://www.delorie.com/djgpp/doc/ug/larger/makefiles.html
SIZE=9718
DATE=12/07/02
TIME=19:24:55
DATASET=C
HTML=<html><head><title>Guide: Makefiles</title>
<base href="http://www.delorie.com/djgpp/doc/ug/larger/makefiles.html">
</head><body><center><!-- BEGIN RICH-MEDIA BURST! CODE --> 
     <script language="JavaScript"> 
     <!-- /* (C) 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
     var TheAdcode = 'ad1954a'; 
     var bN = navigator.appName; 
     var bV = parseInt(navigator.appVersion); 
     var base='http://www.burstnet.com/'; 
     var Tv='/6454'; 
     var agt=navigator.userAgent.toLowerCase(); 
     if (bN=='Netscape'){ 
          if ((bV>=4)&&(agt.indexOf("mac")==-1))
     {  document.write('<s'+'cript src="'+ 
           base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
           +Tv+'">'); 
          document.write('</'+'script>');    
     } 
          else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
             TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
             document.write('<img src="' + base + 'cgi-bin/ads/' + 
             TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
             ' border=0 alt="Click Here"></a>');} 
      } 
     if (bN=='Microsoft Internet Explorer') 
      document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
     + 
       TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
       'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
       'frameborder=0 scrolling=no></ifr'+'ame>'); 
     // --> 
     </script> 
     <noscript><a href="http://www.burstnet.com/ads/ad1954a-map.cgi" target=_top> 
     <img src="http://www.burstnet.com/cgi-bin/ads/ad1954a.cgi" 
      width=468 height=60 border=0 alt="Click Here"></a> 
     </noscript> 
     <!-- END BURST CODE --> 
<table width=100% border=0 cellspacing=0 cellpadding=3><tr><td align=left valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/" target="_top">www.delorie.com</a>/<a href="/djgpp/" target="_top">djgpp</a>/<a href="/djgpp/doc/" target="_top">doc</a>/ug/larger/makefiles.html</b></font></small></td>
<td align=right valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/search/">search</a> &nbsp;
</b></font></small></td>
</tr></table><a href="bulktrap.html"></a><big><big><b>Guide: Makefiles</b></big></big></td></p></center>


<p>Well, now that you're learned how to use lots of source files,
objects, and libraries to build large programs, how are you ever going
to manage them all?  How will you remember all the commands and
options you'll need to remember to build it?  Fortunately, you don't
have to.  DJGPP (and most development systems) include a program that
manages your projects for you.  If you are using RHIDE, this is the
<em>project definition</em>, which is managed through RHIDE's menus
(and is documented in RHIDE's documentation).  There is also a
stand-alone program called <tt>make</tt> that keeps track of how to
make your program from the sources (hence the name).  The file that
contains the instructions for <em>make</em> is called a
<em>makefile</em> (and is usually called <tt>makefile</tt>).</p>

<p>The syntax of a makefile is deceptively simple (GNU make includes a
<em>lot</em> of extensions, functions, and tricks that can make
makefiles almost as complex as your source).  You can have two kinds
of commands (besides comments) - variable definitions and rules.  A
variable definition can be a simple thing, like this:

<pre>
OBJECTS = main.o foo.o bar.o math3d.o graphics.o
</pre>

They can get pretty complicated also (see the <tt>make</tt> reference
manual) but for now we'll stick to the simple cases.</p>

<p>The more interesting command is a <em>rule</em>, which tells
<tt>make</tt> what it's making, what it's made from, and how to make
it.  Consider this example:

<pre>
main.o : main.c
	gcc -c main.c
</pre>

<p>Note that the line with <tt>gcc</tt> is prefixed by a tab - a real tab
character, not eight spaces!  Many DOS editors will insert eight
spaces when you hit the TAB key, instead of just inserting a tab.  If
you get a "missing separator" error, that's what happened to you.</p>

<p>Anyway, in this example rule there are three parts: The target, the
dependencies, and the commands (well, command).  The <em>target</em>
is the thing that we want to make.  In this case, we want to make the
file <tt>main.o</tt>.  Next, after the target (and the colon, which
separates targets from dependencies), we list the <em>depenencies</em>
- the files that the target depends on.  In this case, <tt>main.o</tt>
needs to be rebuilt whenever <tt>main.c</tt> changes, so we list
<tt>main.c</tt> as a dependency.  The last part of the rule is the
<em>command</em> that <tt>make</tt> should run in order to make the
target from the depenencies.  In this case, we list the <tt>gcc</tt>
command to compile <tt>main.c</tt> into <tt>main.o</tt>.  Note that
you may list as many commands as required, as long as you don't leave
a blank line and all commands start with a tab.</p>

<p>Makefiles may (and often do) contain many variables and rules.
Here's a Makefile we'd use for our sample program:</p>

<pre>
main.exe : main.o foo.o
	gcc main.o foo.o -o main.exe

main.o : main.c
	gcc -c main.c

foo.o : foo.c
	gcc -c foo.c
</pre>

<p>To <em>use</em> this makefile, you run the <tt>make</tt> program,
like this:</p>

<pre>
C:\SRC> make
</pre>

<p>Pretty simple, yes? The <tt>make</tt> program knows to look for a
file called <tt>Makefile</tt> or <tt>makefile</tt>. If you used a
different name, run it like this: "<tt>make -f makefile.djg</tt>".</p>


<p>Note that <tt>make</tt> always starts with the first rule it sees,
in this case the one for <tt>main.exe</tt>, and tries to build that
first.  As it find dependencies, it checks to see if those need to be
updated.  Based on the makefile above, <tt>make</tt> will run these
three commands the first time you call it:

<pre>
gcc -c main.c
gcc -c foo.c
gcc main.o foo.o -o main.exe
</pre>

<p>However, if you then edit foo.c and run <tt>make</tt> again, it
will only run these commands:</p>

<pre>
gcc -c foo.c
gcc main.o foo.o -o main.exe
</pre>

<p>It doesn't recompile <tt>main.c</tt> because it knows that it
doesn't have to.  In a big project, that could save you a lot of time.</p>

<p>Our example makefile didn't use any variables.  Let's include some,
to see if it help us out:</p>

<pre>
CC = gcc
CFLAGS = -g -O2
OBJECTS = main.o foo.o

main.exe : $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o main.exe

main.o : main.c
	$(CC) $(CFLAGS) -c main.c

foo.o : foo.c
	$(CC) $(CFLAGS) -c foo.c
</pre>

<p>This makefile looks a lot like the old makefile, except that a lot
of the commands have been replaced with variable substitutions.  What
<tt>make</tt> does is replace the variables with their variables in
the target, dependency, and command sections of the rules.  That lets
you specify some things in one place to make it easier to maintain.
In our example, we use <tt>$(CC)</tt> to specify the compiler, so we
could set it to something else if we wanted to without having to
change the whole makefile.</p>

<p>Here's another trick that GNU make can let you do.  In the above
makefile, we had to include the rule for compiling sources into
objects twice - once for each source file.  That could get tiresome
when we have dozens of sources, so let's define a pattern instead.
This pattern will be used whenever <tt>make</tt> needs to compile
<em>any</em> source:

<pre>
%.o : %.c
	$(CC) $(CFLAGS) -c $&lt;
</pre>

<p>Here, we have used the percent (<tt>%</tt>) character to denote
that part of the target and dependency that matches whatever the
pattern is used for, and the <tt>$&lt;</tt> is a special variable
(imaging it like <tt>$(&lt;)</tt>) that means "whatever the depencies
are".  Another useful variable is <tt>$@</tt>, which means "the
target".  Our Makefile now looks like this:</p>

<pre>
CC = gcc
CFLAGS = -g -O2
OBJECTS = main.o foo.o

main.exe : $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o main.exe

%.o : %.c
	$(CC) $(CFLAGS) -c $<
</pre>

<p>Now, if we need to add more source files, we only have to update
the line that defines the <tt>OBJECTS</tt> variable!</p>

<p>Note that <tt>make</tt> is pretty smart about a lot of things
already, like how to build object files.  In our above example, we
could have left out the last rule completely!  The fact that we chose
<tt>CC</tt> and <tt>CFLAGS</tt> as names was no coincidence, since
those are the variables that <tt>make</tt>'s built-in rules use.  To
see a list of all the built-in rules, consult the <tt>make</tt>
documentation or run "<tt>make -p</tt>"</p>

<p>The reference manual for <tt>make</tt> (run "<tt>info make</tt>")
contains many more examples and nifty tricks for building makefiles,
but this section covered the bare minimum that you'll need to know to
manage your projects with <tt>make</tt>.</p>




<br clear=both></p>
<a href="bulktrap.html"></a><table width=100% border=0 cellspacing=0 cellpadding=3><tr>
<td align=left valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/users/dj/" target="_top">webmaster</a> &nbsp;
<a href="/donations.html" target="_top">donations</a> &nbsp;
<a href="/store/books/" target="_top">bookstore</a> &nbsp;
</b></font></small></td>
<td align=right valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/" target="_top">delorie software</a> &nbsp;
<a href="/privacy.html" target="_top">privacy</a> &nbsp;
</b></font></small></td>
</tr><tr><td align=left valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/copyright.html" target="_top">Copyright © 1997</a> &nbsp;
<a href="/users/dj/" target="_top">by DJ Delorie</a> &nbsp;
</b></font></small></td>
<td align=right valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
Updated Apr 1997 &nbsp;
</b></font></small></td>
</tr></table>
<center><iframe
 SRC="http://www.burstnet.com/cgi-bin/ads/ba1954a.cgi/RETURN-CODE/if/6454/"
 scrolling="no" marginwidth="0" marginheight="0" frameborder="0" vspace="0" hspace="0"
 width="468" height="60"><A target="_top"
 HREF="http://www.burstnet.com/ads/ba1954a-map.cgi/6454"><IMG SRC="http://www.burstnet.com/cgi-bin/ads/ba1954a.cgi/6454"
 border="0" width="468" height="60" alt="Please support our sponsor."></A></iframe><br><small><i>Please take a moment to fill out
this <a href="http://survey.burstmedia.com/cgi-win/client.exe?Burst,welcome,ad1954a,2000">visitor survey</a></i></small>
<br><small><i>You can help support this site by
visiting the advertisers that sponsor it! (only once each, though)</i></small>
</center>
</body></html>


