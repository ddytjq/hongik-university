ID=F0692
URL=http://www.visualbasicbooks.com/advVB6samplepg2.html
SIZE=10012
DATE=09/07/2002
TIME=13:24:37
DATASET=Visual Basic
HTML=<html>

<head>



<meta name="description"
content="Visual Basic books for all levels of visual basic programmers are featured and reviewed regularly. Only those Visual Basic books of highest quality appear on this site.">
<meta name="keywords" content="visual basic books,visual basic,vb books,visual basic sites,programming,win32 api,database,beginner,amazon,bookstore">

<title>Visual Basic Books</title>
</head>

<body bgcolor="#6373B5" text="#616161" link="#0000ff" vlink="#666666" alink="#CC9900">
<center>
<!-- BEGIN RICH-MEDIA BURST! CODE --> 
       <script language="JavaScript"> 
       <!-- /* © 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
       var TheAdcode = 'ad5645a'; 
       var bN = navigator.appName; 
       var bV = parseInt(navigator.appVersion); 
       var base='http://www.burstnet.com/'; 
       var Tv=''; 
       var agt=navigator.userAgent.toLowerCase(); 
       if (bV>=4) 
         {ts=window.location.pathname+window.location.search; 
          i=0; Tv=0; while (i< ts.length) 
             { Tv=Tv+ts.charCodeAt(i); i=i+1; } Tv="/"+Tv;} 
         else   {Tv=escape(window.location.pathname); 
          if( Tv.charAt(0)!='/' ) Tv="/"+Tv; 
                 else if (Tv.charAt(1)=="/")
       Tv=""; 
         if( Tv.charAt(Tv.length-1) == "/") 
           Tv = Tv + "_";} 
       if (bN=='Netscape'){ 
            if ((bV>=4)&&(agt.indexOf("mac")==-1))
       {  document.write('<s'+'cript src="'+ 
             base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
             +Tv+'">'); 
            document.write('</'+'script>');    
       } 
            else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
               TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
               document.write('<img src="' + base + 'cgi-bin/ads/' + 
               TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
               ' border=0 alt="Click Here"></a>');} 
        } 
       if (bN=='Microsoft Internet Explorer') 
        document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
       + 
         TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
         'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
         'frameborder=0 scrolling=no></ifr'+'ame>'); 
       // --> 
       </script> 
       <noscript><a href="http://www.burstnet.com/ads/ad5645a-map.cgi" target=_top> 
       <img src="http://www.burstnet.com/cgi-bin/ads/ad5645a.cgi" 
        width=468 height=60 border=0 alt="Click Here"></a> 
       </noscript> 
       <!-- END BURST CODE --> 
</center>


<table border="0" bgcolor="" cellpadding="0" cellspacing="0">
<tr><td><p align="center"><img src="../images/vblogo.jpg" border="0" alt="vb logo"></td></tr>
<tr> 
<td rowspan="3" valign="top" height="1"> <p>&nbsp;</p>

<p align="left"><font face= "verdana" color="#000000"><b>Visual Basic Books</b></font><br>
<a href="index.html"><font color="#ffffff">Home</font></a><br>
<a href="beginner.html"><font color="#ffffff">Visual Basic Beginner Books</font></a><br>
<a href="database.html"><font color="#ffffff">Visual Basic Database Books</font></a><br>
<a href="activex.html"><font color="#ffffff">Visual Basic ActiveX Books</font></a><br>
<a href="advanced.html"><font color="#ffffff">Visual Basic Advanced Books</font></a><br>
<a href="vbinternet.html"><font color="#ffffff">VB Internet Programming Books</font></a><br>


</p>
<p><font color="#000000" face="verdana"><b>Resources</b></font><br>
<a href="links.html"><font color="#FFFFFF">Visual Basic Links</font></a><br>
<a href="addlink.html"><font color="#FFFFFF">Add a Link</font></a><br>
<a href="esubscribe.html"><font color="#FFFFFF">Subscribe to Mailing List</font></a>

</p>

<p>


</font>


<td bgcolor="#ffffff" valign="middle"><h1 align="center"><img src="../images/anibook.gif" alt="" width="32" height="32"><font face="trebuchet ms, arial, helvetica" color="#000000"> Visual Basic Books </font><img src="../images/anibook.gif" alt="" width="32" height="32"></h1>

</td>






</tr><tr>
<td bgcolor="#ffffff" colspan="1" valign="top">



<table border="0" cellpadding="5"><tr><td>


<font  color="#000000" FACE="Verdana, Arial, Helvetica" SIZE="-1">

<center><H1> Advanced Microsoft Visual Basic 6 Chapter 1</h1></center>


<FONT FACE="Arial">
</B></FONT><B><FONT FACE="Arial" SIZE=5><P>Tip 1: Inconsistent as it is, try<BR>
to mimic Visual Basic’s own error<BR>
handling scheme as much as possible.</P>
</B></FONT><P>When you call a Visual Basic routine that can fail, what is the standard way that the routine signals the failure to you? It probably won’t be via a return value. If it were, procedures, for one, would have trouble signaling failure. Most (but not all) routines raise an error (an exception) when they want to signal failure. (This applies to procedures, functions, and methods.) For example, <I>CreateObject </I>raises an exception if it cannot create an object—for whatever reason; <I>Open</I> does the same if it cannot open a file for you. (Not all routines raise such exceptions. For example, the <I>Choose</I> function returns Null [thus, it requires a Variant<I> </I>to hold its return value just in case it ever fails]<I> </I>if you index into it<I> </I>incorrectly.) In other words, if a routine works correctly, this fact is signaled to the caller by the absence of any error condition. </P>
<P>Routines such as <I>Open</I> work like this primarily so that they can be used more flexibly. For example, by not handling the error internally, perhaps by prompting the user in some way, the caller is free to handle errors in the most suitable way. The caller can also use routines in ways perhaps not thought of by their writers. Listing 1-1 is an example using <I>GetAttr</I> to determine whether the machine has a particular drive. Because this routine raises exceptions, we can use it to determine whether or not a disk drive exists.</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>Public Function bDriveExists(ByVal sDriveAndFile As String) _<BR>
    As Boolean<BR>
' ===============================================================<BR>
'<BR>
' Module: modFileUtilities. Function: bDriveExists.<BR>
'<BR>
' Object: General<BR>
'<BR>
' Author - Peter J. Morris. TMS Ltd.<BR>
' Template fitted : Date - 01/01/97    Time - 00:00<BR>
'<BR>
' Function's Purpose/Description in Brief<BR>
'<BR>
' Determines whether the drive given in sDriveAndFile<BR>
' exists. Raises an exception if no drive string is given.<BR>
'<BR>
' Revision History:<BR>
'<BR>
</P></DIR>

</FONT><DIR>


' INPUTS - sDriveAndFile - holds the drive name, e.g., "C". <BR>
'          Later holds the name of the drive and the filename<BR>
'          on the drive to be created.<BR>
'<BR>
'<BR>
' OUTPUTS - Via return. Boolean. True if drive exists;<BR>
'           else False.<BR>
'<BR>
' MAY RAISE EXCEPTIONS<BR>
'<BR>
' NOTES: Uses formals as variables.<BR>
'        Uses delayed error handling.<BR>
'<BR>
' ===============================================================<BR>
<BR>
    ' Set up general error handler.<BR>
    On Error GoTo Error_General_bDriveExists:<BR>
<BR>
    Const sProcSig = MODULE_NAME &amp; "General_bDriveExists"<BR>
<BR>
    ' ========== Body Code Starts ==========    <BR>
    ' These are usually a little more public - shown local<BR>
    ' for readability only.<BR>
    Dim lErr As Long<BR>
    Dim lErl As Long<BR>
    Dim sErr As String<BR>
<BR>
    ' Constants placed here instead of in typelib for<BR>
    ' readability only.<BR>
    Const nPATH_NOT_FOUND       As Integer = 76<BR>
    Const nINTERNAL_ERROR_START As Integer = 1000<BR>
    Const nERROR_NO_DRIVE_CODE  As Integer = 1001<BR>
<BR>
    ' Always default to failure.<BR>
    bDriveExists = False<BR>
<BR>
    If sDriveAndFile &lt;&gt; "" Then<BR>
<BR>
        ' "Trim" the drive name.<BR>
        sDriveAndFile = Left$(sDriveAndFile, 1)<BR>
<BR>
        ' Root directory.<BR>
         sDriveAndFile = sDriveAndFile &amp; ":\"<BR>
<BR>
        ' Enter error-critical section - delay the handling<BR>
        ' of any possible resultant exception.<BR>
        On Error Resume Next<BR>
<BR>
        Call VBA.FileSystem.GetAttr(sDriveAndFile)<BR>
<BR>
        ' Preserve the error context. See notes later on<BR>
        ' subclassing VBA's error object and adding your own<BR>
        ' "push" and "pop" methods to do this.<BR>
        GoSub PreserveContext<BR>
<BR>
        ' Exit error-critical section.<BR>
        On Error GoTo Error_General_bDriveExists:<BR>
<BR>
        Select Case nErr<BR>
<BR>
            Case nPATH_NOT_FOUND:<BR>
                bDriveExists = False<BR>
<BR>
            ' Covers no error (error 0) and all other errors.<BR>
            ' As far as we're concerned, these aren't <BR>
            ' errors; e.g., "drive not ready" is OK.<BR>
            Case Else<BR>
                bDriveExists = True<BR>
<BR>
        End Select<BR>
<BR>
    Else<BR>
<BR>
        ' No drive given, so flag error.<BR>
        Err.Raise nLoadErrorDescription(nERROR_NO_DRIVE_CODE)<BR>
<BR>
    End If<BR>
<BR>
    ' ========== Body Code Ends ==========<BR>
<BR>
    Exit Function<BR>
<BR>
' Error handler<BR>
Error_General_bDriveExists:<BR>
<BR>
    ' Preserve the error context. See notes later on<BR>
    ' subclassing VBA's error object and adding your own "push" <BR>
</P></DIR>

<DIR>

<FONT FACE="Courier New" SIZE=2><P>     ' and "pop" methods to do this.<BR>
    GoSub PreserveContext<BR>
<BR>
    ' **<BR>
    ' In error; roll back stuff in here.<BR>
    ' **<BR>
<BR>
    ' **<BR>
    ' Log error.<BR>
    ' **<BR>
<BR>
    ' Reraise as appropriate - handle internal errors<BR>
    ' further only.<BR>
    If (lErr &lt; nINTERNAL_ERROR_START) Or _<BR>
       (lErr = nERROR_NO_DRIVE_CODE) Then<BR>
<BR>
        VBA.Err.Raise lErr<BR>
<BR>
    Else<BR>
<BR>
        ' Ask the user what he or she wants to do with this <BR>
        ' error.<BR>
        Select Case MsgBox("Error in " &amp; sProcSig &amp; " " _<BR>
                           &amp; CStr(lErr) &amp; " " &amp; _<BR>
                           CStr(lErl) &amp; " " &amp; sErr, _<BR>
                           vbAbortRetryIgnore + vbExclamation, _<BR>
                           sMsgBoxTitle)<BR>
            Case vbAbort<BR>
                Resume Exit_General_bDriveExists:<BR>
<BR>
            Case vbRetry<BR>
                Resume<BR>
<BR>
            Case vbIgnore<BR>
                Resume Next<BR>
<BR>
            Case Else<BR>
                VBA.Interaction.MsgBox _<BR>
                                   "Unexpected error" _<BR>
                                   , vbOKOnly + vbCritical _<BR>
                                   , "Error"<BR>
                End<BR>
<BR>
        End Select<BR>
<BR>
    End If<BR>
<BR>
 Exit_General_bDriveExists:<BR>
<BR>
    Exit Function<BR>
<BR>
PreserveContext:<BR>
<BR>
    lErr = VBA.Err.Number<BR>
    lErl = VBA.Erl<BR>
    sErr = VBA.Err.Description<BR>
<BR>
    Return<BR>
<BR>
End Function</P></DIR>

</FONT>

<center><a href="advVB6samplepg3.html">next page....</a></center>

</td></tr></table></table><tr><td bgcolor="#991100"><center>
<font FACE="Verdana, Arial, Helvetica" SIZE="-1"><font color="#FFFFFF">Email us your comments:<a href="mailto:contact@vbbooks.freeservers.com"><img src="../images/emailed.gif"alt="mail" border=0></a><br>Fax: 1(916)404-7719<br>&copy;1999 Valassis Enterprises. All rights reserved.</font>

<P>
<!--Start of WSTR Block-->
<script language=JavaScript>id=1530</script>
<script language=JavaScript src="http://www.meixler-tech.com/wstr/js.cgi"></script>
<!--End of WSTR Block-->
</center>


</body>
</html>

