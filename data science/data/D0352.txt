ID=D0352
URL=http://java.sun.com/docs/books/tutorial/javabeans/beaninfo/index.html
SIZE=18274
DATE=16/07/02
TIME=14:43:54
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>The BeanInfo Interface</title>
<script language="JavaScript">
<!-- hide
function openWin(term) {
  url="../../information/glossary.html#" + term;
  myWin= window.open(url, "Glossary",
              "width=400,height=150,scrollbars=yes,status=no,toolbar=no,menubar=no");
  myWin.focus();
}
//-->
</script>
</head>
<body BGCOLOR="#ffffff" LINK="#000099">
<B><FONT SIZE="-1">The Java</font><sup><font size="-2">TM</font></sup> <font size="-1">Tutorial</FONT></B>
<br>
<table width="550">
<tr>
<td align="left" valign="center">
<a href="../events/index.html" target="_top"><img src="../../images/PreviousArrow.gif" width="26" height="26" align="center" border="0" alt="Previous Page"></a>
<a href="../TOC.html#beaninfo" target="_top"><img src="../../images/TOCIcon.gif" width="26" height="26" align="center" border="0" alt="Lesson Contents"></a>
<a href="../customization/index.html" target="_top"><img src="../../images/NextArrow.gif" width="26" height="26" align="center" border="0" alt="Next Page"></a></td>

<td align="center" valign="center">
<font size="-1">
<a href="../../index.html" target="_top">Start of Tutorial</a>
&gt;
<a href="../index.html" target="_top">Start of Trail</a>
</font>
</td>

<td align="right" valign="center">
<font size="-1">
<a href="../../search.html" target="_top">Search</a>
<br><a href="../../forms/sendusmail.html">Feedback Form</a>
</font>
</td>

</tr>
</table>
<img src="../../images/blueline.gif" width="550" height="8" ALIGN="BOTTOM" NATURALSIZEFLAG="3">

<br>
<font size="-1">
<b>Trail</b>: JavaBeans(TM)
</font>

<h2>
Lesson: The BeanInfo Interface
</h2>
<blockquote>
<p>
<blockquote>
<hr>
The following documentation will help you
learn about reflection, introspection, and the
<code>BeanInfo</code> class:
<ul>
  <li>
  Chapter 8 of the
<a target="other" href="http://java.sun.com/beans/spec.html"><font color="#009bbb">JavaBeans API Specification</font></a><a href="http://java.sun.com/beans/spec.html"><img src="../../images/otherIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(outside of the tutorial)"></a>
<p>

  <li>Core Reflection Documentation:
  <ul>
    <li>
<a target="other" href="http://java.sun.com/docs/books/tutorial/reflect/index.html"><font color="#009bbb">The Reflection API</font></a><a href="http://java.sun.com/docs/books/tutorial/reflect/index.html"><img src="../../images/otherIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(outside of the tutorial)"></a>  trail
    <li>
<a target="other" href="http://java.sun.com/products/jdk/1.1/docs/guide/reflection/index.html"><font color="#009bbb">JDK Reflection</font></a><a href="http://java.sun.com/products/jdk/1.1/docs/guide/reflection/index.html"><img src="../../images/otherIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(outside of the tutorial)"></a>  documentation
  </ul>

<p>

  <li>Beans API Documentation:
  <ul>
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/BeanInfo.html"><font color="#8800bb"><code>BeanInfo</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/BeanInfo.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      interface
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/SimpleBeanInfo.html"><font color="#8800bb"><code>SimpleBeanInfo</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/SimpleBeanInfo.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/Introspector.html"><font color="#8800bb"><code>Introspector</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/Introspector.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/FeatureDescriptor.html"><font color="#8800bb"><code>FeatureDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/FeatureDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/BeanDescriptor.html"><font color="#8800bb"><code>BeanDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/BeanDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/EventSetDescriptor.html"><font color="#8800bb"><code>EventSetDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/EventSetDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/PropertyDescriptor.html"><font color="#8800bb"><code>PropertyDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/PropertyDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/IndexedPropertyDescriptor.html"><font color="#8800bb"><code>IndexedPropertyDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/IndexedPropertyDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/MethodDescriptor.html"><font color="#8800bb"><code>MethodDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/MethodDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
    <li>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/ParameterDescriptor.html"><font color="#8800bb"><code>ParameterDescriptor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/java/beans/ParameterDescriptor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>      class
  </ul>
</ul>
<hr></blockquote>

How does a builder tool examine a Bean and
expose its features (properties, events, and methods) in a
property sheet? By using the <code>java.beans.Introspector</code>
class. The <code>Introspector</code> class uses
the JDK <i>core reflection</i> API to discover a Bean's methods, and
then applies the JavaBeans design patterns to discover the
Beans features. 

This discovery process is named <i>introspection</i>.

<p>
Alternatively, you can <i>explicitly</i> expose a Bean's features 
in a separate, associated class that implements the <code>BeanInfo</code> interface.
By associating a <code>BeanInfo</code> class with your Bean,
you can:
<ul>
 <li>Expose only those features you want to expose.
 <li>Rely on <code>BeanInfo</code> to expose
     some Bean features while relying on
     low-level reflection to expose others.
 <li>Associate an icon with the target Bean.
 <li>Specify a
     <a href="../customization/index.html#customizer">customizer</a> class.
 <li>Segregate features into normal and expert categories.
 <li>Provide a more descriptive display name, or
     additional information about a Bean feature.
</ul>

<p>
<code>BeanInfo</code> defines methods that return
descriptors for each property, method, or event
that you want exposed. Here's the prototypes for these methods:
<blockquote><pre>
PropertyDescriptor[] getPropertyDescriptors();
MethodDescriptor[]   getMethodDescriptors();
EventSetDescriptor[] getEventSetDescriptors();
</pre></blockquote>
Each of these methods returns an array of
<i>descriptors</i> for each feature.

</blockquote>
<h3>Feature Descriptors</h3>
<blockquote>
<p>
<code>BeanInfo</code> classes contain <i>descriptors</i>
that precisely describe the target Bean's features. The BDK implements
the following descriptor classes:
<ul>
  <li><code>FeatureDescriptor</code> is the base class for
      the other descriptor classes. It declares the
      aspects common to all descriptor types.
  <li><code>BeanDescriptor</code> describes the target
      Bean's class type and name, and describes the
      target Bean's customizer class if it exists.
  <li><code>PropertyDescriptor</code> describes the
      target Bean's properties.
  <li><code>IndexedPropertyDescriptor</code> is a
      subclass of <code>PropertyDescriptor</code>, and
      describes the target Bean's indexed properties.
  <li><code>EventSetDescriptor</code> describes the events
      the target Bean fires.
  <li><code>MethodDescriptor</code> describes the
      target Bean's methods.
  <li><code>ParameterDescriptor</code> describes
      method parameters.
</ul>

<p>
The <code>BeanInfo</code> interface declares
methods that return arrays of the above
descriptors.


</blockquote>
<h3>Creating a BeanInfo Class</h3>
<blockquote>
<p>
This section uses the <code>ExplicitButtonBeanInfo</code> demo class to
illustrate creating a <code>BeanInfo</code> class.
Here are the general steps to make a <code>BeanInfo</code>
class:
<ol>
 <li><b>Name your <code>BeanInfo</code> class</b>. You must
     append the string "BeanInfo" to the target class
     name. If the target class name is
     <code>ExplicitButton</code>, then its associated
     Bean information class must be named
     <code>ExplicitButtonBeanInfo</code>
     <p>
 <li><b>Subclass <code>SimpleBeanInfo</code></b>.
     This is a convenience class that implements
     <code>BeanInfo</code> methods to return null,
     or an equivalent no-op value.
<blockquote><pre>
public class ExplicitButtonBeanInfo extends SimpleBeanInfo {
</pre></blockquote>
     Using <code>SimpleBeanInfo</code>
     saves you from implementing all the
     <code>BeanInfo</code> methods; you only have
     to override those methods you need.
     <p>
 <li><b>Override the appropriate methods 
     to return the properties, methods, or events
     that you want exposed.</b> <code>ExplicitButtonBeanInfo</code>
     overrides the <code>getPropertyDescriptors()</code>
     method to return four properties:
<blockquote><pre>
public PropertyDescriptor[] getPropertyDescriptors() {
    try {  
        PropertyDescriptor background =
            new PropertyDescriptor("background", beanClass);
        PropertyDescriptor foreground =
            new PropertyDescriptor("foreground", beanClass);
        PropertyDescriptor font =
            new PropertyDescriptor("font", beanClass);
        PropertyDescriptor label =
            new PropertyDescriptor("label", beanClass);
 
        background.setBound(true);
        foreground.setBound(true);
        font.setBound(true);
        label.setBound(true);
         
        PropertyDescriptor rv[] =
            {background, foreground, font, label};
        return rv;
    } catch (IntrospectionException e) {
         throw new Error(e.toString());
    }
}        
</pre></blockquote>
     There are two important things to note here:
     <ul>
       <li>If you leave a descriptor out, that property, event
           or method will <i>not</i> be exposed. In other
           words, you can selectively expose properties, events,
           or methods by leaving out those you don't want exposed.
       <li>If a feature's getter (for example, <code>getMethodDescriptor()</code>)
           method returns null, low-level reflection
           is then used for that feature. This means, for example, that you
           can explicitly specify properties, and let low-level reflection
           discover the methods.
           If you don't override the <code>SimpleBeanInfo</code>
           default method, which returns null, low-level reflection
           will be used for that feature.
      </ul>      
     <p>
 <li><b>Optionally associate an icon with the target Bean.</b>
<blockquote><pre>
public java.awt.Image getIcon(int iconKind) {
    if (iconKind == BeanInfo.ICON_MONO_16x16 ||
        iconKind == BeanInfo.ICON_COLOR_16x16 )
    {
        java.awt.Image img = loadImage("ExplicitButtonIcon16.gif");
        return img;
    }
    if (iconKind == BeanInfo.ICON_MONO_32x32 ||
        iconKind == BeanInfo.ICON_COLOR_32x32 )
    {
        java.awt.Image img = loadImage("ExplicitButtonIcon32.gif");
        return img;
    }
    return null;
}
</pre></blockquote>
     The BeanBox displays
     this icon next to the Bean name in the ToolBox.
     You can expect builder tools to do the same.
     <p>
 <li><b>Specify the target Bean <code>class</code>, and, if the
     Bean has a customizer, specify it also.</b>
<blockquote><pre>
public BeanDescriptor getBeanDescriptor() {
    return new BeanDescriptor(beanClass, customizerClass);
}
...
private final static Class beanClass = ExplicitButton.class;
private final static Class customizerClass = OurButtonCustomizer.class;
</pre></blockquote>
</ol>

<p>
Keep the <code>BeanInfo</code> class in the same directory
as its target class.
The BeanBox first searches for a target Bean's <code>BeanInfo</code>
class in the target Bean's package path. If no <code>BeanInfo</code>
is found, then the Bean information package search path (maintained
by the <code>Introspector</code>) is searched. The
default Bean information search path is
<code>sun.beans.infos</code>. If no <code>BeanInfo</code>
class is found, then low-level reflection is used
to discover a Bean's features.

</blockquote>
<h3>Using BeanInfo to Control What Features are Exposed</h3>
<blockquote>
<p>
If you rely on low-level reflection to discover your
Bean's features, all those properties, methods, and
events that conform to the appropriate design patterns
will be exposed in a builder tool. This includes
any features in all base classes. If the BeanBox
finds an associated <code>BeanInfo</code>
class, then that information is used instead, and
no more base classes are examined using reflection.
In other words, <code>BeanInfo</code> information
overrides low-level reflection information, and
prevents base class examination.

<p>
By using a <code>BeanInfo</code>
class, you can expose subsets of a
particular Bean feature. For example,
by not returning a method descriptor
for a particular method, that method
will not be exposed in a builder tool.

<p>
When you use a <code>BeanInfo</code> class:
<ul>
  <li>Base class features will <i>not</i> be exposed.
      You can retrieve base class features by
      using the <code>BeanInfo.getAdditionalBeanInfo</code>
      method.
      <p>
  <li>Properties, events, or methods that have
      no descriptor will <i>not</i> be exposed.

      For a particular feature, only those
      items returned in the descriptor array
      will be exposed. For example, if you
      return descriptors for all your Bean
      methods except <code>foo</code>, then
      <code>foo</code> will not be exposed.
      <p>
  <li>Low-level reflection will be used for
      features with getter methods returning null.
      For example if your <code>BeanInfo</code> class
      contains this method implementation:
<blockquote><pre>
public MethodDescriptor[] getMethodDescriptors() {
    return null;
}
</pre></blockquote>
     Then low-level reflection will be used to discover
     your Bean's public methods. 
</ul>

</blockquote>
<h3>Locating BeanInfo Classes</h3>
<blockquote>
<p>
Before examining a Bean, the <code>Introspector</code> will
attempt to find a <code>BeanInfo</code> class associated with the
Bean. By default, the <code>Introspector</code> takes the target Bean's
fully qualified package name, and appends "BeanInfo" to form a new
class name. For example, if the target Bean is
<code>sunw.demo.buttons.ExplicitButton</code>, then the
<code>Introspector</code> will attempt to locate
<code>sunw.demo.buttons.ExplicitButtonBeanInfo</code>.
<p>
If that fails, then each package in the <code>BeanInfo</code>
search path is searched. The <code>BeanInfo</code> search path
is maintained by <code>Introspector.setBeanInfoSearchPath()</code>
and <code>Introspector.getBeanInfoSearchPath()</code>.

<p>
</blockquote>

<img src="../../images/blueline.gif" width="550" height="8" ALIGN="BOTTOM" NATURALSIZEFLAG="3">
<br>
<table width="550">
<tr>
<td align="left" valign="center">
<a href="../events/index.html" target="_top"><img src="../../images/PreviousArrow.gif" width="26" height="26" align="center" border="0" alt="Previous Page"></a>
<a href="../TOC.html#beaninfo" target="_top"><img src="../../images/TOCIcon.gif" width="26" height="26" align="center" border="0" alt="Lesson Contents"></a>
<a href="../customization/index.html" target="_top"><img src="../../images/NextArrow.gif" width="26" height="26" align="center" border="0" alt="Next Page"></a></td>

<td align="center" valign="center">
<font size="-1">
<a href="../../index.html" target="_top">Start of Tutorial</a>
&gt;
<a href="../index.html" target="_top">Start of Trail</a>
</font>
</td>

<td align="right" valign="center">
<font size="-1">
<a href="../../search.html" target="_top">Search</a>
<br><a href="../../forms/sendusmail.html">Feedback Form</a>
</font>
</td>

</tr>
</table>
<p>
<font size="-1">
<a href="../../information/copyright.html">Copyright</a>
1995-2002 Sun Microsystems, Inc.  All rights reserved.
</font>
</p>
</body>
</html>

