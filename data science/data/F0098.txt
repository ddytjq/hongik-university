ID=F0098
URL=http://www.angelfire.com/ny3/visualbasic/31.html
SIZE=7057
DATE=09/07/2002
TIME=13:14:44
DATASET=Visual Basic
HTML=<style TYPE="text/css">
   A{text-decoration: none;}
   A:hover { color: blue; text-decoration: underline;  }
</style>

<p align="center">
<font face="tahoma">
<font size="2">
<font color="red">
<B>Classes</b>
</font>
</font>
</font>
</p>

<p align="left">
<font face="tahoma">
<font size="2">
<font color="black">
<B>Classes</b>... No, not the kind ya ditch in school :)... So what's a class you say? It's just, the BEST way to code period. Why? Couple of reasons... Reusability, easy to maintain, less codes and therefore less errors. These are key when it comes to programming.<Br>
<Br>
Classes contain a couple of things...<Br>
<Br>
&nbsp;&nbsp;&nbsp;<font color="red">Properties</font> - Just like the ones controls & forms have. There are two ways to make 'em. Dim a public variable, or create a Property procedure.<Br>
<Br>
&nbsp;&nbsp;&nbsp;<font color="red">Methods</font> - Methods are procedures; Subroutines or Functions.<Br>
<Br>
&nbsp;&nbsp;&nbsp;<font color="red">Events</font> - Events just like ones forms have.<Br>
<Br>
<Br>
A Class is a template, and with the template we will create an <B>instance</b> of it. Which is called an <B>Object</b>. OK, lets say your making a class named 'cRun.' The cRun Class will run programs for you. It will have two properties, and one method. One property will be 'FileName,' the other could be 'WindowStyle,' and the method (a Subroutine) could be called 'RunFile.' Here is how the class could look...<Br>
<Br>
<font color="blue">Class example</font><Br>
<Br>
Public FileName As String<Br>
Public WindowStyle As String<Br>
<Br>
Public Sub RunFile()<Br>
&nbsp;&nbsp;&nbsp;Shell FileName, WindowStyle<Br>
End Sub<Br>
<Br>
<font color="blue">Using the Class example</font><Br><Br>
<Br>
Dim RunAnEXE As New cRun<Br>
<Br>
RunAnEXE.FileName = txtFilePath.Text<Br>
RunAnEXE.WindowStyle = vbNormal<Br>
<Br>
RunAnEXE.RunFile<Br>
<Br>
Now if you've actually examined the codes above, you can see we dimensioned RunAnEXE as a new cRun class, and created an instance of it. You must create an instance of a class in every procedure you want to use it in (Or dim it in the General section). As mentioned before, there are two ways to create properties in classes, we'll check out how to make them using the Property procedure, but first you need to understand the types of Propery procedures...<Br>
<Br>
<font color="blue">Differnt types of Property Procedures</font><Br>
<Br>
&nbsp;&nbsp;&nbsp;<font color="red">Let</font> - Lets you set the value of something<Br>
<Br> 
&nbsp;&nbsp;&nbsp;<font color="red">Get</font> - Gets you the value of something<Br>
<Br>
<font color="blue">Class named cPP example, using Property Procedures</font><Br><Br>
<Br>
Option Explicit<Br>
<Br>
<font color="green">'local variable(s) to hold property value(s)</font><Br>
Private mvarName As String <font color="green">'local copy</font><Br>
Private mvarAge As Integer <font color="green">'local copy</font><Br>
Private mvarSex As String <font color="green">'local copy</font><Br>
<Br>
Public Sub ProcessUser()<Br>
<Br>
&nbsp;&nbsp;&nbsp;MsgBox "User: " & Name & " Age: " & Age & " Sex: " & Sex, vbCritical<Br>
<Br>
End Sub<Br>
<Br>
Public Property Let Sex(ByVal vData As String)<Br>
<Br>
  <font color="green">'used when assigning a value to the property, on the left side of an</font><Br>
  <font color="green">'assignment.  Syntax: X.Sex = 5</font><Br>
&nbsp;&nbsp;&nbsp;mvarSex = vData<Br>
<Br>
End Property<Br>
<Br>
Public Property Get Sex() As String<Br>
<Br>  
  <font color="green">'used when retrieving value of a property, on the right side of an</font><Br>
  <font color="green">'assignment.  Syntax: Debug.Print X.Sex</font><Br>
&nbsp;&nbsp;&nbsp;Sex = mvarSex<Br>
<Br>
End Property<Br>
<Br>
Public Property Let Age(ByVal vData As Integer)<Br>
<Br>
  <font color="green">'used when assigning a value to the property, on the left side of an</font><Br>
  <font color="green">'assignment.  Syntax: X.Age = 5</font><Br>
&nbsp;&nbsp;&nbsp;mvarAge = vData<Br>
<Br>
End Property<Br>
<Br>
Public Property Get Age() As Integer<Br>
<Br>
  <font color="green">'used when retrieving value of a property, on the right side of an</font><Br>
  <font color="green">'assignment.  Syntax: Debug.Print X.Age</font><Br>
&nbsp;&nbsp;&nbsp;Age = mvarAge<Br>
<Br>
End Property<Br>
<Br>
Public Property Let Name(ByVal vData As String)<Br>
<Br>
  <font color="green">'used when assigning a value to the property, on the left side of an</font><Br>
  <font color="green">'assignment.  Syntax: X.Name = 5</font><Br>
&nbsp;&nbsp;&nbsp;mvarName = vData<Br>
<Br>
End Property<Br>
<Br>
Public Property Get Name() As String<Br>
<Br>
  <font color="green">'used when retrieving value of a property, on the right side of an</font><Br>
  <font color="green">'assignment.  Syntax: Debug.Print X.Name</font><Br>
&nbsp;&nbsp;&nbsp;Name = mvarName<Br>
<Br>
End Property<Br>
</p>

<p align=center>
<font face="tahoma">
<font size="2">
<font color="red">
<img src="http://www.angelfire.com/ny3/visualbasic/images/note.jpg"> <B>Note:</b> That's not as complicated as it looks... I used VB's Class builder :7
</font>
</p>

<p align="left">
<font face="tahoma">
<font size="2">
<font color="black">
<font color="blue">Using the Class example</font><Br>
<Br>
Dim PP as New cPP<Br>
<Br>
PP.Name = "Chloe"<Br>
PP.Age = 17<Br>
PP.Sex = "Female"<Br>
<Br>
PP.ProcessUser<Br>
</p>

<p align=center>
<font face="tahoma">
<font size="2">
<font color="blue">
<img src="http://www.angelfire.com/ny3/visualbasic/images/tip.jpg"> <B>Tip:</b> The best way to go about creating Properties is indeed with Property procedures.
</font>
</p>

<p align="left">
<font face="tahoma">
<font size="2">
<font color="black">
Just as how you must create an instance of a class before using, you must destroy a class when your done using it. If you don't kill the object, it's going to be stuck in ya RAM, till ya close your app, and that aint cool.<Br>
<Br>
<font color="blue">Destroying the object</font><Br>
Set PP = Nothing<Br>
<Br>
<Br>
Classes don't replace standard modules, infact they work with standard bas files. In bas files you can declare API calls, you can't in class modules, so if you want to use API in your program, just add 'em in the module.<Br>

<p align=center>
<font face="tahoma">
<font size="2">
<font color="red">
<img src="http://www.angelfire.com/ny3/visualbasic/images/note.jpg"> <B>Note:</b> You can also declare API calls in your form by setting it to Private. I don't.
</font>
</p>

<p align="left">
<font face="tahoma">
<font size="2">
<font color="black">
OK, read all that, still having trouble understanding when to use Classes? Now and for almost anything sounds about right. Large projects, small projects, for parts of games etc... Try writting a project with classes, and see what I'm talkin about...<Br>
</p>

<p align=center>
<font face="tahoma">
<A HREF ="30.html" TARGET="MainWindow"><font color="blue">Back</a>
<A HREF ="32.html" TARGET="MainWindow"><font color="blue">Next</a>
</p>


