ID=E0311
URL=http://www.intap.net/~drw/cpp/cpp01_01.htm
SIZE=7752
DATE=12/07/02
TIME=19:19:47
DATASET=C
HTML=
<html>
<head> 
<title>
online C++ tutorial: Programming Languages 
</title>
</head>

<body bgcolor="#ffffff"
       link = "#ff0000"
      alink = "#00ff00"
      vlink = "#660000" >


<table width="100%" border=0>
<tr>
<td align=left>
<a href="cpp00_01.htm"><img border=0 src="pictures/buttons/prevs.gif" width=51 height=34 alt="&lt;&lt;=="></a>
<a href="cpp00_03.htm"><img border=0 src="pictures/buttons/prevp.gif" width=37 height=34 alt="&lt;="></a>
</td>
<td align=center>
<a href="index.htm">
<img border=0 width=122 height=34 src="pictures/buttons/toc.gif"
    alt="[table of contents]"></a>
<a href="/cgi-bin/drw/cpp/search.cgi">
<img border=0 width=46 height=34 src="pictures/buttons/search.gif"
    alt="[search]"></a>
<a href="glossary.htm">
<img border=0 width=61 height=34 src="pictures/buttons/glossary.gif"
    alt="[glossary]"></a>
<a href="feedback.htm">
<img border=0 width=65 height=34 src="pictures/buttons/feedback.gif"
    alt="[feedback]"></a>
</td>
<td align=right>

<a href="cpp01_02.htm"><img border=0 src="pictures/buttons/nextp.gif" width=37 height=34 alt="=&gt;"></a>
<a href="cpp02_01.htm"><img border=0 src="pictures/buttons/nexts.gif" width=51 height=34 alt="==&gt;&gt;"></a>
</td>
</tr>
</table>
<hr>
<table width="100%"><tr><td align=left><img src="pictures/buttons/cppsm.gif" width=143 height=37 alt="[online C++ tutorial]"></td><td align=right><b>Section 1: Introduction</b></td></tr></table>
<center><h2>Section 1.1: Programming Languages </h2></center>

<p> So, what exactly is a programming language? As a loose definition,
a programming language is a tool used by a programmer to give the
computer very specific instructions in order to serve some purpose for
the user. A program is like a recipe. It outlines exactly the steps
needed to create something or perform a certain task. For, example,
when baking chocolate chip cookies, there are certain steps that need
to be followed:

<pre>
mix eggs, butter, sugar in a bowl
add flour, baking soda, and flavorings
mix until creamy
add chocolate chips
bake in the oven.
</pre>

<p>
For a person who has made cookies before and knows the amounts of each
ingredient to use, this recipe is sufficient, however, for a person
who has never baked cookies before, this recipe will not do. That
person would need a recipe like the following:

<pre>
place two eggs in a bowl
add 1.5 c. butter to the eggs
...
bake cookies for 10-12 minutes at 375 degrees or until brown
</pre>

<p> There is still a problem with the preceding recipe. The first
instruction says to put two eggs in the bowl, but it doesn't say to
shell them first! This may seem like common sense, but it illustrates
a fundamental concept: computers do exactly what they are told, no
more, no less. When writing a program, a programmer must outline every
possible step and scenario that could occur.

<p> The first programming languages that emerged, were assembly
languages. These languages are exactly the <a
href="glossary.htm#instruction_set">instruction set</a> of a specific
processor. These languages are very low-level and hard to
understand. For example, say we wanted to add two numbers, 3 and 4 and
get a result:

<table>
<tr><td width="40%">
in C++:
</td><td width="30%">
</td><td width="40%">
in assembly:
</td></tr>
<tr><td width="40%">
<pre>
int a = 3 + 4;
</pre>
</td><td width="30%">
</td><td width="40%">
<pre>
ldl  3, R1
ldl  4, R2
addl R1, R2, R3
</pre>
</td></tr>
</table>

<p> The version in C++ is easier to understand and simpler to write.
This is analagous to the differences in the first recipe presented and
the second recipe presented. The first recipe expressed the method of
baking cookies on a high level, while the second method went more in
depth on how to actually mix and bake the cookies.  Programmers write
their code in a high level language and then use a <a
href="glossary.htm#compiler">compiler</a> to translate their code into
an assembly language and then into a machine language that will run on
the machine they are using.

<p> Programs consist of <a
href="glossary.htm#algorithm">algorithms</a>.  An algorithm is just a
well-outlined method for completing a task. The above recipes could be
called <a href="glossary.htm#algorithm">algorithms</a> for the task of
baking cookies. A high level algorithm for adding two numbers could be
as follows:

<pre>
ask the user for the first number
ask the user for the second number
add the two numbers
display the result on the screen
</pre>

<p>
This high-level abstraction is not actual code. However, it does
express the ideas of a program, and is called <a
href="glossary.htm#pseudo_code">pseudo-code</a>.  Often, programmers
will design their programs in pseudo-code, and then use this to write
their actual code.


<p> So, why is there more than one programming language?  It may seem
that a standard language should be agreed on, since all languages are
translated using a compiler anyways. However, languages are often
designed with a specific use in mind, and some are better than others
for dealing with certain problems.  So if a programmer is capable of
writing a compiler (which is a very complex piece of software) then
they can design and create a language.


<p> The most important thing to remember about programming languages
is that they are only an abstraction! Programming languages were
created so developers could express their ideas on a higher level than
a computer can understand. Once a user has a good concept of how
computers work, and has learned a few computer languages, it becomes
much easier to pick up new languages.



<p> A programming language is a tool used by programmers in order to
specifically outline a series of steps that a computer is to take in a
certain instance. High-level programming languages allow a programmer
to express ideas on an abstract level, and forces the compiler to
worry about the low-level implementation details. This allows for
faster development of applications, since applications are easier to
write. There are even fourth generation languages emerging as viable
programming languages. Recall that machine code is considered first
generation, assembly languages are second generation, compiled
languages are third generation. Fourth generation languages are
actually code-generating environments, such as Microsoft's Visual
Basic.  These fourth generation languages allow programmers to express
their ideas visually, and the environment then writes the code to
implement these ideas.
 <hr>
<table width="100%" border=0>
<tr>
<td align=left>
<a href="cpp00_01.htm"><img border=0 src="pictures/buttons/prevs.gif" width=51 height=34 alt="&lt;&lt;=="></a>
<a href="cpp00_03.htm"><img border=0 src="pictures/buttons/prevp.gif" width=37 height=34 alt="&lt;="></a>
</td>
<td align=center>
<a href="index.htm">
<img border=0 width=122 height=34 src="pictures/buttons/toc.gif"
    alt="[table of contents]"></a>
<a href="/cgi-bin/drw/cpp/search.cgi">
<img border=0 width=46 height=34 src="pictures/buttons/search.gif"
    alt="[search]"></a>
<a href="glossary.htm">
<img border=0 width=61 height=34 src="pictures/buttons/glossary.gif"
    alt="[glossary]"></a>
<a href="feedback.htm">
<img border=0 width=65 height=34 src="pictures/buttons/feedback.gif"
    alt="[feedback]"></a>
</td>
<td align=right>

<a href="cpp01_02.htm"><img border=0 src="pictures/buttons/nextp.gif" width=37 height=34 alt="=&gt;"></a>
<a href="cpp02_01.htm"><img border=0 src="pictures/buttons/nexts.gif" width=51 height=34 alt="==&gt;&gt;"></a>
</td>
</tr>
</table>
</body>
</html>

