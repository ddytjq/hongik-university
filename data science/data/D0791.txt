ID=D0791
URL=http://www.jchq.net/tutorial/10_01Tut.htm
SIZE=13888
DATE=16/07/02
TIME=14:58:08
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
	<TITLE>10.1) The java.util package</TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.2 (Linux)">
	<META NAME="CREATED" CONTENT="20010408;9014000">
	<META NAME="CHANGEDBY" CONTENT="Marcus Green">
	<META NAME="CHANGED" CONTENT="20010408;9032000">
		
<link rel="stylesheet" href="tutor.css">

</HEAD>
<BODY BGCOLOR="#ffffff">
<TABLE WIDTH=95% BORDER=0 CELLPADDING=2 CELLSPACING=0 STYLE="page-break-before: always">
	<COL WIDTH=147*>
	<COL WIDTH=109*>
	<TR>
		<TD WIDTH=57% HEIGHT=104>
			<P><A HREF="introj2.htm"><IMG SRC="images/btnIndex.jpg" NAME="Graphic1" ALT="Return to Tutorial Index" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A><A HREF="introj2.htm"><BR><BR></A><A HREF="../index.htm"><IMG SRC="images/btnHome.jpg" NAME="Graphic2" ALT="Back to the home page of this site" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A>
						</P>
		</TD>
		<TD WIDTH=43%>
			<P ALIGN=RIGHT><IMG SRC="images/hat.gif" NAME="Graphic3" ALT="morterboard" ALIGN=BOTTOM WIDTH=118 HEIGHT=113 BORDER=0></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=57% HEIGHT=11>
			<H1 ALIGN=LEFT>Java2 Certification <BR>Tutorial 
			</H1>
		</TD>
		<TD WIDTH=43% BGCOLOR="#ff9900">
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<P>You can discuss this topic with others at
<A HREF="http://www.jchq.net/discus">http://www.jchq.net/discus</A><BR>Read
reviews and buy a Java Certification book at
<A HREF="http://www.jchq.net/bookreviews/jcertbooks.htm">http://www.jchq.net/bookreviews/jcertbooks.htm</A>
</P>
<HR SIZE=5 NOSHADE>
<H1><B>10) The java.util package</B> 
</H1>
<H1>Objective 1) 
</H1>
<P>Make appropriate selection of collection classes/interfaces to
suit specified behavior requirements.</P>
<H3>Note on this Objective 
</H3>
<P><I>Although it does not mention it specifically, this objective
involves one of the new objectives for the Java2 version of the exam,
a knowledge of the collection classes. The exam questions on these
new collections are fairly basic, requiring a knowledge of where and
how you might use them, rather than a detailed knowledge of the
fields and methods.</I></P>
<H3>The old collections 
</H3>
<P>The Java 2 API includes new interfaces and classes to enhance the
collections available. Earlier versions of Java included</P>
<UL>
	<LI>vector </li>
	<LI>hashtable</li> 
	<LI>array</li> 
	<LI>BitSet</li> 
	
</UL>
<P>Of these, only <I>array</I> was included in the objectives for the
1.1 certification exam. One of the noticeable omissions from Java 1.1
was support for sorting, a very common requirement in any programming
situation,</P>
<H3>The new collections 
</H3>
<P>At the root of the Collection API is the <I>Collection</I>
interface. This gives you a series of common methods that all
collection classes will have. You would probably never create your
own class that implements Collection as Java supplies a series of
sub-interfaces and classes that uses the <I>Collection</I> interface.</P>
<P>The Java2 API includes the following new collection interfaces 
</P>
<UL>
	<LI>Sets</li> 
	<LI>Maps</li>
	
</UL>

<P>Classes that implement the <I>Collection</I> interface store
objects as elements rather than primitives. This approach has the
drawback that creating objects has a performance overhead and the
elements must be cast back from <I>Object</I> to the appropriate type
before being used. It also means that the collections do not check
that the elements are all of the same type, as an object can be just
about anything. 
</P>
<H3>A Set 
</H3>
<P>A <I>Set</I> is a collection interface that cannot contain
duplicate elements. It thus matches nicely onto concepts such as a
record set returned from a relational database. Part of the magic of
the <I>Set</I> interface is in the <I>add</I> method.<BR><BR>add(Object
o)<BR><BR>Any object passed to the <I>add</I> method must implement
the <I>equals </I>method so the value can be compared with existing
objects in the class. If the set already contains this object the
call to <I>add</I> leaves the set unchanged and returns <I>false. </I>The
idea of returning <I>false</I> when attempting to add an element
seems more like the approach used in C/C++ than Java. Most similar
java methods would seem to throw an Exception in this type of
situation.</P>
<H3>A List 
</H3>
<P>A list is a sorted collection interface that can contain
duplicates</P>
<P>Some important methods are</P>
<UL>
	<LI>add</LI> 
	<LI>remove </LI>
	<LI>clear</LI> 
	
</UL>
<P>The JDK documentation gives the example of using <I>List</I> to
manage an actual GUI list control containing a list of the names of
the Planets. 
</P>
<H3>A Map 
</H3>
<P><I>Map</I> is an interface, classes that implement it cannot
contain duplicate keys, and it is similar to a hashtable.</P>
<P>Why use Collections instead of arrays?.</P>
<P>The big advantage of the collections over arrays is that the
collections are growable, you do not have to assign the size at
creation time. The drawback of collections is that they only store
objects and not primitives and this comes with an inevitable
performance overhead. Arrays do not directly support sorting, but
this can be overcome by using the static methods of the Collections.
Here is an example.</P>
<PRE>import java.util.*;
public class Sort{
    public static void main(String argv[]){
    Sort s = new Sort();
    }
Sort(){
    String s[] = new String[4];
    s[0]=&quot;z&quot;;
    s[1]=&quot;b&quot;;
    s[2]=&quot;c&quot;;
    s[3]=&quot;a&quot;;
    Arrays.sort(s);
    for(int i=0;i&lt; s.length;i++)
    System.out.println(s[i]);
    }
}</PRE>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=9%>
			<P><IMG SRC="images/key2.gif" NAME="Graphic4" ALIGN=BOTTOM WIDTH=106 HEIGHT=73 BORDER=0></P>
		</TD>
		<TD WIDTH=91%>
			<H4><FONT COLOR="#ff0000">Set and Map collections ensure
			uniqueness, List Collections do not ensure uniqueness but are
			sorted (ordered)</FONT> 
			</H4>
		</TD>
	</TR>
</TABLE>
<H3>Using Vectors 
</H3>
<P>The following example illustrates how you can add objects of
different classes to a <I>Vector</I>. This contrasts with arrays
where every element must be of the same type. The code then walks
through each object printing to the standard output. This implicitly
access the <I>toString</I>() method of each object.</P>
<PRE>import java.awt.*;
import java.util.*;
public class Vec{
public static void main(String argv[]){
    Vec v = new Vec();
    v.amethod();
    }//End of main

public void amethod(){
        Vector mv = new Vector();
        //Note how a vector can store objects 
        //of different types
        mv.addElement(&quot;Hello&quot;);
        mv.addElement(Color.red);
        mv.addElement(new Integer(99));
        //This would cause an error
        //As a vector will not store primitives
        //mv.addElement(99)
        //Walk through each element of the vector
        for(int i=0; i&lt; mv.size(); i++){
            System.out.println(mv.elementAt(i));
            }
   }//End of amethod
}</PRE><P>
Prior to Java2 the <I>Vector</I> class was the main way of creating a
re-sizable data structure. Elements can be removed from the Vector
class with the <I>remove</I> method. 
</P>
<H3>Using Hashtables 
</H3>
<P>Hashtables are a little like the Visual Basic concept of a
Collection used with a key. It acts like a <I>Vector</I>, except that
instead of referring to elements by number, you refer to them by key.
The <I>hash</I> part of the name refers to a math term dealing with
creating indexes. A hashtable can offer the benefit over a <I>Vector</I>
of faster look ups.</P>
<H3>BitSet 
</H3>
<P>A <I>BitSet</I> as its name implies, stores a sequence of Bits.
Don't be misled by the &quot;set&quot; part of its name its not a set
in the mathematical or database sense, nor is it related to the Sets
available in Java2. It is more appropriate to think of it as a bit
vector. A <I>BitSet</I> may useful for the efficient storage of bits
where the bits are used to represent <I>true/false values</I>. The
alternative of using some sort of collection containing Boolean
values can be less efficient.<BR><BR>According to Bruce Eckel in
&quot;Thinking in Java&quot;<BR><BR><I>It&#146;s efficient only from
the standpoint of size; if you&#146;re looking for efficient access,
it is slightly slower than using an array of some native type.<BR></I><BR>The
BitSet is somewhat of a novelty class which you may never have a need
for. I suspect that it might be handy for the purposes of
cryptography or the processing of images. Please let me know if you
come across a question relating to it in the Java2 exam.</P>
<HR>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=11%>
			<P><IMG SRC="images/Quiz.gif" NAME="Graphic5" ALIGN=BOTTOM WIDTH=99 HEIGHT=101 BORDER=0></P>
		</TD>
		<TD WIDTH=89%>
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<H4><B>Question 1)</B></H4>
<P>Which of the following are collection classes?<BR><BR>1)
Collection<BR>2) Iterator<BR>3) HashSet<BR>4) Vector</P>
<HR>
<H4><B>Question 2)</B></H4>
<P>Which of the following are true about the Collection
interface?<BR><BR>1) The Vector class has been modified to implement
Collection<BR>2) The Collection interface offers individual methods
and Bulk methods such as addAll<BR>3) The Collection interface is
backwardly compatible and all methods are available within the JDK
1.1 classes<BR>4) The collection classes make it unnecessary to use
arrays</P>
<HR>
<H4><B>Question 3)</B></H4>
<P>Which of the following are true?<BR><BR>1) The Set interface is
designed to ensure that implementing classes have unique members<BR>2)
Classes that implement the List interface may not contain duplicate
elements<BR>3) The Set interface is designed for storing records
returned from a database query<BR>4) The Map Interface is not part of
the Collection Framework</P>
<H4><B><BR>Question 4)</B></H4>
<P>Which of the following are true<BR><BR>1) The elements of
a Collection class can be ordered by using the sort method of the
Collection interface<BR>2) You can create an ordered Collection by
instantiating a class that implements the List interface<BR>3) The
Collection interface sort method takes parameters of A or D to change
the sort order, Ascending/Descending<BR>4) The elements of a
Collection class can be ordered by using the order method of the
Collection interface</P>
<HR>
<H4><B>Question 5)</B></H4>
<P><B><BR></B>You wish to store a small amount of data and make it
available for rapid access. You do not have a need for the data to be
sorted, uniqueness is not an issue and the data will remain fairly
static Which data structure might be most suitable for this
requirement?<BR><BR>1) TreeSet<BR>2) HashMap<BR>3) LinkedList<BR>4)
an array</P>
<HR>
<H4><B>Question 6)</B></H4>
<P>Which of the following are Collection classes?<BR><BR>1)
ListBag<BR>2) HashMap<BR>3) Vector<BR>4) SetList</P>
<HR>
<H4><B>Question 7)</B></H4>
<P>How can you remove an element from a Vector?<BR><BR>1) delete
method<BR>2) cancel method<BR>3) clear method<BR>4) remove method</P>
<H1>Answers 
</H1>
<H4><B>Answer 1)</B></H4>
<P>3) HashSet<BR>4) Vector<BR><BR>The other two are Interfaces not
classes</P>
<H4><BR><B>Answer 2)</B></H4>
<P>1) The Vector class has been modified to implement Collection<BR>2)
The Collection interface offers individual methods and Bulk methods
such as addAll<BR><BR>The Collection classes are new to the JDK1.2
(Java2) release. With the exception of the classes that have been
retrofitted such as Vector and BitSet the, if you run any of the
Collections through an older JDK you will get a compile time error. 
</P>
<H4><BR><B>Answer 3)</B></H4>
<P>1) The Set interface is designed to ensure that implementing
classes have unique members<BR><BR>Elements of a class that
implements the List interface may contain duplicate elements.
Although a class that implements the Set interface might be used for
storing records returned from a database query, it is not designed
particularly for that purpose. 
</P>
<H4><BR><B>Answer 4)</B></H4>
<P>2) You can create an ordered Collection by instantiating a class
that implements the List interface</P>
<H4><BR><B>Answer 5)</B></H4>
<P><B><BR></B>4) an array<BR><BR>For such a simple requirement an
ordinary array will probably be the best solution</P>
<H4><B><BR>Answer 6)</B></H4>
<P>2) HashMap<BR>3) Vector<BR><B><BR></B>With the release of JDK 1.2
(Java2) the Vector class was &quot;retro-fitted&quot; to become a
member of the Collection Framework</P>
<H4><BR><B>Answer 7)</B></H4>
<P>4) remove method</P>
<P ALIGN=CENTER STYLE="margin-bottom: 0in"><B>Other sources on this
topic</B></P>
<TABLE WIDTH=100% BORDER=1 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=100% HEIGHT=100>
			<P><B>The Sun
			Tutorial<BR></B><A HREF="http://java.sun.com/docs/books/tutorial/collections/index.html">http://java.sun.com/docs/books/tutorial/collections/index.html</A><A HREF="http://java.sun.com/docs/books/tutorial/uiswing/events/intro.html"><BR><BR></A><B>Jyothi
			Krishnan on this topic at
			</B><A HREF="http://www.Geocities.com/Athens/7077/Java080.htm#design goals of the jdk 1.1 delegation"><BR></A><A HREF="http://www.geocities.com/SiliconValley/Network/3693/obj_sec10.html#obj30">http://www.geocities.com/SiliconValley/Network/3693/obj_sec10.html#obj30</A></P>
		</TD>
	</TR>
</TABLE>
<P>Last updated<BR>21 May 2002<BR>copyright &copy; Marcus Green
2001<BR>most recent version at http://www.jchq.net</P>

</BODY>
</HTML>

