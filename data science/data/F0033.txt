ID=F0033
URL=http://www.geog.leeds.ac.uk/people/m.blake/magis/geog5080/lt2-1.htm
SIZE=5141
DATE=09/07/2002
TIME=13:12:42
DATASET=Visual Basic
HTML=<HTML>

<HEAD>
<TITLE>Visual Basic Section 2: Basic BASIC</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<H2><A HREF="customgis.htm"><IMG SRC="icons/msvb.gif" ALT="Visual Basic Icon" ALIGN=middle BORDER=0></A>Basic BASIC</H2>

Obviously, the aim of this brief page is not to replace a BASIC manual. The aim here is to highlight the most important cornerstones of the language. Hints are provided that will hopefully help to reduce the struggle up the initial steep portion of the learning curve that all programmers have to go through.
 
<H3><A NAME="1">Modules, Procedures &amp; Functions</H3>
Modules are *.bas files that store procedures and declarations that are recognized thoughtout the application

<H3><A NAME="2">Declarations</H3>
Declarations are nonexecutable code statements that name external procedures, constants or variables and define their attributes (such as data type).  You write declarations for forms or modules.  To enter module-level declarations, go to the Declarations section of the form or module.  To enter global declarations, go to the Declarations section of a module and use the Global statement for constants and variables.
<P>
Global declarations apply to the whole application, while module-level or procedural-level declarations only apply to that module or procedure.

<H3><A NAME="3">Variables</H3>

There are several different type of variable
<DL COMPACT>
<DT>Procedural variables
<DD><I>Variables dimensioned within a procedure or function. These are only available or visiable to the code within the procedure or function.</I>
<DT>Module variables
<DD><I>A variable declared outside of a procedure and visible to all procedures in the module</I>
<DT>Global Variables
<DD><I>Global variables are variables that are available to all procedures in all forms and modules. These are set in the declaration </I>
</DL>
<H4>Types of Variable</H4>
The following table shows the fundamental data types supported by Visual Basic, and the type-declaration suffix, storage size, and range of each data type.
<P>
<P>
<TABLE BORDER>
<TR>
<TD><B>Data type</B></TD>
<TD><B>Suffix</B></TD>
<TD><B>Storage size</B></TD>
<TD><B>Range</B></TD>
</TR>
<TR>
<TD>Integer</TD>
<TD>%</TD>
<TD>2 bytes</TD>
<TD>-32768 to 32767.</TD>
</TR>
<TR>
<TD>Long(long integer)</TD>
<TD>&</TD>
<TD>4 bytes</TD>
<TD>-2147483648 to 2147483647.</TD>
</TR>
<TR>
<TD>Single(single-precision floating-point)</TD>
<TD>!</TD>
<TD>4 bytes</TD>
<TD>-3.402823E38 to -1.401298E-45 for negative values; 1.401298E-45 to 3.402823E38 for positive values.</TD>
</TR>
<TR>
<TD>Double(double-precision floating-point)</TD>
<TD>#</TD>
<TD>8 bytes</TD>
<TD>-1.79769313486232E308 to -4.94065645841247E-324 for negative values; 4.94065645841247E-324 to 1.79769313486232E308 for positive values.</TD>
</TR>
<TR>
<TD>Currency(scaled integer)</TD>
<TD>@</TD>
<TD>8 bytes</TD>
<TD>-922337203685477.5808 to 922337203685477.5807.</TD>
</TR>
<TR>
<TD>String</TD>
<TD>$</TD>
<TD>1 byte per character</TD>
<TD>0 to approximately 65500 bytes. (Some storage overhead is required.)</TD>
</TR>
<TR>
<TD>Variant</TD>
<TD>None</TD>
<TD>As appropriate</TD>
<TD>Any numeric value up to the range of a Double or any character text.</TD>
</TR>
<TR>
<TD>User-defined (using Type)</TD>
<TD>None</TD>
<TD>Number required by elements</TD>
<TD>The range of each element is the same as the range of its fundamental data type listed above.</TD>
</TR>
</TABLE>
<P>
<FONT COLOR="#008000">
<B>Hints:</B>
<UL COMPACT>
<LI>Using the type suffixes is not compulsory BUT is does make your code clearer and therefore bugs are easier to find.
<LI>
<LI>Becareful when setting variables. One of the most common errors is caused by setting a numeric variable to a value it cannot cope with <I>i.e.</I> setting an integer variable to a value more than 32,767. No syntax error at design-time will occur, only at run-time will an Overflow! error occur. The following code produces an overflow error<BR>
<DL COMPACT>
<DD>Dim a As Integer
<DD>a = 32768
</DL>
<P>
<LI>One of the most useful features of VB is the ability to define your own data type. Lookup the <I>Type</I> statement in the help.
<LI>For more help on each of these data types see the <I>Visual Basic Data Types</I> page in the VB help file
</UL>
</FONT>
<P>
<HR>
<H4>Global vs. Local Variables</H4>

<H3><A NAME="2">Conditional Statements</H3>

<H3><A NAME="3">Looping Statements</H3>

<H3><A NAME="4">Procedures &amp; Functions</H3>

<H3><A NAME="5">Error Handling</H3>

<P>
<HR>
Forward: <A HREF="lt1-2.htm" >BASIC &amp; Visual Basic</A>
<BR>
Back: <A HREF="cust-gis.htm" target=display >Custom GIS</A>
<P>
<FONT SIZE="2"><I>This Web Page forms part of a series that describe the Custom
GIS Course at the School of Geography, Leeds University.</I>
<p>
<I>Author: <A HREF="http://www.geog.leeds.ac.uk/staff/m.blake/m.blake.html" >Marcus Blake  
</A>(marcus@geog.leeds.ac.uk)</I>
<br>
<I>Webmaster: Ian Turton (ian@geog.leeds.ac.uk)</I>
<P>
<I>Last Updated: 19 February 1996 07:39:23</I>
</FONT>
</BODY>

