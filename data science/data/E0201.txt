ID=E0201
URL=http://www.cs.princeton.edu/software/lcc/preface.html
SIZE=8543
DATE=12/07/02
TIME=19:18:38
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<link HREF="mailto:drh@microsoft.com" REV="made" TITLE="David R. Hanson">
<title>Preface: A Retargetable C Compiler</title>
</head>

<body>

<table border="1" width="100%" style="background-color: rgb(255,255,0); font-family: Verdana, sans-serif; font-size: smaller" cellpadding="0" cellspacing="0">
  <tr>
    <td width="100%"><a href="/" title="Princeton CS Home Page">Princeton CS</a> <img src="images/arrow.gif" alt="arrow.gif (116 bytes)" WIDTH="13" HEIGHT="9"> <a href="/software" title="Princeton CS Software">Software</a> <img src="images/arrow.gif" alt="arrow.gif (116 bytes)" WIDTH="13" HEIGHT="9"> <a href="/software/lcc/" title="lcc Home Page">lcc, A
    Retargetable C Compiler</a> <img src="images/arrow.gif" alt="arrow.gif (116 bytes)" WIDTH="13" HEIGHT="9">
    Preface</td>
  </tr>
</table>

<h1>A Retargetable C Compiler: Design and Implementation</h1>

<h1>Preface</h1>

<p>The compiler is the linchpin of the programmer's toolbox. Working programmers use
compilers every day and count heavily on their correctness and reliability. A compiler
must accept the standard definition of the programming language so that source code will
be portable across platforms. A compiler must generate efficient object code. Perhaps more
importantly, a compiler must generate correct object code; an application is only as
reliable as the compiler that compiled it.</p>

<p>A compiler is itself a large and complex application that is worthy of study in its own
right. This book tours most of the implementation of <tt>lcc</tt>, a compiler for the ANSI
C programming language. It tries to be to compiling what <cite>Software Tools</cite> by B.
W. Kernighan and P. J. Plauger (Addison-Wesley, 1976), which tours practical tools for
tasks like text editing and macro processing, is to text processing. Software design and
implementation are best learned through experience with real tools. This book explains in
detail and shows most of the code for a real compiler. The accompanying diskette holds the
source code for the complete compiler.</p>

<p><tt>lcc</tt> is a production compiler, not a toy. It's been used to compile production
programs since 1988 and is now used by hundreds of C programmers daily. Detailing most of
a production compiler in a book leaves little room for supporting material, so we present
only the theory needed for the implementation at hand and leave the broad survey of
compiling techniques to existing texts. The book omits a few language features&#151;those
with mundane or repetitive implementations and those deliberately left as
exercises&#151;but the full compiler is available on the diskette, and the book makes it
understandable.</p>

<p>The obvious use for this book is to learn more about compiler construction. But only
few programmers need to know how to design and implement compilers. Most work on
applications and other aspects of systems programming. There are four reasons why this
majority of C programmers may benefit from this book.</p>

<p>First, programmers who understand how a C compiler works are often better programmers
in general and better C programmers in particular. The compiler writer must understand
even the darkest corners of the C language; touring the implementation of those corners
reveals much about the language itself and its efficient realization on modern computers.</p>

<p>Second, most texts on programming must necessarily use small examples, which often
demonstrate techniques simply and elegantly. Most programmers, however, work on large
programs that have evolved&#151;or degenerated&#151;over time. There are few well
documented examples of this kind of `programming-in-the-large' that can serve as reference
examples. <tt>lcc</tt> isn't perfect, but this book documents both its good and bad points
in detail and thus provides one such reference point.</p>

<p>Third, a compiler is one of the best demonstrations in computer science of the
interaction between theory and practice. <tt>lcc</tt> displays both the places where this
interaction is smooth and the results are elegant and where practical demands strain the
theory, which shows in the resulting code. Exploring these interactions in a real program
helps programmers understand when, where, and how to apply different techniques. <tt>lcc</tt>
also illustrates numerous C programming techniques.</p>

<p>Fourth, this book is an example of a `literate program.' Like <cite>TeX: The Program</cite>
by D. E. Knuth (Addison-Wesley, 1986), this book is <tt>lcc</tt>'s source code and the
prose that describes it. The code is presented in the order that best suits understanding,
not in the order dictated by the C programming language. The source code that appears on
the diskette is extracted automatically from the book's text files.</p>

<p>This book is well suited to self-study in both academic and professional settings. The
book and its diskette offer complete documented source code for <tt>lcc</tt>, so they may
interest practitioners who wish to experiment with compilation or those working in
application areas that use or implement language-based tools and techniques, such as user
interfaces.</p>

<p>The book shows a large software system, warts and all. It could thus be the subject of
a post-mortem in a software engineering course, for example.</p>

<p>For compiler courses, this book complements traditional compiler texts. This book shows
<em>one</em> way of implementing a C compiler while traditional texts survey algorithms
for solving the broad range of problems encountered in compiling. Limited space prevents
such texts from including more than a toy compiler. Code generation is often treated at a
particularly high level to avoid tying the book to a specific computer.</p>

<p>As a result, many instructors assign a substantial programming project to give their
students some practical experience. These instructors usually must write these compilers
from scratch; students duplicate large portions and have to use the rest with only limited
documentation. The situation is trying for both and unsatisfying to boot, because the
compilers are still toys. By documenting most of a real compiler and providing the source
code, this book offers an alternative.</p>

<p>This book presents full code generators for the MIPS R3000, SPARC, and Intel 386 and
successor architectures. It exploits recent research that produces code generators from
compact specifications. These methods allow us to present complete code generators for
several machines, which no other books do. Presenting several code generators avoids tying
the book to a single machine and helps students appreciate engineering retargetable
software.</p>

<p>Assignments can add language features, optimizations, and targets. When used with a
traditional survey text, assignments could also replace existing modules with those using
alternate algorithms. Such assignments come closer to the actual practice of compiler
engineering than assignments that implement most of toy compiler, where too much time goes
to low-level infra-structure and accommodating repetitive language features. Many of the
exercises pose just these kinds of engineering problems.</p>

<p><tt>lcc</tt> has also been adapted for purposes other than conventional compilation.
For example, it's been used for building a C browser and for generating
remote-procedure-call stubs from declarations. It could also be used to experiment with
language extensions, proposed computer architectures, and code generator technologies.</p>

<p>We assume readers are fluent in C and assembly language for some computer, know what a
compiler is and have a general understanding of one does, and have a working understanding
of data structures and algorithms at the level covered in typical undergraduate courses;
the material covered by <cite>Algorithms in C</cite> by R. Sedgewick (Addison-Wesley,
1990), for example, is more than sufficient for understanding <tt>lcc</tt>.</p>

<hr>

<address>
  <a HREF="http://www.research.microsoft.com/~cwfraser/">Chris Fraser</a> / <a HREF="mailto:cwfraser@microsoft.com">cwfraser@microsoft.com</a><br>
  <a HREF="http://www.research.microsoft.com/~drh/">David Hanson</a> / <a HREF="mailto:drh@microsoft.com">drh@microsoft.com</a><br>
  $Revision: 1.10 $ $Date: 1998/03/25 23:01:23 $ 
</address>
</body>
</html>

