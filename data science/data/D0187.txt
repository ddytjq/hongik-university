ID=D0187
URL=http://www.geocities.com/SiliconValley/Horizon/6481/Java3D.html
SIZE=12223
DATE=16/07/02
TIME=14:39:07
DATASET=Java
HTML=<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Java 3D - What does it promise</title>
</head>

<body bgcolor="#C0C0C0" text="#000000" link="#FF0000"
vlink="#800080" alink="#0000FF">

<p align="center"><a href="index.html#top" name="top"><img
src="JavaDevPage.gif" alt="Java Developer's Page" align="middle"
border="0" width="461" height="118"></a></p>

<p>&nbsp;</p>

<h1 align="center">Java 3D - What does it promise? What does it
offer? What is missing?</h1>

<p>&nbsp;</p>

<p>Java 3D is an API which extends the Java platform with
advanced capabilities for three-dimensional graphics. After eight
months since the launching of the Java 3D 1.0 API Specification,
Sun has made available early access Java 3D 1.1 implementation
(Alpha) for JavaOne Developer Conference on March 24, 1998. (Beta
version is already available.) What makes unique this API is the
combination between Java power, high quality object oriented
design and the number of target platforms: Java 3D will be
layered over the widely spread low-level 3D APIs: OpenGL,
Direct3D, QuickDraw3D.</p>

<p>&nbsp;</p>

<h3>What does it promise?<b> </b></h3>

<p>&lt;&lt;JAVA 3D introduces a new view model that takes Java's
vision of &quot;write once, run anywhere&quot; and generalizes it
to include display devices and six-degrees-of-freedom input
peripherals such as head trackers. This &quot;write once, view
everywhere&quot; nature of the new view model means that an
application or applet written using the Java 3D view model can
render images to a broad range of display devices, including
standard computer displays, multiple-projection display rooms,
and head-mounted displays, without modification of the scene
graph. It also means that the same application, once again
without modification, can render stereoscopic views and can take
advantage of the input from a head tracker to control the
rendered view.&gt;&gt; (Java 3D API Specification, Chapter 8,
&quot;View Model&quot;)</p>

<p>Another big promise is high performance. In the current
implementation, Java 3D is mixing a lot of Java code with OpenGL
calls. Many of the existent Windows machines emulate Direct3D and
OpenGL with pure software drivers. In such a configuration Java
3D is very slow, so next implementations should contain much more
native optimizations. It shouldn't be neglected that IDEs like
SuperCede and Symantec Visual Café offers the option to build
native code. Such a facility will be very appreciated by the Java
developers of the applications using 3D graphics.</p>

<p>&nbsp;</p>

<h3>What does it offer?<b> </b></h3>

<p>When I started to learn about Java, one of my first applets
was Browser 3D. Its engine was pure Java and was calling the
methods of the java.awt.Graphics class to put flat shaded
polygons on screen. By analyzing its performances, I understood
it was almost hopeless to improve it with texture mapping or a
lighting model because these would have implied the computing of
the image pixel by pixel. Java 3D makes possible texture mapping
and the use of light sources in Java applets.</p>

<p>The most tempting offer of Java 3D is being easy-to-use:
&lt;&lt;Java 3D allows the programmer to think about geometric
objects rather than about triangles-about the scene and its
composition rather than about how to write the rendering code for
efficiently displaying the scene.&gt;&gt; (Java 3D API
Specification, Chapter 1, &quot;Introduction to Java 3D&quot;)
The programmer creates objects containing geometric data,
attribute information and viewing information and he connects
them to form a treelike structure called &quot;scene graph.&quot;
The Java 3D API specification doesn't include indications for
visual building of 3D worlds, but it is expected that
third-parties will create applications which will allow rapid
development of Java 3D applets. </p>

<p>The structure of the scene graph is very flexible. Node and
NodeComponent derive from the SceneGraphObject class. The
instances of the subclasses of the Group and Leaf classes (which
inherit from Node) will form the scene graph and will contain
references to instances of the subclasses of NodeComponent.
&lt;&lt;A leaf node's state is defined by the nodes in a direct
path between the scene graph's root and the leaf. Because a
leaf's graphics context only relies on a linear path between the
root and that node, the Java 3D renderer can decide to traverse
the scene graph in whatever order it wishes. It can traverse the
scene graph from left to right and top to bottom, in level order
from right to left, or even in parallel. The only exceptions to
this rule are spatially bounded attributes such as lights and
fog.&gt;&gt; (Java 3D API Specification, Chapter 2, &quot;Scene
Graph Basics&quot;) In addition the subgraphs can be shared and
cloned.</p>

<p>The scene graph can contain nodes that define the behavior of
the 3D objects. &lt;&lt;Simple behaviors can add surprisingly
interesting effects to a scene graph. For example, one can
animate a rigid object by using a Behavior node to repetitively
modify the TransformGroup node that points to the object one
wishes to animate. Alternatively, a Behavior node can track the
current position of a mouse and modify portions of the scene
graph in response.&gt;&gt; (Java 3D API Specification, Chapter 9,
&quot;Behaviors and Interpolators&quot;) The Interpolators are a
subclass of the Behavior nodes. They offer a quick way to animate
a scene. &lt;&lt;The Java 3D API provides interpolators for a
number of functions: manipulating transforms within a
TransformGroup, modifying the values of a Switch node, and
modifying Material attributes such as color and
transparency.&gt;&gt; (Java 3D API Specification, Chapter 9,
&quot;Behaviors and Interpolators&quot;) For example, if you want
to give a continuos rotation to an object then you can use
RotationInterpolator. The specialized, frequently used classes
can decrease the size of the applets.</p>

<p>The Java 3D features don't stop here. It offers support for
collision detection, picking and spatial sound. There are three
rendering modes: immediate mode, retained mode, and
compiled-retained mode, which can be even mixed.</p>

<p>From the user's perspective, Java 3D will make possible the
mixing of the text with high quality 3D graphics in HTML pages.
Besides 3D logos, the articles might contain animations which
will make them more easy to understand. But Java 3D isn't only
for applets. The CAD applications will integrate much better with
the Internet and the multi-player games will have something to
gain too. </p>

<p>If the performances will be good enough then the developers of
the graphics applications will choose Java 3D for portability and
low development cost.</p>

<p>&nbsp;</p>

<h3>What is missing?</h3>

<p>Java 3D hasn't a file format. This is right. Let the
applications define their own graphics file formats. However,
imagine you work for a tool that allows the user to create
Virtual Universes in a visual mode, using Java 3D of course.
After he finishes to build the scene the tool will generate the
source code for an applet. The user closes the application and
goes home. Next day he decides a few changes in the 3D scene are
necessary. If the tool doesn't offer persistency for Virtual
Universes then the user must either start it all over again or
modify the source code of the applet. I wouldn&#146;t like to be
in his place. Unfortunately, the classes of Java 3D aren't
serializable, so you may not use a technique like that used by
BeanBox. (BeanBox can serialize JavaBeans for later modifications
of their interrelations, and generates source code for applets,
which may be inserted in Web pages.) In a future version, the
Java 3D classes might be serializable.</p>

<p>The success of a 3D API can be assured by the game market.
Games like Quake use Binary Space Partitioning Trees and data
structures like Potentially Visible Sets. For each leaf of the
BSP-tree, a list of potentially visible leafs (a PVS) is
precalculated. The PVSs are coded at bit-level and they use RLE
compression. Java 3D doesn't offer any support for something like
this, and traversing these data structures using Java code will
be very slow. The same thing is true for Artificial Intelligence,
which must be incorporated in Behavior nodes. Moreover, the large
files that define the levels and the textures make the download
of complex games very difficult. However, if somebody releases an
API for games layered on top of Java 3D then creative people
could make great things.</p>

<p>Java 3D is designed for real-time animations so it shouldn't
be a surprise that there is no support for printing and
off-screen rendering. These would be necessary especially for
rendering of photo-realistic images, which is not the case.</p>

<p>&nbsp;</p>

<h3>Conclusion</h3>

<p>Sun succeeded with Java 1.0 where many failed: AWT abstracted
the APIs for User Interface of the widely used operating systems.
With JavaBeans from Java 1.1, Sun gave a multi-platform model for
software components. The history is repeating itself. Java 3D,
which is an extension of Java 1.2 is layering over the mostly
spread 3D APIs to bring same 3D graphics everywhere. I'm
wondering: What will be in Java 1.3?</p>

<p>&nbsp;</p>

<h3>Resources</h3>

<p>Java 3D Home Page<br>
<a href="http://java.sun.com/products/java-media/3D/index.html"
target="resource">http://java.sun.com/products/java-media/3D/index.html</a></p>

<p>Download Java 3D 1.1 Software (Runtime and Samples)<br>
<a href="http://java.sun.com/jdc/earlyAccess/java3d.html"
target="resource">http://java.sun.com/jdc/earlyAccess/java3d.html</a></p>

<p>Java 3D API Specification (online)<br>
<a
href="http://java.sun.com/products/java-media/3D/forDevelopers/j3dguide/j3dTOC.doc.html"
target="resource">http://java.sun.com/products/java-media/3D/forDevelopers/j3dguide/j3dTOC.doc.html</a></p>

<p>Java 3D API Documentation (online)<br>
<a
href="http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/packages.html"
target="resource">http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/packages.html</a></p>

<p>Java 3D Programming Contest<br>
<a href="http://www.sun.com/desktop/java3d" target="resource">http://www.sun.com/desktop/java3d</a></p>

<p>Browser 3D Home Page (applet &amp; source code)<br>
<a
href="http://www.geocities.com/SiliconValley/Horizon/6481/Browser3d.html"
target="resource">http://www.geocities.com/SiliconValley/Horizon/6481/Browser3d.html</a></p>

<p>Quake Developer's Page<br>
<a href="http://www.gamers.org/dEngine/quake" target="resource">http://www.gamers.org/dEngine/quake</a></p>

<p>Java One Developer Conference<br>
<a href="http://java.sun.com/javaone" target="resource">http://java.sun.com/javaone</a></p>

<p>&nbsp;</p>

<hr>

<p><br>
The author of this page can be reached at <a
href="mailto:andcio@hotmail.com">andcio@hotmail.com</a>. <br>
<a href="index.html#top">Back to Java Developer's Page</a> (Visit
this page every month) <br>
URL:
http://www.geocities.com/SiliconValley/Horizon/6481/Java3D.html<br>
Last updated: December 30, 1998</p>

<hr>

<p align="center"><br>
This page hosted by <a href="/"><img src="/pictures/gc_icon.gif"
align="middle" border="0" width="88" height="31"></a> Get your
own <a href="/">Free Homepage</a> </p>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026499502" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001067&t=1026499502" ALT=1 WIDTH=1 HEIGHT=1>

