ID=E0251
URL=http://www.cs.princeton.edu/software/lcc/1.html
SIZE=7540
DATE=12/07/02
TIME=19:19:12
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<link HREF="mailto:drh@microsoft.com" REV="made" TITLE="David R. Hanson">
<title>1st Printing Errata: A Retargetable C Compiler</title>
</head>

<body>

<table border="1" width="100%"
style="background-color: rgb(255,255,0); font-family: Verdana, sans-serif; font-size: smaller"
cellpadding="0" cellspacing="0">
  <tr>
    <td width="100%"><a href="/" title="Princeton CS Home Page">Princeton CS</a> <img
    src="images/arrow.gif" alt="arrow.gif (116 bytes)" WIDTH="13" HEIGHT="9"> <a
    href="/software" title="Princeton CS Software">Software</a> <img src="images/arrow.gif"
    alt="arrow.gif (116 bytes)" WIDTH="13" HEIGHT="9"> <a href="/software/lcc/"
    title="lcc Home Page">lcc, A Retargetable C Compiler</a> <img src="images/arrow.gif"
    alt="arrow.gif (116 bytes)" WIDTH="13" HEIGHT="9"> 1st Printing Errata</td>
  </tr>
</table>

<h3><cite>A Retargetable C Compiler: Design and Implementation</cite><br>
Addison-Wesley, 1995, ISBN 0-8053-1670-1</h3>

<h2>First Printing Errata</h2>

<p>In the lists below, line +<i>n</i> and line -<i>n</i> refer to the <i>n</i>th line from
the top and bottom of the indicated page. Additional errors are listed in the errata for
the <a HREF="2.html#first">second printing</a>.</p>

<p>Page 2, line +18: missing `last'; the sentence should read `...the next link on the
last definition is omitted.'</p>

<p>Page 17, line -2: remove the semicolon.</p>

<p>Page 48, line -16: missing `by'; the sentence should read `..., the string returned by <tt>vtoa</tt>.'</p>

<p>Page 78, line +11: `19 functions' should be `18 functions.'</p>

<p>Page 79, line -7: `19 interface functions' should be `18 interface functions.'</p>

<p>Page 87, line -5: `zero' should be `one'; the sentence should read `It should be one if
the hardware leaves these operations to library routines.'</p>

<p>Page 88, line -2: missing `is'; the sentence should read `If <tt>left_to_right</tt> is
zero, ...'</p>

<p>Page 99, line -5: extraneous `it'; the sentence should read `..., which the back end
reads and translates to target code.'</p>

<p>Page 131, lines +9..+10: `+' operators should be `*'; the righthand sides of the last
two derivation steps should read</p>

<blockquote>
  <p><tt>a + b * c</tt> <i>Y</i><br>
  <tt>a + b * c</tt> <i>epsilon</i></p>
</blockquote>

<p>where <i>epsilon</i> denotes the lowercase Greek symbol by the same name.</p>

<p>Page 170, lines -6..-5: extraneous `used'; the sentence should read `... describes the
technique as it is used in <tt>lcc</tt>.'</p>

<p>Page 186, line +13: extraneous `to'; the sentence should read `... and lets <tt>call</tt>
do most of the work:'</p>

<p>Page 202, lines +4 and +8: <tt>retype</tt> should be <tt>cast</tt>.</p>

<p>Page 231, line +13: `where n &gt;= 4' should be `where n &gt;= 1.'</p>

<p>Page 256, line -4: the if statement should read </p>

<blockquote>
  <pre>if (istypename(t, tsym) &amp;&amp; type == 0
&amp;&amp; sign == 0 &amp;&amp; size == 0) {</pre>
</blockquote>

<p>Page 322, line +17: the if statement should read `<tt>if (forest &amp;&amp;
forest-&gt;syms[0])</tt>'.</p>

<p>Page 323, line +6, +15: insert `<tt>if (depth++ == 0) reset();</tt>' after line 6, and
insert `<tt>depth--;</tt>' after line 15. <tt>depth</tt> is a static integer declared in <tt>dag.c</tt>.</p>

<p>Page 323, line +16: Add the sentence `Exercise 12.15 explains the purpose of the static
integer <tt>depth</tt> and the call to <tt>reset</tt>.'</p>

<p>Page 342, line +12: the declaration should read</p>

<blockquote>
  <pre>int i;
unsigned k = cp-&gt;u.swtch.values[0];</pre>
</blockquote>

<p>Page 342, line +14..+15: the nested loops should read</p>

<blockquote>
  <pre>for (i = 0; i &lt; cp-&gt;u.swtch.size; i++, k++) {
   for ( ; k &lt; (unsigned)cp-&gt;u.swtch.values[i]; k++)</pre>
</blockquote>

<p>Page 351, line -1: Add exercise 12.15:</p>

<blockquote>
  <p>12.15<img SRC="images/dot_clear.gif" WIDTH="12">The code for &lt;<tt>AND</tt>&gt;
  begins by calling <tt>reset</tt> if <tt>depth</tt> is zero and incrementing <tt>depth</tt>,
  and this case ends by decrementing <tt>depth</tt>. The case for <tt>OR</tt> does the same.
  Thus, <tt>depth</tt> counts the number of nested <tt>AND</tt> or <tt>OR</tt> operators.
  The call to <tt>reset</tt> is needed for the same reason that it is needed in the case for
  <tt>COND</tt>, as explained on page 326. Show that without calling <tt>reset</tt>, <tt>lcc</tt>
  generates incorrect code for the assignment</p>
  <blockquote>
    <pre>x[i] = (n || (n=i), n);</pre>
  </blockquote>
  <p>Calling <tt>reset</tt> has no effect on the usual use of <tt>&amp;&amp;</tt> and <tt>||</tt>
  as illustrated in Figure 12.3; explain why.</p>
</blockquote>

<p>Page 371, line +3: `hexidecimal' should be `hexadecimal'.</p>

<p>Page 373, lines +15..+16: missing `it'; the sentence should read `..., so it emits one
BURM into each of ...'</p>

<p>Page 386, line +21: the code should read</p>

<blockquote>
  <pre>p-&gt;x.kids[0] = p-&gt;x.kids[1] = p-&gt;x.kids[2] = NULL;</pre>
</blockquote>

<p>Page 400, line +12: the if statement should read</p>

<blockquote>
  <pre>if (r != q-&gt;syms[RX] &amp;&amp; !q-&gt;syms[RX]-&gt;x.wildcard) {</pre>
</blockquote>

<p>Page 412, line +2: `unsigned integers' should be `integer registers'.</p>

<p>Page 422, line +18: the first line of the if statement should read</p>

<blockquote>
  <pre>if (ri != NULL &amp;&amp; ri-&gt;x.lastuse</pre>
</blockquote>

<p>Page 423, lines +13..+14: replace these lines with</p>

<blockquote>
  <pre>Symbol tmp;
Node p = r-&gt;x.lastuse;</pre>
</blockquote>

<p>Page 423, lines +23..+25: remove the extraneous braces.</p>

<p>Page 423, line -10: insert the assignment</p>

<blockquote>
  <pre>tmp = newtemp(AUTO, optype(p-&gt;op));</pre>
</blockquote>

<p>before the call to <tt>genspill</tt>. (The changes on page 423 were made to accommodate
an added <tt>assert(p)</tt>, which isn't shown in the book.)</p>

<p>Page 426, line -1: change the declaration to</p>

<blockquote>
  <pre>struct node x, *q = *pp;</pre>
</blockquote>

<p>Page 427, lines +6..+10: change these lines to</p>

<blockquote>
  <pre>if (k == n) {
*pp = p-&gt;x.kids[n];
	x = *p;
	(IR-&gt;x.target)(&amp;x);
}
return k + 1;
</pre>
</blockquote>

<p>Page 427, line -10: change `update.' to `update, and <tt>x</tt> confines the change to
the reload.'</p>

<p>Page 463, line -19: `code generator' should be `assembler'.</p>

<p>Page 512, line -4: this line should read</p>

<blockquote>
  <pre>rtarget(p-&gt;kids[1], 0, intreg[ESI]);</pre>
</blockquote>

<p>Page 534, line 7: change `<tt>research.att.com</tt>' to `<tt>ftp.cs.princeton.edu</tt>
in <tt>pub/lcc/contrib</tt>'.</p>

<p>Thanks to Nelson Beebe, Franklin Chen, Amnon Cohen, Russ Cox, Guy Laden, Jonathan Litt,
Paul Mattal, Scott Nicholas, Richard O'Keefe, Norman Ramsey, Duane Sand, Bernie Solomon,
and Gary Tyson for finding some of these errors.</p>

<hr>

<address>
  <a HREF="http://www.research.microsoft.com/~cwfraser/">Chris Fraser</a> / <a
  HREF="mailto:cwfraser@microsoft.com">cwfraser@microsoft.com</a><br>
  <a HREF="http://www.research.microsoft.com/~drh/">David Hanson</a> / <a
  HREF="mailto:drh@microsoft.com">drh@microsoft.com</a><br>
  $Revision: 1.6 $ $Date: 2001/07/13 22:52:35Z $ 
</address>
</body>
</html>
