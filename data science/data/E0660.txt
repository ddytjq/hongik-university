ID=E0660
URL=http://www.research.att.com/~bs/esc99.html
SIZE=11173
DATE=12/07/02
TIME=19:23:13
DATASET=C
HTML=<html>
<base href="http://www.research.att.com/~bs/esc99.html">
<head>
<title>Stroustrup: ESC99 Talk</title>
</head>
<body bgcolor="FFFBFB">
<center>
<h1>Standard C++ for Embedded Systems Programming</h1>
</center>
Here are the slides I used for my keynote at ESC'99 in Chicago, March 2 1999.
<hr>
<pre>
        	 Standard C++ for Embedded Systems Programming



			<a href="homepage.html">Bjarne Stroustrup</a>




			AT&T Labs

			Florham Park, NJ 07932, USA


			bs@research.att.com

			http://www.research.att.com/~bs
		
</pre>
<hr>
<pre>
Abstract:

To ease design, implementation, and maintenance of software, we want
to raise the level of abstraction in our code. What does Standard C++
offer to make this possible without loss of performance or predictability?
		
</pre>
<hr>
<pre>
Overview

	Philosophy, aims, fundamentals

		some numbers

	Classes

		inlining, assembler

	Abstract classes

	Memory management

	Templates

		containers		
</pre>
<hr>
<pre>
C++

	- is a better C

	- supports data abstraction

	- supports object-oriented programming

	- supports generic programming


(it is a ``a multi-paradigm language'')		
</pre>
<hr>
<pre>
Work at the highest level that you can afford

	- shorter source code

	- clearer source code

	- easier maintenance

	- better source-level tool support
		
</pre>
<hr>
<pre>
But what does "afford" mean?

	- run-time

	- storage overhead

	- predictability

	- development time

	- maintenance cost

	- tool support

	- programmer skill

	- ...
		
</pre>
<hr>
<pre>
C++ aims:

	efficiency *and* abstraction

		- not "efficiency *or* abstraction"

		- not "efficient if you limit yourself to C style"

		- not "if you use my experimental optimizer" 

		- now

			not "in a few years when magic happens"
		
</pre>
<hr>
<pre>
C++ has always been used for embedded applications:

	- device drivers

	- network layers

	- real time OSs

	- monitoring equipment

	- dash boards

	- welding robots (and other robots)

	- DSP

	- ...

		("always" == "from 1982 or so")
		
</pre>
<hr>
<pre>
Standard C++

	- ISO/IEC-14882 standard ratified 1998 

	- the result of a consensus process

		Canada, France, Germany, Japan, UK, US, ...

		AT&T, Borland, Ericsson, IBM, HP, Intel, MS
		Siemens, Sun, ...

		hundreds of individuals

	- serves the needs of diverse communities

		- eases cooperation / understanding

		- room for growth
	
		- wide support
		
</pre>
<hr>
<pre>
There is no substitute for

	- intelligence

	- experience

	- taste

	- hard work		
</pre>
<hr>
<pre>
Zero-overhead rule:

	``What you don't use, you don't pay for''

		or

	``There is no way of writing equivalent C code
	  that runs faster or generates smaller code''

		
</pre>
<hr>
<pre>
	- but does implementations meet it?


		- Classes (yes)

		- Virtual functions (yes)

		- Exceptions (can, rarely do)

			 expect 5% to 20% space and/or time overhead


		- templates (yes)

		- libraries (some do, some don't - know your libraries)		
</pre>
<hr>
<pre>
Crucial point: Function call

	C++			C

non-virtual member	function
	p->f(1) 1.72s           f(p,1)  1.67s
	p.f(1)  1.47s           f(&s,1) 1.67s

virtual fct		indirect fct
	p->g(1) 1.47s           g(&s,1) 1.46s
	x.g(1)  1.47s           g(p,1)  1.47s

static member		function
	X::h(1) 1.72s           h(1)    1.72s

inline fct		macro
	p->k(1) 0.66s           K(p,1)  0.67s
	x.k(1)  0.46s           K(&s,1) 0.46s

That's good enough for anyone who can live with C.
(implementations vary, check yours)
</pre>
Here is <a href="simple_timing.c">a simple program for timing calls</a>		
<hr>
<pre>

Concrete types:


	Examples:

	built-in types, complex, point, pairs, dates, disc locations,
	source code locations, BCD characters, error messages, lines,
	currency, nodes, links, timers, queues, devices, ...

		
</pre>
<hr>
<pre>

Concrete types:

	small heavily-used abstractions are very common

		design them carefully

		support them well

			- convenience

			- efficiency

	the mundane is statistically more important than the advanced

</pre>
<hr>
<pre>
The ideal candidate for a class:

	frequently used

		elegant interface matters

		efficiency matters

	represent concept that might be useful elsewhere

		in other programs
	
		on other systems

	simple interface

		many possible implementations
</pre>
<hr>
<pre>
Classes:


class queue {
public:
	put(message*);
	message* get();
	// ...
private:
	// representation
};


void filter(queue& in, queue& out)
{
	while (message* m = in.get()) {
		// do something
		put(m);
	}
}
</pre>
<hr>
<pre>
inline message* queue::get()
{
	if (no_of_elements() == 0) return underflow();
	// ...
	
}




representation available (=> run-time efficiency)

	- inlining
	- true local variables

no space overhead

layout compatibility when desired
</pre>
<hr>
<pre>
Inlining:

	In theory, compilers are better at inlining

	In reality, programmers can do better with "inline" declarations

		- better pipelining

		- more opportunities for optimizers

		- less code for simple functions


</pre>
<hr>
<pre>There are things you just can't do in a machine-independent way,

	specialized instructions (e.g. vector operations,
	I/O instructions, memory mapping instructions),

	so use assembler:


inine int isr_hot_flag()	// i960
{
	register unsigned tmp;
	asm("modpc 0, 0, %0" : "=r" (tmp));
	return tmp & 0x2000;
}


In emergencies, asm() can also be used for hand optimization
</pre>
<hr>
<pre>
Abstract classes for defining interfaces:


class Device {
	// no representation (=> typically no constructor)
public:
	virtual int open(int opt) =0;  // pure virtual
	virtual int close(int opt) =0;
	virtual int read(char* p, int n) =0;
	
	// ...

	virtual ~Device();             // virtual destructor
};
</pre>
<hr>
<pre>
Abstract classes:


representation unavailable to optimizers

	- usually allocate using new
	- use virtual functions
	- access through pointers and references

different representations can coexist

	- no recompilation of user code after representation change
</pre>
<hr>
<pre>Abstract classes allow many different implementations:


class Dev1 : public Device {
public:
	int open(int opt);
	int close(int opt);
	int read(char* p, int n);
	
	// ...
private:
	// representation
};


class Dev2 : public Device {
	// ...
};
</pre>
<hr>
<pre>
Polymorphic code even useful without dynamic memory allocation


Dev1 d1(args1);
Dev2 d2(args2);

void f(Device& d)
{
	char buf[max];
	int n = d.read(buf,max);
	// ...
};

void g()
{
	f(d1);
	f(d2);
}
</pre>
<hr>
<pre>
Free store

	some embedded systems can afford it, many can't

		- time

		- space

		- predictability

		- memory exhaustion

		- several memory types/pools (placement)


Automatic garbage collection possible where affordable:

	http://www.hpl.hp.com/personal/Hans_Boehm/gc

</pre>
<hr>
<pre>
Special-purpose memory allocation:


	new X;				// use default allocator
					// or class-specific allocator

	new(&buffer[3]) X;	// place X in buffer[3]

	new(Shared) X;		// allocated from Shared memory

</pre>
<hr>
<pre>
Exception handling;

	- uniform mechanism for signalling errors

	- reasonably simple

		try { ... } catch(some_error) { ... }

		throw some_error();

	- potentially efficient

	- not suitable for all embedded applications

		- can be disabled in most implementations

</pre>
<hr>
<pre>Predictability:

	basic operations perform in fixed time, except

		exception throw

		default free store allocation


Can programmers predict performance?

	yes, but not without

		- being experienced and careful and/or

		- using profilers

	(just like for *every* other language - including assembler)

</pre>
<hr>
<pre>Templates:

	Needed for efficient and typesafe containers.

	no run-time overhead

	static type safety

		- eliminates many casts

		- eliminates many macros

	memory overhead if carelessly used

</pre>
<hr>
<pre>
Templates:

	Almost every standard library facility is template based

		- stream i/o

		- strings

		- containers

		- algorithms

		- complex numbers

		- vectors with numeric operations

</pre>
<hr>
<pre>Containers:


template<class T> class vector {
        // ...
};


vector<complex> vc(10);

        
void h()
{
        // ...
        vc[3] = complex(7,3);
        vc[5] = vc[7];
        // ...
}

</pre>
<hr>
<pre>Standard library templates:

	Containers:

		list, vector, priority_queue, map, ...

	Algorithms:

		sort, binary_search, partial_sort
		find, find_if 
		copy, unique_copy
		for_each, transform
		accumulate
		...

Note: type safe (no casts), optimal run time,
	be careful about code replication

</pre>
<hr>
<pre>
Simple run-time efficiency test:


	read a lot of input,

		do a bit with each element,

		store each element in memory

	do a bit with the set of elements


I/O plus computation

	(if necessary, memory could be pre-allocated)

</pre>
<hr>
<pre>
	vector<double> buf;

	fstream fin(file,ios::in);

	double d;

	while(fin>>d) buf.push_back(d);	// read and store
	
	sort(buf.begin(),buf.end());

// ...

</pre>
<hr>
<pre>
Read, sort, and write floating-point numbers

		unoptimized			optimized

elements	C++	C	C/C++ ratio	C++	C	C/C++ ratio

500,000		3.5	6.1	1.74		2.5	5.1	2.04
5,000,000	38.4	172.6	4.49		27.4	126.6	4.62


(for details, see May issue of C and C++ Users' Journal)
</pre>
Here are
<a href="cuj_code.html">the programs used for those timings</a>
<hr>
<pre>
How could that be done?

	- templates for generality

	- clean, simple algorithms

	- inlining for efficiency



Does C++ always run this much faster than C?

	- of course not

		- implementations differ (library and language)

		- often there is no scope for major improvements

</pre>
<hr>
<pre>
You don't need "genius programmers" to use Standard C++

	- simple execution model

	- simple object model

	- choose techniques and language features to suit problem

		- no prize for using the largest number of features

	- use frameworks and foundation libraries as appropriate

		- much easier to use than to design/implement

</pre>
<hr>
<pre>
Weaknesses (that can be strengths)

	no standard

		-concurrency

		- persistence

		- large standard execution environment (e.g. OS services)

		- GUI

</pre>
<hr>
<pre>
Standard C++

	- well specified

		not proprietary (ISO, ANSI, ...)

		long-term stability (5 year revision cycle)

	- multiple implementations/suppliers

	- efficient

	- comprehensive

	- easier to learn than previous versions


For links, see http://www.research.att.com/~bs
</pre>
</body>
</html>


