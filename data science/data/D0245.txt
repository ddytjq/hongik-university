ID=D0245
URL=http://www.absolutejava.com/articles/preventing-multiples-instances-of-a-java-program-from-running-simultaneously.html
SIZE=23422
DATE=16/07/02
TIME=14:41:05
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML>
<HEAD><TITLE>Absolute Java - Preventing Multiple Instances of a Java Program from Running Simultaneously</TITLE>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=ISO-8859-1">
<LINK REL="stylesheet" HREF="../styles.css" TYPE="text/css">
</HEAD>
<BODY>
<p class="subtitle" style="margin-top:0px">Preventing Multiple Instances of a Java<br>
	Program from Running Simultaneously</p>
<div class="postSubtitle">There is no Java-provided mechanism to ensure only one instance of a Java
application is running at any one time. From the operating system's perspective,
a Java application is simply another process&#151;the fact that this process happens
to be a Java VM which in turn runs your Java application is entirely irrelevant to the operating system.
If you're running two instances of the same Java application, you're simply running two instances of the Java VM.</DIV>
<BR>
To ensure only one instance of your application is running at a time, you must
establish some communication mechanism whereby a running instance of the
application can inform other instances that they should not run. When an instance
of the application starts, it first checks some condition that indicates whether
or not another instance is already running.
<BR><BR>
A  simple way to accomplish this is with Java's file locking mechanism.
The idea here is pretty simple: We create a file  and acquire an exclusive lock on the file. The fact that the file is locked is a signal to other instances of the program that a previous instance is already executing. So long as the first instance maintains the file lock other instances do not run. The code here is pretty simple:
<BR>
<BR>


<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.io.*;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.nio.channels.*;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> OneInstance1 <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeKeyword'>throws</span> Exception <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>6</td>
		<td><pre>&nbsp;      FileLock lck <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> FileOutputStream<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"C:\\temp\\flagFile"</span><span class='codeSeparator'>)</span>.getChannel<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.tryLock<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td>
	</tr><tr><td class='lineNumber'><pre>7</td>
		<td><pre>&nbsp;      <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>lck <span class='codeOperatorLiteral'>==</span> <span class='codeKeyword'>null</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td>
	</tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"A previous instance is already running...."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>9</td>
		<td><pre>&nbsp;         System.exit<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span>;</td>
	</tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"This is the first instance of this program..."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;      <span class='codeComment'>// Do some work here.....</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// OneInstance1</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->



<p>As an aside, you should note that the file does not necessarily have to be locked for the <i><b>duration</b></i> of the program's execution. Just as Java's <code>synchronized</code> blocks are used to control access to code on a <i>thread by thread</i> basis, so too can file locking be used to control access to code on a <i>program by program</i> basis. A program, <code>P1</code>, for example, could acquire a lock on a file (or even a portion of a file). When a second program, <code>P2</code>, tries to acquire a lock on the same file it will not be able to until <code>P1</code> releases the lock.</p>
<p>

   <STRONG><U>An Alternative Approach</U></STRONG><BR>
An alternative to the above approach is to create a <CODE>java.net.ServerSocket</CODE>. When the program below starts,
it tries to create a <CODE>java.net.ServerSocket</CODE> on a predefined port
(port 1942, in this example). Because only one <CODE>ServerSocket</CODE> can listen
on a given port at any one time, any attempt by another application to listen
on the same port will generate a <CODE>java.net.BindException</CODE>.<BR>
	<BR>

   <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
   <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
</p>
<table cellspacing='0' class='codeTable'>
	<tr>
		<td class='lineNumber'><pre>1</td>
		<td><pre>&nbsp;<span class='codeKeyword'>import</span> java.io.*;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>2</td>
		<td><pre>&nbsp;<span class='codeKeyword'>import</span> java.net.*;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>3</td>
		<td><pre>&nbsp;&nbsp;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>4</td>
		<td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> OneInstance2<span class='codeSeparator'>{</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>5</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>private</span> <span class='codeKeyword'>static</span> ServerSocket listenerSocket;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>6</td>
		<td><pre>&nbsp;&nbsp;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>7</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>8</td>
		<td><pre>&nbsp;      <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>9</td>
		<td><pre>&nbsp;         listenerSocket <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> ServerSocket<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>1942</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>10</td>
		<td><pre>&nbsp;         <span class='codeComment'>// At this point, no other socket may listen on port 1942.</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>12</td>
		<td><pre>&nbsp;      <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>java.net.BindException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>13</td>
		<td><pre>&nbsp;         System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"A previous instance is already running....</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>14</td>
		<td><pre>&nbsp;         System.exit<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>15</td>
		<td><pre>&nbsp;      <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span><span class='codeKeyword'>final</span> IOException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span> <span class='codeComment'>// an unexpected exception occurred</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>16</td>
		<td><pre>&nbsp;         System.exit<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>17</td>
		<td><pre>&nbsp;      <span class='codeSeparator'>}</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>18</td>
		<td><pre>&nbsp;&nbsp;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>19</td>
		<td><pre>&nbsp;      <span class='codeComment'>// Do some work here.....</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>20</td>
		<td><pre>&nbsp;&nbsp;</td>
	</tr>
	<tr><td class='lineNumber'><pre>21</td>
		<td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>22</td>
		<td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// OneInstance2</span></td>
	</tr>
</table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->



<p><EM>OneInstance2</EM> does not rely on file locking. Instead, it relies on the fact that only one server socket can be opened on a port at one time. </p>
<p>If you have strong (technical) opinions as to which of the above two approaches is better, I would like to hear from you. Feel free to send your comments to <a href="mailto:absolutejava@absolutejava.com?subject=Multiple%20Instances%20Comments">absolutejava@absolutejava.com</a>.</p>
<DIV ALIGN="center">
   <P STYLE="font-size:9pt; font-family:verdana,arial,helvetica; color: black">
Copyright &copy; 1999-2002, Tony LaPaso<BR>
		All Rights Reserved.</P>
</DIV></BODY></HTML>
