ID=F0408
URL=http://vbtechniques.com/content.asp?a=co&cID=1092
SIZE=9497
DATE=09/07/2002
TIME=13:20:12
DATASET=Visual Basic
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>VB Techniques: Visual Basic 6 Win32 API Tutorial</title>
<style type="text/css" title="Techniques Style Sheet">
<!-- This is the toolbar at the top of the page -->
.headingbar {
	background-color : Black;
	color: White;
}
.headinglink {
	color : White;
	text-decoration : none;
	font-family : Tahoma, Arial, sans-serif;
	font-size : 8pt;
}

<!-- All standard text in the page gets this style -->
.text {
	color: Black;
	font-family: Tahoma, Arial, sans-serif;
	font-size: 10pt;
}

.text_grayed {
	color: Silver;
	font-family: Tahoma, Arial, sans-serif;
	font-size: 10pt;
}

.text_error {
	color: Red;
	font-family: Tahoma, Arial, sans-serif;
	font-size: 10pt;
}

<!-- The title on the page uses this style -->
.pageheading {
	color: #000080;
	font-family: Verdana, Arial, sans-serif;
	font-size: 16pt;
	font-weight: bold;
	
}
.subheading {
	color: #000080;
	font-family: Verdana, Arial, sans-serif;
	font-size: 12pt;
	font-weight: bold;
}
.copyright
{
    COLOR: #000000;
    TEXT-ALIGN: left;
    FONT-FAMILY: Tahoma, Arial, sans-serif;
    FONT-SIZE: 8pt
}

<!-- Prompts and boxes in forms use this style -->
.form {
	font-family: Arial, sans-serif;
	font-size: 8pt;
}
.tableheading {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	color: white;
	background-color: #000080;
	text-align : center;
}
.table {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	background-color: White;
}
.tableshaded {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	background-color: Silver;
}
.tabletoday {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	background-color: Silver;
}
PRE {
   padding-top: 10px;
   padding-bottom: 10px;
   padding-left: 10px;
   background-color: #EEEEEE;
}

</style>
<script language="JavaScript">
function onLink(L)
{
	if (L.style.color = 'White')
	{
	   L.style.color = 'Yellow';
		L.style.textDecoration = "underline";
	}
}
function offLink(L)
{
	if (L.style.color = 'Yellow')
	{
		L.style.color = 'White';
		L.style.textDecoration = "none";
	}
		
}
</script>
</head>
<body leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" bgcolor="#FFFFFF">
<table width=100% cellspacing=0 cellpadding=4 border=0>
<tr><td width="250" background="/images/stripe_vb.gif"><img src="/images/logo_vb.gif" valign="middle" width=250 height=80 border=0></td><td width="100%" background="/images/stripe_vb.gif"><a href="http://click.linksynergy.com/fs-bin/stat?id=0DYcYQoW7OM&subid=0"><IMG alt=icon border=0 hspace=50 vspace=10  width=468 height=60 src="http://ad.linksynergy.com/fs-bin/show?id=0DYcYQoW7OM&bids=+22117.10000191+22117.10000192+22117.10000196+27778+29496+29744+31083&gridnum=1&subid=0"></a></td></tr>
<tr><td colspan=2 class=headingbar bgcolor="#000000##"><span class=headinglink>
<a href="default.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Home</span></a>
&nbsp;&#8226;&nbsp;
<a href="search.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Search</span></a>
&nbsp;&#8226;&nbsp;
<a href="forum.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Forums</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=5"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Articles</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=8"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Interviews</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=9"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Links</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=6"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Reviews</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=28"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Tip Archive</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=34"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">VB 6.0 Toolkit</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=7"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Visual Basic 6.0 Bible</span></a>
&nbsp;&#8226;&nbsp;
<a href="about.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">About</span></a>
</td></tr>
<tr><td colspan=2 valign=top width="600">
<span class=subheading>Visual Basic 6 Win32 API Tutorial</span>
<span class=text><p>
<p><i>Written by Jason Bock<BR>
Published by Wrox Press</i></p></span>
<span class="subheading">
Table of Contents
</span>
<span class="text">
<ol>
	<li>API Fundamentals
	<li>API Pitfalls and the Encryption Program
	<li>Kernel32 Calls
	<li>User32 Calls
	<li>GDI32 Calls
	<li>API Calls Outside of Win32
	<li>Callbacks and the AddressOf Operator
	<li>COM Components
</ol>
<p>
The book also has these four appendices:</p>
<ol type="A">
	<li>Data Type Summary
	<li>Hungarian Notation
	<li>That Thing Called COM
	<li>Summary of API Declarations
</ol>
</span>
<span class="subheading">Our Review</span>
<span class="text">
<p>
Visual Basic is an ideal language for beginning and intermediate programmers, since it hides so much of the Windows internals from the developer. However, this has a downside, as well. Many of the helpful functions common to other Windows applications are not exposed through Visual Basic procedures or functions. Some of the functions are embedded into OCXs, such as the Common Dialog control; however, OCXs take more system resources, especially if they are used repeatedly. 
</p>
<p>
Jason Bock's book is designed to show you how to exploit the power of the Windows API to get to some of those functions can't use right from Visual Basic. The book also avoids trying to be a reference; instead, it shows you some of the key API calls and where to find more. 
</p>

<p>
The first chapter starts out with a good introduction to how API calls fit into the Windows architecture. There is a good explanation of how DLLs are loaded into VB as API calls are used. It also shows how to use the API viewer, an important tool in the war to find hidden features. He also covers the so-called "undocumented API calls" that Microsoft is always being accused of using to beat the competition. Well, they are undocumented, but they're not exactly secret. The author debunks this myth by showing how to find these calls. 
</p>
<p>
The next chapter goes through some of the traps of using API calls, including incorrect declarations and data types, using the correct buffer sizes, and more. This is a must-read for any new (or even experienced) programmers who don't use the API every day. Some of these traps will cause VB to crash and take your unsaved work along with it. </p>

<p>Chapter 3 covers the Kernel32 library, which is responsible for memory management, process control, multithreading, and file operations. The author has an excellent example of how to create an application that is able to manipulate files and encrypt them. The author also shows how, for speed alone, doing the same functions with native VB functions is actually faster. He does mention that the methods would need to be compared in more ways than just speed, but it is an interesting point that more of the API-only VB programmers could take to heart. Most of the file API calls are covered in this chapter; however, there isn't any coverage of the other types of functions in the Kernel32 library. It would have been nice to see some examples about threading or process control, since this question is a common one among VB programmers wanting to improve performance in their applications. 
</p>

<p>The next chapter covers User32.DLL, which is responsible for windows, menus, and controls. User32 is used extensively behind the scenes by Visual Basic to create the widgets you draw in the environment. There are some good examples that span the library's functions in this chapter. There is an example of how to manipulate the built-in TreeView control to provide backgrounds, font formatting, and so on. There is also a discussion of the MessageBox API call, which is similar to the MsgBox function in VB. He also shows how to add images to menus, which is another common question. 
</p>

<p>
Chapter 5 covers graphics calls in the GDI32 library. If you have heavy graphics in your application and aren't using DirectX, you will come to know and love these calls. This is really where the performance improvements are versus Visual Basic native calls. The author provides numerous examples of the performance increases, as well as how to do some useful things with these somewhat more obscure calls. 
</p>
<p>
Chapter 6 picks up a major topic left out by the other well-known API text on the market: API calls outside of the three libraries covered earlier. This is where you find the really cool stuff, but it's not documented anywhere except MSDN, and you have to know how to combine certain API calls to get the desired result. This chapter is probably the most useful in the whole book, since the examples are common ones that most developers could come up with a use for. For instance, there is an excellent example on how the Windows shell takes care of file operations. The chapter also covers multimedia functions and some other functions that provide system information. It would have been nice to see a more complete list, but the author does provide the clues as to where to find more. </p>
<p>
Chapters 7 and 8 go hand-in-hand in covering advanced operations such as callbacks and subclassing. These are features that can have disasterous (read: blue screen of death) results if done improperly. However, the author provides a good explanation of how to use these features to make your code easier to deploy, as in the examples provided about COM components. Subclassing allows you to make minor changes and preserve all of the original functionality without having to reimplement it all. 
</p>
</span>
<span class="subheading">The Bottom Line</span>
<span class="text">
<p>
If you've ever been stumped by the mysteries of the Windows API and all those functions you knew existed but could never find, this is a book for you. While it isn't good as a reference guide, beg, borrow, or steal a copy of the MSDN library and you have all the reference you need, especially when you  know how to find the information you need as an expert API programmer. 
</p>

</p>
<p class="text"><i>Written by Eric Smith on 5/28/1999</i></p>
<p><a href="http://www.amazon.com/exec/obidos/ASIN/1861002432/northstarcompute"><img src="/images/partner_amazon.gif" height=68 width=90 border=0 alt="Click to buy this book"></a>
</p>
<p class="text"><b>Categories</b></p>
<span class="text"><a href="http://vbtechniques.com/content.asp?a=ct&cID=242">VB Techniques Reviews, Book Reviews Category</a><br>
</span>
</span>
</td></tr></table>
<table width="100%" cellpadding=4><tr><td>
<br><br><br><hr noshade>
<span class=copyright>
Copyright &copy; 2002 by Northstar Computer Systems.<br>
Contact the <a href="mailto:editor@vbtechniques.com">webmaster</a> with any comments, questions or problems with the site.</span>
</td></tr></table>
</body></html>

