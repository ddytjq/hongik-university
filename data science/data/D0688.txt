ID=D0688
URL=http://www.geocities.com/lkp550/jscript/lesson7.htm
SIZE=5978
DATE=16/07/02
TIME=14:55:08
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<title>JavaScript - Lesson Seven</title>
</head>

<body background="jscriptbg.jpg">
<font face="arial" size=3>
<h1 align=center>Lesson Seven</h1>
<hr>

<p>Now that you know how to do decision making, let's figure out how to make this process repeat until we are done. This is called <b>looping</b>. Loop statements repeat until the specified condition becomes "true", or the program has found what the user selected.

<p>One way of achieving this is by the use of <b>while</b> statements. For example:<br>

<p><i>var count = 1;<br>
while (count <= 5) {<br>
 document.write(count);<br>
 ++count;<br>
}<br>
document.write("You have printed 5 numbers.");</i>

<p>The program above starts at 1 and prints the numbers 1 through 5, then informs the user that they have printed 5 numbers. Although this may be a simplistic version of how the <i>while</i> statement is used, any program that uses the <i>while</i> statement runs upon the same principle. You have a variable that you start with, condition it to a certain term, and print or run a program to operate until the condition meets the term. Once the program meets the term, you need a condition, such as the line <i>++count;</i>, to change the condition of the statement. If you leave this out, you will be stuck in what is called an <b>infinite loop</b>, or a loop that never ends. This means that if you leave out the counting increment, you will never see how many numbers you have printed because you will be printing the numbers from 1 to infinity.

<p>Another looping statement is the <b>do...while</b> statement. With the <i>do...while</i> statement, you run the program first, then test it against the condition. Consider the example:<br>

<p><i>var count = 1;<br>
do {<br>
 document.write(count);<br>
 ++count;<br>
} while (count <= 5);<br>
document.write("You have printed 5 numbers.");</i>

<p>You still get the same answer, however the program is processed differently.

<p>Along with these loops is the <b>for</b> loop. In this loop, it initializes an expression, evaluates a given condition, then executes the statements if the condition is <i>true</i>. If it's <i>false</i>, or becomes false during execution, the loop ends. If it remains in execution, the update statement increments by one. For example:<br>

<p><i>for (var count = 1; count <= 5; ++count) {<br>
 document.write(count);<br>
}<br>
document.write("You have printed 5 numbers.");</i>

<p>There is another looping statement that has a more simple function. It's called the <b>for...in</b> loop. This loop cuts the memory allocation space down considerably by using a common property to assign to an object. For example:<br>

<p><i>function Animal(type, sound, transport_mode) {<br>
 this.animal_type = type; // object property<br>
 this.animal_sound = sound; // object property<br>
 this.animal_transport_mode = transport_mode; // object property<br>
}<br>
livestock = new Animal("cow", "moo", "walk"); // instanitiate object<br>
<b>for</b> (prop <b>in</b> livestock) { // this for loop prints<br>
 document.writeln(livestock[prop]); // the names of the properties<br>
}</i>

<p>The loop takes the names of the properties and assigns them to the properties in the function. At the same time, it assigns an index to each property. This is similar to how to print an array, however, you cannot refer to these properties outside of the loop.

<p>Another way of assigning values to object properties is to use the <b>with</b> statement. <i>with</i> eliminates the need for repetition of certain words or phrases used in referencing the same object. To show what we mean, consider the program below:<br>

<p><i>function Animal(type, sound, transport_mode) {<br>
<b>with</b> (this) {<br>
 animal_type = type; // object property<br>
 animal_sound = sound; // object property<br>
 animal_transport_mode = transport_mode; // object property<br>
 }<br>
}<br>
livestock = new Animal("cow", "moo", "walk"); // instanitiate object<br>
<b>for</b> (prop <b>in</b> livestock) { // this for loop prints<br>
 document.writeln(livestock[prop]); // the names of the properties<br>
}</i>

<p>Now, you only have to type "this" once and the <i>with</i> statement adds "this" to each property. This also saves some memory when running the program. The less memory your program uses, the faster it will run. This is very important on the internet when you want people to see your web site. The quicker it loads, the more likely the chance that people stay at your site or come back to visit again.

<p><b><u>Question:</u></b> So you say that Java and JavaScript are so different. They're starting to look the same to me. What can you do with JavaScript that you'd have a hard time doing with Java?

<p><b><u>Answer:</u></b> I'm glad you asked. You can use JavaScript to control how your web page functions. To see how this is done, we will learn how to work with windows and frames.
<hr>
<center><a href="lesson6.htm">Lesson Six</a> | <a href="http://www.geocities.com/lkp550/JAVASCRIPT.htm">Home</a> | <a href="lesson8.htm">Lesson Eight</a><br>
<br>
<b>If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.</b></center>
</body>
</html>

<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026500287" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026500287" ALT=1 WIDTH=1 HEIGHT=1>

