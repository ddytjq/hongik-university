ID=E0157
URL=http://www.troubleshooters.com/codecorn/python/pptut.htm
SIZE=21236
DATE=12/07/02
TIME=19:18:06
DATASET=C
HTML=<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Steve Litt">
   <meta name="GENERATOR" content="Mozilla/4.5 [en] (Win98; U) [Netscape]">
   <meta name="Description" content="A basic tutorial on the Python computer language">
   <meta name="KeyWords" content="Python,python,PYTHON,programming,development,application development,programmer,developer,CGI,perl,Perl,PERL,linux,Linux,LINUX">
   <title>Python Patrol Tutorial</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000EE" vlink="#551A8B" alink="#FF0000">

<center>
<h2>
<a href="../../troubleshooters.htm">Troubleshooters.Com</a>, <a href="../index.htm">Code
Corner</a> and <a href="index.htm">Python Patrol</a> Present</h2></center>

<center><font color="#CC0000"><font size=+4>Python Patrol Tutorial</font></font>
<p>Copyright (C) 1999 by Steve Litt, All rights reserved. Material provided
as-is, use at your own risk.&nbsp;
<hr WIDTH="100%"></center>

<h1>
Python Basics</h1>

<h2>
Check that Python is Installed</h2>
Do this command:
<pre>python</pre>
You should see a message and prompt similar to this:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" >
<tr>
<td>
<pre>Python 1.5.1 (#1, Sep&nbsp; 3 1998, 22:51:17)&nbsp; [GCC 2.7.2.3] on linux-i386
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
>>></pre>
</td>
</tr>
</table>

<p>If that message does not appear, do what it takes to get python installed
and accessible.
<h2>
Hello World</h2>
Create a file called hello.py. It should look like this:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>print "Hello World"</pre>
</td>
</tr>
</table>

<p><b>Be absolutely sure not to have any spaces to the left of the word
"print"</b>. Python uses indentation sensitive syntax, and will fail if
there are any spaces or tabs to the left of the print statement.
<p>Run it with this command:
<pre>python hello.py</pre>
It should print the words "Hello World" to the screen. If it doesn't, make
sure python the file you made is called hello.py, it's in the current directory,
it contains the text shown in the box above, and contains no space before
the command.
<h2>
Make it an Executable</h2>
For many uses, including CGI, your program must be self-executing. First,
add a line to the top of the file telling the OS to run the program with
Python, and telling it where to find Python, as shown below:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre><b>#!/usr/bin/python
</b>print "Hello World"</pre>
</td>
</tr>
</table>

<p>The top line assumes that your Python executable is in /usr/bin. If
it's somewhere else, substitute that path.
<p>Now make the file executable with this command:
<pre>chmod a+x hello.py</pre>
Finally, run the command like this:
<pre>./hello.py</pre>
It should print the words "Hello World" to the screen. If not, troubleshoot.
<p>Notice that a semicolon is NOT required at the end of the line. Semicolons
are necessary ONLY to separate multiple commands on the same line. Otherwise,
the end of the line ends the command.
<h2>
Add a Variable</h2>
Insert code to add variable myname, and print it.
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
<b>myname = "Steve Litt"
</b>print "Hello World"
<b>print myname</b></pre>
</td>
</tr>
</table>

<p>This should print a line saying "Hello World", followed by a line saying
"Steve Litt" to the screen. If not, troubleshoot.
<p>Notice these things:
<ul>
<li>
It prints newlines automatically. If you wish to suppress the newline printing,
end the print line with a comma, in which case it prints an extra space
but no newline.</li>

<li>
To avoid the space at the end of the print, do string concatenation.</li>
</ul>

<h2>
Add Comments</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
<b>myname = "Steve Litt"
#This is a comment
#&nbsp;&nbsp; So is this
&nbsp;&nbsp; #And this is a comment
</b>print "Hello World"&nbsp; #This is an inline comment
<b>print myname</b></pre>
</td>
</tr>
</table>

<p>Note the following:
<ul>
<li>
Comments begin with a pound sign, hash symbol, #</li>

<li>
Comments alone on their own lines are not subject to indentation sensitive
syntax.</li>

<li>
Inline comments are preceeded to a pound sign, and are to the right of
an executable.</li>
</ul>

<h2>
Simple String Concatenation</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
longname = "Anderson"
print longname
longname = longname + "berg"
print longname</pre>
</td>
</tr>
</table>

<p>This program should print a line saying "Anderson", followed by another
line saying "Andersonberg". If not, troubleshoot.
<p>Python can do incredible things with strings, including all the regular
expression activities as seen in Perl. These will be presented later in
this tutorial.
<h2>
Create a Loop and Handle Indentation</h2>
Create a new file called loop.py, put the following text into it, and chmod
it executable. Run it as <tt>./loop.py</tt>.
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
ss = 1
while ss &lt; 10:
&nbsp;&nbsp; print "Inside loop, subscript is", ss
&nbsp;&nbsp; ss = ss + 1
print "Finished looping."</pre>
</td>
</tr>
</table>

<p>This should print out nine lines stating the subscript, and a final
line saying "Finished Looping". If anything goes wrong, make sure the while
statement ends with a colon and check your indentation.
<h3>
Test at Top</h3>
The while loop tests at the top, meaning the test var must be set before
entry to the loop to determine whether the loop will be entered at all.
Testing at the bottom can be simulated by incrementing at the top of the
loop, meaning the new value will be processed regardless of the results
of the test on the new value. Test at the bottom also can be accomplished
with break statements, as will be discussed later in this tutorial.
<h3>
Indentation Sensitive Syntax NOTE THIS</h3>
Python has no begin and end statements. In Python, program flow statements
(if, for, while) and subroutine definitions (def) end when indentation
returns to its previous level. Indentation errors will cause the program
to fail. Let's use the loop.py program as an illustration.
<p>Everything intended to be subservient to the while statement (in other
words, all the statements to be looped through), should be indented a uniform
amount to the right of the while statement. That indentation can be either
hard tabs, or (my preference), a certain amount of spaces. For the sake
of future maintainers of your code, use one or the other consistently.
<p>As a generality, whenever a Python statement ends in a colon (like the
while statement above), it's expected to have subservient statements, and
those subservient statements must be consistently indented relative the
statement with the colon.
<h3>
Advantages of Indation Sensitive Syntax</h3>
Those of us educated in the 1980's and 1990's couldn't help but notice
the contempt of our instructors for computer languages depending on indentation.
There were chuckling references to Cobol and RPG. We were taught that in
this brave new world of C, and all the following code would run:
<pre><b><font size=-1>if (i &lt; 10)
&nbsp; {
&nbsp; printf("Less than 10\n");
&nbsp; i = 20;
&nbsp; }</font></b></pre>

<pre><b><font size=-1>or</font></b></pre>

<pre><b><font size=-1>if (i &lt; 10)
{
&nbsp; printf("Less than 10\n");
&nbsp; i = 20;
}</font></b></pre>

<pre><b><font size=-1>or</font></b></pre>

<pre><b><font size=-1>if (i &lt; 10){
&nbsp; printf("Less than 10\n");
&nbsp; i = 20;
&nbsp; }</font></b></pre>

<pre><b><font size=-1>or</font></b></pre>

<pre><b><font size=-1>if (i &lt; 10){
&nbsp; printf("Less than 10\n");
&nbsp; i = 20;
}</font></b></pre>

<pre><b><font size=-1>or even</font></b></pre>

<pre><b><font size=-1>if (i &lt; 10)&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("Less than 10\n");
i = 20;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></b></pre>
Then we were urged to write readable code, even though the compiler would
accept almost anything. Without the compiler to catch indentation mistakes,
succeeding generations of maintenance programmers slowly made the code
unreadable. Not so with Python. The above if statement would be&nbsp; ultra
readable:
<pre><b><font size=-1>if (i &lt; 10):
&nbsp; printf("Less than 10\n")
&nbsp; i = 20</font></b></pre>
No bracket matching, no strange indentation -- everything in a block looks
like a block.
<p>I'm not saying indentation sensitive syntax is perfect. It can be maddening
to fail because of an extra space. But in these days of inadequate documentation,
the simplicity and self-documentation of Python syntax can be welcome.
<h2>
Insert an If Statement Inside the Loop</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
ss = 1
while ss &lt; 10:
&nbsp;&nbsp; if ss % 3 == 0:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "Inside loop, subscript is", ss,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "Divisible by three"
&nbsp;&nbsp; elif ss % 2 == 0:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "Inside loop, subscript is", ss,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "Divisible by two"
&nbsp;&nbsp; else:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "Inside loop, subscript is", ss,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "Divisible neither by three nor two"
&nbsp;&nbsp; ss = ss + 1
print "Finished looping."</pre>
</td>
</tr>
</table>

<p>This should put out the following:
<pre><b><font size=-1>Inside loop, subscript is 1 Divisible neither by three nor two
Inside loop, subscript is 2 Divisible by two
Inside loop, subscript is 3 Divisible by three
Inside loop, subscript is 4 Divisible by two
Inside loop, subscript is 5 Divisible neither by three nor two
Inside loop, subscript is 6 Divisible by three
Inside loop, subscript is 7 Divisible neither by three nor two
Inside loop, subscript is 8 Divisible by two
Inside loop, subscript is 9 Divisible by three
Finished looping.</font></b></pre>
If there are problems, troubleshoot. Pay special attention to indentation
and colons
<br>&nbsp;
<h3>
Note the following:</h3>

<ul>
<li>
<b>If statements</b> can be followed by any number of elif statements (else
if), and one else statement. If, elif and else all have colons, and statements
to all three are indented relative to the if, elif or else.</li>

<li>
Python's indentation and lack of block specifiers makes for much more readable
code.</li>
</ul>

<h2>
Use the Pass Statement</h2>
Occasionally&nbsp; you may want an empty if or else statement. Python cannot
accommodate an empty statement because it has no block enders like Pascal,
C, Java, etc. So Python gives us the pass statement, whose purpose is to
serve as an empty statement. Consider this:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
month = 3&nbsp;&nbsp;&nbsp; #var in if statement must have been declared
if month == 1:
&nbsp;&nbsp; pass
elif month &lt; 6:
&nbsp;&nbsp; print "early"
else:
&nbsp;&nbsp; print "late"</pre>
</td>
</tr>
</table>

<p>Here January does nothing, months Feb thru May print "early", and months
June thru December print "late". This is not a particularly good example,
but this is how the pass statement is used.
<h2>
Use the Break (but not the Continue) Statements</h2>
Break statements immediately leave the loop.Continue statements abandon
the remaining statements in the loop and skip back up to the test. Both
are violations of structured programming, which states a control structure
should have one exit point. Both are close cousins of the dreaded goto
statement (which Python doesn't have). Both can create very harsh maintenance
problems later. In this author's opinion, the continue statement does not
have enough value to be used ever. Better to work around its absense with
if statements.
<p>On the other hand, break statements can sometimes improve readability
and even maintainability. This is especially true when two different conditions
can stop the action. Create this break.py program, make it executable and
execute it. Note that the strategic placement of the break statement prevents
an extra comma after the last number. Note that the while 1 would go on
forever if not for the break statement.
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
ss = 1
while 1:
&nbsp;&nbsp; print ss,
&nbsp;&nbsp; if(ss == 9):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
&nbsp;&nbsp; print ",",
&nbsp;&nbsp; ss = ss + 1
print "."</pre>
</td>
</tr>
</table>

<p>The output of this program should be:
<pre>1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 .</pre>
If it isn't, troubleshoot.
<h1>
Lists</h1>

<h2>
Hello World</h2>
Create, make executable and run this hello.py:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = ["Winter","Spring","Summer","Fall"]
print seasons</pre>
</td>
</tr>
</table>
The output will be:
<pre>['Winter', 'Spring', 'Summer', 'Fall']</pre>
If not, troubleshoot.
<p>What you have done here is created a list. Lists are mutable (changable),
both in terms of changing individual members and in terms of adding, deleting
or rearranging members.
<br>&nbsp;
<h2>
Accessing List Members</h2>
Now run this program:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = ["Winter","Spring","Summer","Fall"]
print len(seasons)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #there are 4 seasons
print seasons[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #element 0, the 1st element
print seasons[2]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #element 1
print seasons[len(seasons)-1]&nbsp;&nbsp; #last element
print seasons[-1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #last element
print seasons[0:2]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #elements 0 and 1, (1st &amp; 2nd)
print seasons[1:3]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #elements 1 and 2
print seasons[1:9]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #1 thru last, overrange not error
print seasons[-1:9999]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #last element
print seasons[-1:len(seasons)]&nbsp; #last element
print seasons[-3:-2]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #3rd &amp;2nd to last elements


#&nbsp; print seasons[len(seasons)]&nbsp;&nbsp; would produce an error, as
#&nbsp;&nbsp;&nbsp;&nbsp; the last element is seasons[3].&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre>
</td>
</tr>
</table>

<ul>
<li>
len(listname) returns the number of elements in the list. Since the list
is zero based, the number of elements equals one plus the index of the
last number.</li>

<li>
listname[x] represents the xth member of the list, where the first member
is listname[0].</li>

<li>
listname[s:e] is called "slicing" the list, and represents a subset list,
of all listname elements with indexes s &lt;= x &lt; e. In other words,
starting with the s element of the original list, and containing all members
up to, but not including, the e member. Please remember all these subscripts
are zero based. If the ending number is too big, it simply delivers the
remainder of the list including and after element s.</li>

<li>
listname[-s:-e] is the a subset list starting with the member whose index
len(listname) - s, and ends BEFORE len(listname) - e.</li>

<li>
Other combinations are possible. Experiment.</li>

<li>
Accessing a single element beyond the upper limit produces an error.</li>
</ul>

<h2>
Looking Up List Members by Value</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = ["Winter","Spring","Summer","Fall"]
n = seasons.index("Summer")
print n
print seasons[n]</pre>
</td>
</tr>
</table>

<p>Use this with care. If the argument to index is not a value in the list,
the program fails to run. also, index pulls up only the first element with
that value. To be sure all such elements have been deleted, use listname.count(string)
to get a count of the number of times it appears, then run through a loop
to get them all. Note also that this prevents a non-occurring string from
bombing the program.
<h2>
Inserting List Members</h2>
Using the insert list method, members can be inserted anywhere in a list,
including the beginning or the end.
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = []
seasons.insert(len(seasons), "Spring") #append to empty list
seasons.insert(0, "Winter")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #insert at beginning of list
seasons.insert(len(seasons), "Fall")&nbsp;&nbsp; #append to end of list
print seasons
seasons.insert(2, "Summer")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #insert before seasons[2], "Fall"
print seasons</pre>
</td>
</tr>
</table>

<p>In this exercise, you inserted elements at the beginning, at the end,
and in the middle.
<h2>
Appending List Members</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = []
seasons.append("Winter")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #append element
print seasons
seasons = seasons + ["Spring", "Summer"]&nbsp; #append a list to a list
print seasons&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
seasons.append("Fall")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #append element
print seasons</pre>
</td>
</tr>
</table>

<p>In this exercise you used the append command to append elements, and
you used the plus (+) operator to append an entire list.
<h2>
Deleting a List Member</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = ["Winter","Spring","Summer","Fall"]
print seasons
del seasons[2]
print seasons
seasons = ["Winter","Spring","Summer","Fall"]
print seasons
del seasons[1:3]
print seasons</pre>
</td>
</tr>
</table>

<h2>
Add a For Loop</h2>

<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python
seasons = ["Winter","Spring","Summer","Fall"]
for x in seasons:
&nbsp;&nbsp; print x, "season."</pre>
</td>
</tr>
</table>

<p>The output here should be:
<pre>Winter season.
Spring season.
Summer season.
Fall season.</pre>

<h2>
Practical Exercise: A Data Generator</h2>
This code outputs 25 different names, with phony numbers, to stdout. This
can be used as test data for a program.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>#!/usr/bin/python

lastnames = ["Albright","Barclay","Chavez","Dugan","Eng"]
firstnames = ["Allen","Betty","Charles","Donna","Edward"]
empno = 1001
outstring = ""

for first in firstnames:
&nbsp;&nbsp; for last in lastnames:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "%04d,%s,%s" % (empno, last, first) #comma delimeted
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; empno = empno + 1</pre>
</td>
</tr>
</table>

<p>Note the following:
<ul>
<li>
Nested for loops</li>

<li>
Enhanced print statement very much like C's printf(). Note the use of the
percent sign between the format string and the list of args, and the fact
that the args are in parens.</li>

<li>
Slightly modified, this program is actually useful for producing test data.
It's 11 lines, counting blank lines.</li>

<li>
With a name per alphabet letter, and a list of middle names (another nest
in the loop), it can output 26*26*26 different names, for a total of 17,576
records.</li>
</ul>

<center>
<hr WIDTH="100%"></center>

<center>
<h2>
<a href="../../troubleshooters.htm">Troubleshooters.Com</a> *&nbsp; <a href="../index.htm">Code
Corner</a> * <a href="index.htm">Python Patrol</a> * <a href="../../linux/index.htm">Linux
Library</a></h2></center>

</body>
</html>

