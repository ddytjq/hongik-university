ID=E0859
URL=http://www.linuxdoc.org/HOWTO/PHP-HOWTO-12.html
SIZE=2934
DATE=12/07/02
TIME=19:25:08
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>PHP HOW-TO: Object Oriented Features - public, private, protected </TITLE>
 <LINK HREF="PHP-HOWTO-13.html" REL=next>
 <LINK HREF="PHP-HOWTO-11.html" REL=previous>
 <LINK HREF="PHP-HOWTO.html#toc12" REL=contents>
</HEAD>
<BODY>
<A HREF="PHP-HOWTO-13.html">Next</A>
<A HREF="PHP-HOWTO-11.html">Previous</A>
<A HREF="PHP-HOWTO.html#toc12">Contents</A>
<HR>
<H2><A NAME="oop"></A> <A NAME="s12">12. Object Oriented Features - public, private, protected </A></H2>

<P>PHP scripting language provides object oriented features through the 
<B>class</B> keyword.
Features like public, private and protected will be supported in the future
release (they are in TODO list). In the meantime, you can 
use the following coding conventions to 
distinguish between private, public and protected variables:
<OL>
<LI> All private variables and functions always start with underscore <B>"_"</B>
followed by lowercase letters 
like <B>var $_myvar;</B>
<P>
</LI>
<LI> All Protected variables and functions always start with <B>"_T"</B> followed 
by lowercase letters
like <B>var $_Tmyvar;</B>
<P>
</LI>
<LI> All Public variables and functions do not start with underscore "_"
like <B>var $myvar;</B>
<P>
</LI>
<LI> All variables and functions always start with lowercase letter (no uppercase) 
like <B>var $_myvar;</B> and NOT like <B>var $_Myvar;</B></LI>
</OL>
<P>
<HR>
<PRE>
class someabc {
        var $_conn;                     // Private variable
        var $_Tmyvar;                   // Protected variable
        var $connMYCONNECTION;          // Public variable
        var $connToDb;                  // Public variable
        var $myvar3;                    // Public variable
        var $myvarTHISTEST;             // Public variable

        function _foofunction() {}      // Private function
        function _Tfoofunction() {}     // Protected function
        function foofunction() {}       // Public function
}
</PRE>
<HR>
<P>The private, protected declarations provide the encapsulation and data-hiding.
But you must consider the following disadvantages of encapsulation:
<UL>
<LI> Encapsulation usually requires more code, hence it
sacrifices performance especially for scripting languages like PHP 
<P>
</LI>
<LI> Encapsulation requires lots of Set/Get methods for private/protected properties.
<P>
</LI>
<LI> Since encapsulation unneccessarily increases the code size, it is 
not recommended for scripting language like PHP.
<P>
</LI>
<LI> You can enforce a good degree of encapsulation by using the coding
convention suggested in this section.</LI>
</UL>
<P>
<P>
<P>
<HR>
<A HREF="PHP-HOWTO-13.html">Next</A>
<A HREF="PHP-HOWTO-11.html">Previous</A>
<A HREF="PHP-HOWTO.html#toc12">Contents</A>
</BODY>
</HTML>

