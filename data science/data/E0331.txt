ID=E0331
URL=http://www.rit.edu/~jpw9607/gne/html/classGNE_1_1ConnectionListener.html
SIZE=28208
DATE=12/07/02
TIME=19:19:57
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE::ConnectionListener class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE::ConnectionListener  Class Reference</h1>This is an abstract base class representing an interface to the <a class="el" href="classGNE_1_1Connection.html">Connection</a>, <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a>, and <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a> classes. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="ConnectionListener_8h-source.html">ConnectionListener.h</a>&gt;</code>
<p>
<p>Inheritance diagram for GNE::ConnectionListener::
<p><center><img src="classGNE_1_1ConnectionListener.gif" usemap="#GNE::ConnectionListener_map" border="0"></center>
<map name="GNE::ConnectionListener_map">
<area href="classGNE_1_1SyncConnection.html" alt="GNE::SyncConnection" shape="rect" coords="0,56,153,80">
</map>
<a href="classGNE_1_1ConnectionListener-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="a0" doxytag="GNE::ConnectionListener::~ConnectionListener"></a>
virtual&nbsp;</td><td valign=bottom><b>~ConnectionListener</b> ()</td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a1">onConnect</a> (<a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> &amp;conn)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Event triggered after there is a successful connection.</em> <a href="#a1">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a2">onConnectFailure</a> (const <a class="el" href="classGNE_1_1Error.html">Error</a> &amp;error)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Event triggered when a connection failed before or during the onConnect event.</em> <a href="#a2">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a3">onNewConn</a> (<a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> &amp;newConn)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Event triggered when a new connection has been negotiated and error checked.</em> <a href="#a3">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a4">onDisconnect</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>An event triggered when a socket is closing for any reason.</em> <a href="#a4">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a5">onExit</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This event is triggered when the remote end has gracefully closed the connection.</em> <a href="#a5">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a6">onError</a> (const <a class="el" href="classGNE_1_1Error.html">Error</a> &amp;error)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This event is triggered when a non-fatal error occurs in a connection that does not force the connection to close, for example an unknown packet encounted is an error, but the connection can still proceed.</em> <a href="#a6">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a7">onFailure</a> (const <a class="el" href="classGNE_1_1Error.html">Error</a> &amp;error)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This event is triggered when a fatal error occurs in a connection.</em> <a href="#a7">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a8">onReceive</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Event triggered when one or more packets have been recieved.</em> <a href="#a8">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#a9">onDoneWriting</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Event triggered when the write buffer was filled and is now empty.</em> <a href="#a9">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>ConnectionListener *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html#d0">getNullListener</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A <a class="el" href="classGNE_1_1Connection.html">Connection</a> must always have a non-NULL listener if it is to be used, but if you will only be using a <a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> for the whole time, there is no need to create your own listener.</em> <a href="#d0">More...</a><em></em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This is an abstract base class representing an interface to the <a class="el" href="classGNE_1_1Connection.html">Connection</a>, <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a>, and <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a> classes.
<p>
All of the events that those three classes generate are in this class, and classes listening to the events on these classes will inherit from this class.
<p>
Override the events you want to receive with this listener. The provided functions do nothing, so that event overloading is optional in all cases.
<p>
onConnect and onConnectFailure are generated only by <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a> and onNewConn is generated only by <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a>.
<p>
Note that there is only one event thread per <a class="el" href="classGNE_1_1Connection.html">Connection</a>, so one one event will be active at a time. Take this into consideration that you may not need to provide syncronization and mutexes. onNewConn or onConnect or onConnectFailure are guaranteed to be the first events from a connection, and won't be called multiple times. onDisconnect will always be the last called (except after onConnectFailure, where there never was a connection) and will only be called once. Since only one event can be active at a time, you will want to return quickly so other events can be processed.
<p>
<dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1ServerConnectionListener.html#b0">ServerConnectionListener::onListenFailure</a> </dl>
<p>
<hr><h2>Member Function Documentation</h2>
<a name="d0" doxytag="GNE::ConnectionListener::getNullListener"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> ConnectionListener * GNE::ConnectionListener::getNullListener </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
A <a class="el" href="classGNE_1_1Connection.html">Connection</a> must always have a non-NULL listener if it is to be used, but if you will only be using a <a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> for the whole time, there is no need to create your own listener.
<p>
This listener will ignore all events.     </td>
  </tr>
</table>
<a name="a1" doxytag="GNE::ConnectionListener::onConnect"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onConnect </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>conn</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Event triggered after there is a successful connection.
<p>
The connection process will not be considered complete until this function completes.
<p>
If an error occurs then the connection needs to be killed, so conn can throw its <a class="el" href="classGNE_1_1Error.html">Error</a> outside your function. Catch it if you need to clean up anything you were doing, but remember to rethrow it. If this is the case, onConnectFailure but not onDisconnect will be generated, so any needed cleanup needs to be done in your exception handler.
<p>
You can also choose to refuse a connection by throwing an <a class="el" href="classGNE_1_1Error.html">Error</a> with an error code of Error::ConnectionRefused, and will it will make the connection act as if an error just occured, so onListenFailure will be called and the above section of text still applies.
<p>
This event does not have the "non-blocking" requirement that most <a class="el" href="namespaceGNE.html">GNE</a> events have. Take as long as needed to establish a connection, such as transmitting initial game parameters or game state.
<p>
Note: Only <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a> generates this event. The <a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> is currently wrapped around a <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a>, and you should use <a class="el" href="classGNE_1_1SyncConnection.html#a2">SyncConnection::getConnection</a> to get the <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a>.<dl compact><dt><b>
Exceptions: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em><a class="el" href="classGNE_1_1Error.html">Error</a></em>&nbsp;</td><td>
 if an error occurs and the connection was not successful. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<a name="a2" doxytag="GNE::ConnectionListener::onConnectFailure"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onConnectFailure </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classGNE_1_1Error.html">Error</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>error</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Event triggered when a connection failed before or during the onConnect event.
<p>
After a connection failure, the connection is as if disconnect() was called, therefore you cannot reconnect this connection instance.
<p>
Note that for this case, the event onDisconnect IS NOT CALLED, since the <a class="el" href="classGNE_1_1Connection.html">Connection</a> was never in a connected state.
<p>
You won't be able to delete the connection from this function, like you can from onDisconnect because the connection process is still proceding, and one of your other threads is joining and/or waiting for the connection to complete. The proper way to destroy the connection is to delete it from another thread, probably the same thread that created and then detached or is joining on it once it learns the connection failed.
<p>
This function's purpose is to notify that thread if needed. If you are waiting for the connection to complete by using join in that other thread, you would probably not need to listen for this event (see the example exhello).
<p>
Note: Only <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a> generates this event. <dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1Connection.html#a9">Connection::disconnect</a>() </dl>    </td>
  </tr>
</table>
<a name="a4" doxytag="GNE::ConnectionListener::onDisconnect"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onDisconnect </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
An event triggered when a socket is closing for any reason.
<p>
This event is always called once and only once if a socket was connected. At the time this event is called, the sockets are disconnected, so you can't get stats or addresses from the connection.
<p>
The <a class="el" href="classGNE_1_1PacketStream.html">PacketStream</a> is still valid, and there still may be data in the queue for you to read, even if you pick up all data in the onReceive events, there can be incoming data between the last onReceive and onDisconnect which will be very possible espically in planned disconnects.
<p>
onDisconnect will always be the last event called on this listener, so you can destroy this object after onDisconnect is called. Before onDisconnect was called either onFailure or onExit were called if you did not terminate the connection yourself using <a class="el" href="classGNE_1_1Connection.html#a9">Connection::disconnect</a>.
<p>
onDisconnect is only called if onNewConn or onConnect totally completed. If the connection process fails before onNewConn or onConnect, the connect or listen fail events are generated. If an error occurs DURING onNewConn or onConnect, if any cleanup needs to be done, it needs to be done in the exception handler, and no other failure event will be generated. After onNewConn or onConnect completes, then and only then might a onDisconnect event be generated. <dl compact><dt><b>
See also: </b><dd>
~Connection() </dl>    </td>
  </tr>
</table>
<a name="a9" doxytag="GNE::ConnectionListener::onDoneWriting"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onDoneWriting </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Event triggered when the write buffer was filled and is now empty.
<p>
Note that this does not mean that data is immediately ready to be sent again -- there could still be a flow control delay.
<p>
This event must be "non-blocking" -- like most <a class="el" href="namespaceGNE.html">GNE</a> events -- as there is only a single event thread per connection. Therefore, no other events will be called until this function completes for this connection.     </td>
  </tr>
</table>
<a name="a6" doxytag="GNE::ConnectionListener::onError"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onError </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classGNE_1_1Error.html">Error</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>error</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This event is triggered when a non-fatal error occurs in a connection that does not force the connection to close, for example an unknown packet encounted is an error, but the connection can still proceed.
<p>
After this event is processed, connections resume normally. <a class="el" href="classGNE_1_1Connection.html#a9">Connection::disconnect</a>() may also be called at this point if you wish to terminate the connection anyways.
<p>
This event must be "non-blocking" -- like most <a class="el" href="namespaceGNE.html">GNE</a> events -- as there is only a single event thread per connection. Therefore, no other events will be called until this function completes for this connection.
<p>
<dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1ConnectionListener.html#a7">onFailure</a>() , disconnect() </dl>    </td>
  </tr>
</table>
<a name="a5" doxytag="GNE::ConnectionListener::onExit"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onExit </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This event is triggered when the remote end has gracefully closed the connection.
<p>
The connection will soon be disconnected and the next event you will receive is onDisconnect. The connection should be considered in an disconnected state.
<p>
This event must be "non-blocking" -- like most <a class="el" href="namespaceGNE.html">GNE</a> events -- as there is only a single event thread per connection. Therefore, no other events will be called until this function completes for this connection.     </td>
  </tr>
</table>
<a name="a7" doxytag="GNE::ConnectionListener::onFailure"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onFailure </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classGNE_1_1Error.html">Error</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>error</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This event is triggered when a fatal error occurs in a connection.
<p>
When a fatal error occurs, communications cannot contiune and the socket will be disconnected. An <a class="el" href="classGNE_1_1ConnectionListener.html#a4">onDisconnect</a>() event will occur immediately after this event completes. Most errors in <a class="el" href="namespaceGNE.html">GNE</a> are fatal.
<p>
This event must be "non-blocking" -- like most <a class="el" href="namespaceGNE.html">GNE</a> events -- as there is only a single event thread per connection. Therefore, no other events will be called until this function completes for this connection.
<p>
<dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1ConnectionListener.html#a6">onError</a>() </dl>    </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::ConnectionListener::onNewConn"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onNewConn </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>newConn</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Event triggered when a new connection has been negotiated and error checked.
<p>
This object is a newly allocated object created from your ServerConnectionCreator object, and this function will be the first time you code has "seen" this object, so you will have to register it into some internal list so you can interact with and delete it later.
<p>
If an error occurs then the connection needs to be killed, so conn can throw its <a class="el" href="classGNE_1_1Error.html">Error</a> outside your function. Catch it if you need to clean up anything you were doing, but remember to rethrow it. If this is the case, ServerConnectionListner::onListenFailure will be generated but not onDisconnect, so any needed cleanup needs to be done in your exception handler or in onListenFailure. See <a class="el" href="classGNE_1_1ServerConnection.html#b0">ServerConnection::run</a>() for an event generation summary. If an error occurs you need not worry about having to delete the <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a> or this object. onListenFailure should delete this <a class="el" href="classGNE_1_1ConnectionListener.html">ConnectionListener</a> as usual if this is needed, and <a class="el" href="namespaceGNE.html">GNE</a> will destroy the <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a> if onNewConn did not complete w/o errors.
<p>
You can also choose to refuse a connection by throwing an <a class="el" href="classGNE_1_1Error.html">Error</a> with an error code of Error::ConnectionRefused, and will it will make the connection act as if an error just occured, so onListenFailure will be called and the above section of text still applies.
<p>
Note: Only <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a> generates this function. The <a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> is currently wrapped around a <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a>, and you should use <a class="el" href="classGNE_1_1SyncConnection.html#a2">SyncConnection::getConnection</a> to get the <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a>.
<p>
If the connection failed before this event, though, the function <a class="el" href="classGNE_1_1ServerConnectionListener.html#b0">ServerConnectionListener::onListenFailure</a> instead of this function is called. If onNewConn succeeds, ServerConnectionListener::onListenSucess is called, and the connection process will be completed after that event completes.
<p>
This event does not have the "non-blocking" requirement that most <a class="el" href="namespaceGNE.html">GNE</a> events have. Take as long as needed to establish a connection, such as transmitting initial game parameters or game state.<dl compact><dt><b>
Exceptions: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em><a class="el" href="classGNE_1_1Error.html">Error</a></em>&nbsp;</td><td>
 if an error occurs and the connection was not successful. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<a name="a8" doxytag="GNE::ConnectionListener::onReceive"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::ConnectionListener::onReceive </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Event triggered when one or more packets have been recieved.
<p>
It is possible to get more packets while in this function, but if packets arrive during this event, it will be called again, so you don't have to make sure they have all been processed (there is no sure way to do that.).
<p>
This event must be "non-blocking" -- like most <a class="el" href="namespaceGNE.html">GNE</a> events -- as there is only a single event thread per connection. Therefore, no other events will be called until this function completes for this connection.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="ConnectionListener_8h-source.html">ConnectionListener.h</a><li>ConnectionListener.cpp</ul>
<hr><address><small>Generated on Fri Mar 8 03:03:22 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

