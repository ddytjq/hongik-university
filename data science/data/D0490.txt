ID=D0490
URL=http://www.geocities.com/lkp550/cpp/lesson2.htm
SIZE=6969
DATE=16/07/02
TIME=14:48:48
DATASET=Java
HTML=<html>
<head>
<title>C++ - Lesson 2</title>
</head>

<body background="binderbg.gif">
<table width=93% align=right><tr><td>
<font face="arial">
<center><h2><u>Lesson Two</u></h2></center>

<p>As you learned in the last lesson, it is good practice to assign values to objects when they are declared. To do this, we use the <b>=</b> equals sign, which stores a value to an object. For example:<br>

<br>
<tt>
int x = 64;<br>
float y = 33.1263;<br>
char z = 'Y';<br>
</tt><br>

are all versions of objects that have values assigned to them. If, in the instance of a float, there is no type specified, the float number would be truncated. So the value "33.1263" would end up being "33".

<p>The keyword <b>const</b> is used to identify objects that cannot be modified once they have an initial value. This tells the reader that the value won't change, it tells the user that they can't change the value, and it produces more efficient code. An example of the use of <i>const</i> would be <b>const float Pi = 3.1415;</b>.

<p>One way of making calculations and other assignments easier to use and more efficient is to compound them. If you had <b>i = i + 5;</b>, you could shorten it by typing <b>i += 5;</b>. You can append two strings, like <b>Date += Year;</b>. The compound operators are <b>+=, -=, *=, /=,</b> and <b>%=</b>.

<p>There are a couple of special operators. One being the <b>++</b> increments a value by 1. So, you have three ways of adding one to an object: x = 2 + 1, x += 1, and x++;. If you were to type <b>++i</b>, you'd be adding 1 to i before putting into an expression. <b>i++</b> means you put i into an expression before adding 1 to it.

<p>You can use the <b>string</b> library to manipulate strings of data. You add the library to your program by typing <b>#include < string ></b>. Then, you can create string objects such as <b>string Greeting = "Hello";</b>. There are some helpful manipulators for string objects. The code <b>int a = Greeting.size();</b> initializes a to 5 because the size of the "Hello" string is 5 characters in length. Another useful capability is <b>substr</b>. Consider the following:<br>

<br>
<tt>
string Date = "June 4, 2001";<br>
string Year = Date.substr(9, 4);<br>
</tt>

<p><b>Year</b> is now equal to "2001" because substr went to the 9th position and captured the next 4 characters. You can achieve a similar outcome by typing <b>string Year = Date.find("2001", 0);</b>, which searches for "2001" at the beginning of Date. Year now equals 9 because it found 2001 in the 9th position. Finally, you can use <b>getline()</b> to receive the text entered by the user. There are many other capabilities of <i>string</i>. Below is a table of others you can use:<br>

<table border=1 width=75% align=center>
<tr><th>Type</th><th>Definition</th></tr>

<tr><td align=center><tt>string::string()</tt></td><td align=center>Default constructor initializes to represent empty string.</td></tr>

<tr><td align=center><tt>string::string(const char s[])</tt></td><td align=center>Initializes an object to represent a copy of the null-terminated <b>char</b> array <i>s</i> representation of a string sequence.</td></tr>

<tr><td align=center><tt>size_type string::size() const</tt></td><td align=center>Returns the length of a string.</td></tr>

<tr><td align=center><tt>bool string::empty() const</tt></td><td align=center>Returns true if the string represents the empty string; otherwise,  it returns false.</td></tr>

<tr><td align=center><tt>const char* string::c_str() const</tt></td><td align=center>Returns pointer to initial element of <b>char</b> array whose elements are a copy of the string. Null character terminates copy.</td></tr>

<tr><td align=center><tt>const char* string::data() const</tt></td><td align=center>Returns pointer to initial element of <b>char</b> array whose elements are a copy of the string.</td></tr>

<tr><td align=center><tt>const_reference string::operator [](size_type i)</tt></td><td align=center>If <i>i</i> is less that <i>size()</i>, the function returns a reference to the <i>i</i>th character of the string; if equal, 0 is returned; else, behavior is undefined.</td></tr>
</table><br>

<p>Now that we have a generalized idea of what we can do with strings, let's apply them to the SimpleWindow class. <b>SimpleWindow</b> lets us create a window that's similar to the one we created with the Java applets. However, we don't need to do all the programming like in Java to view the window. The only thing we need to do is type:<br>

<br>
<tt>
SimpleWindow W;<br>
W.Open();
</tt>

<p>This will give you a window like the one you are viewing this tutorial in, only there will be no title, menu, location, or status bars. You will get just a plain window with nothing in the viewing area. We can change what is seen by changing the "SimpleWindow" line. To get a window with a title and a different size, we changed the line to this:<br>

<br>
<tt>
SimpleWindow W("My First Window", 8, 2);
</tt>

<p>This new line will give us a window that is 8 centimeters wide and 2 centimeters high with the title "My First Window". Now, we need to add something so that we know we're not learning how to create a window for no reason. Let's draw a rectangle. To show how we do this, here's the whole code below:<br>

<br>
<tt>
SimpleWindow W("A Blue Rectangle", 8, 4);<br>
W.Open();<br>
RectangleShape R(W, 4.0, 2.0, Blue, 3, 2);<br>
R.Draw();
</tt>

<p>Now we have an 8 by 4 centimeter window with a 3 by 2 centimeter blue rectangle that is 4 by 2 centimeters in from the top and left sides.

<p><b><u>Question:</u></b> Ok!! You just turned my brain into mental mush. There's this, that, and the-other-thing. When are you going to tell me about some actual programming?

<p><b><u>Answer:</u></b> I realize your frustration. I thought the same thing when I learned C++. Next we'll learn things that some of you already know. These are conditional and iterative constructs -- in short looping statements.
<hr>
<center><a href="lesson1.htm">Lesson One</a> | <a href="http://www.geocities.com/lkp550/CPP.htm">Home</a> | <a href="lesson3.htm">Lesson Three</a><br>
<br>
If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.

</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026499945" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026499945" ALT=1 WIDTH=1 HEIGHT=1>

