ID=E0021
URL=http://www.rit.edu/~jpw9607/gne/html/namespaceGNE.html
SIZE=52171
DATE=12/07/02
TIME=19:16:29
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE Namespace Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE Namespace Reference</h1>The namespace in which all of GNE resides in. 
<a href="#_details">More...</a>
<p>
<table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Compounds</h2></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Address.html">GNE::Address</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A wrapper class for the HawkNL NLaddress.</em> <a href="classGNE_1_1Address.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ClientConnection.html">GNE::ClientConnection</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class that can connect to a remote target.</em> <a href="classGNE_1_1ClientConnection.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ClientConnectionParams.html">GNE::ClientConnectionParams</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Simply just a class to temporarily hold connection parameters until the <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a> is connected, then it is useless.</em> <a href="classGNE_1_1ClientConnectionParams.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConditionVariable.html">GNE::ConditionVariable</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class for a conditional variable.</em> <a href="classGNE_1_1ConditionVariable.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Connection.html">GNE::Connection</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class resembling any type of connection to a remote computer.</em> <a href="classGNE_1_1Connection.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><b>GNE::Connection::Listener</b></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionEventGenerator.html">GNE::ConnectionEventGenerator</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class used internally by <a class="el" href="namespaceGNE.html">GNE</a> to generate the events in <a class="el" href="classGNE_1_1Connection.html">Connection</a>.</em> <a href="classGNE_1_1ConnectionEventGenerator.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ConnectionListener.html">GNE::ConnectionListener</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This is an abstract base class representing an interface to the <a class="el" href="classGNE_1_1Connection.html">Connection</a>, <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a>, and <a class="el" href="classGNE_1_1ServerConnection.html">ServerConnection</a> classes.</em> <a href="classGNE_1_1ConnectionListener.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>struct &nbsp;</td><td valign=bottom><a class="el" href="structGNE_1_1ConnectionStats.html">GNE::ConnectionStats</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A struct holding values returned by getStats.</em> <a href="structGNE_1_1ConnectionStats.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Counter.html">GNE::Counter</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>An implementation of a <a class="el" href="classGNE_1_1TimerCallback.html">TimerCallback</a> that provides a simple counter.</em> <a href="classGNE_1_1Counter.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html">GNE::CustomPacket</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Many times, espically during connection, you want to send some more "free-form" data that may or may not all be related and will only be sent once.</em> <a href="classGNE_1_1CustomPacket.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Error.html">GNE::Error</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This class resembles some sort of error in <a class="el" href="namespaceGNE.html">GNE</a>, with the ability to obtain a textual description of the error.</em> <a href="classGNE_1_1Error.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1EventThread.html">GNE::EventThread</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Each <a class="el" href="classGNE_1_1Connection.html">Connection</a> has an <a class="el" href="classGNE_1_1EventThread.html">EventThread</a>.</em> <a href="classGNE_1_1EventThread.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ExitPacket.html">GNE::ExitPacket</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The <a class="el" href="classGNE_1_1ExitPacket.html">ExitPacket</a> is sent automatically by <a class="el" href="namespaceGNE.html">GNE</a> when you disconnect in a proper manner.</em> <a href="classGNE_1_1ExitPacket.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>struct &nbsp;</td><td valign=bottom><a class="el" href="structGNE_1_1ListServerConnection_1_1GameListData.html">GNE::ListServerConnection::GameListData</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Data about each game.</em> <a href="structGNE_1_1ListServerConnection_1_1GameListData.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>struct &nbsp;</td><td valign=bottom><b>GNE::GNEProtocolVersionNumber</b></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ListServerConnection.html">GNE::ListServerConnection</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A Client-side connection to a game list server for retriving a list of games.</em> <a href="classGNE_1_1ListServerConnection.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1LockMutex.html">GNE::LockMutex</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A small helper class for <a class="el" href="classGNE_1_1Mutex.html">Mutex</a> which locks the mutex in its ctor and unlocks it in its destructor.</em> <a href="classGNE_1_1LockMutex.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1LowLevelError.html">GNE::LowLevelError</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Adds low level HawkNL and possibly system error information to any other error.</em> <a href="classGNE_1_1LowLevelError.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Mutex.html">GNE::Mutex</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The mutex class models a simple mutex.</em> <a href="classGNE_1_1Mutex.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html">GNE::Packet</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The base packet class, used for dealing with all types of packets at a fundamental level.</em> <a href="classGNE_1_1Packet.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PacketStream.html">GNE::PacketStream</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This class resembles a packet stream through a connection.</em> <a href="classGNE_1_1PacketStream.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PacketTypeMismatch.html">GNE::PacketTypeMismatch</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>An error thrown by <a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a> when you get a packet other than the one you are trying to receive.</em> <a href="classGNE_1_1PacketTypeMismatch.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html">GNE::PingPacket</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Using the <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> is one way to measure ping.</em> <a href="classGNE_1_1PingPacket.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ProtocolViolation.html">GNE::ProtocolViolation</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>An error that occurs during the connection process if the remote machine sends incorrect or corrupted packets to us.</em> <a href="classGNE_1_1ProtocolViolation.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RateAdjustPacket.html">GNE::RateAdjustPacket</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The <a class="el" href="classGNE_1_1RateAdjustPacket.html">RateAdjustPacket</a> is sent automatically by <a class="el" href="namespaceGNE.html">GNE</a> when you change rates in the <a class="el" href="classGNE_1_1PacketStream.html">PacketStream</a>.</em> <a href="classGNE_1_1RateAdjustPacket.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html">GNE::RawPacket</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A utility class for creating a raw block of data that is used to directly send data through the socket, and on the other side, parse it into system-dependant data.</em> <a href="classGNE_1_1RawPacket.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ReceiveEventListener.html">GNE::ReceiveEventListener</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class to act as an interface between <a class="el" href="classGNE_1_1ConnectionEventGenerator.html">ConnectionEventGenerator</a> and its listeners.</em> <a href="classGNE_1_1ReceiveEventListener.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ServerConnection.html">GNE::ServerConnection</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A <a class="el" href="namespaceGNE.html">GNE</a> "internal" class.</em> <a href="classGNE_1_1ServerConnection.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ServerConnectionListener.html">GNE::ServerConnectionListener</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A connection that listens for other connections.</em> <a href="classGNE_1_1ServerConnectionListener.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1ServerConnectionParams.html">GNE::ServerConnectionParams</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Simply just a class to temporarily hold connection parameters until the <a class="el" href="classGNE_1_1ClientConnection.html">ClientConnection</a> is connected, then it is useless.</em> <a href="classGNE_1_1ServerConnectionParams.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><b>GNE::ServerConnectionListener::ServerListener</b></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1SocketPair.html">GNE::SocketPair</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class used to centralize shared elements between <a class="el" href="classGNE_1_1Connection.html">Connection</a> and <a class="el" href="classGNE_1_1SyncConnection.html">SyncConnection</a>.</em> <a href="classGNE_1_1SocketPair.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1SyncConnection.html">GNE::SyncConnection</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class for performing syncronous connections.</em> <a href="classGNE_1_1SyncConnection.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html">GNE::Thread</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class resembling a thread.</em> <a href="classGNE_1_1Thread.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Time.html">GNE::Time</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A class representing a time relative to a point in the past.</em> <a href="classGNE_1_1Time.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Timer.html">GNE::Timer</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The timer class is used to get the current time and to provide callbacks.</em> <a href="classGNE_1_1Timer.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1TimerCallback.html">GNE::TimerCallback</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A pure interface class for usage in the <a class="el" href="classGNE_1_1Timer.html">Timer</a> class.</em> <a href="classGNE_1_1TimerCallback.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1UserVersionMismatch.html">GNE::UserVersionMismatch</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>An error that occurs during the connecting process if the user versions are different.</em> <a href="classGNE_1_1UserVersionMismatch.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>class &nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1WrongGame.html">GNE::WrongGame</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>An error that represents a mismatch in the games during the connection process.</em> <a href="classGNE_1_1WrongGame.html#_details">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Typedefs</h2></td></tr>
<tr><td nowrap align=right valign=top>typedef signed char&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a20">gint8</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Typedefs for the variable types that are common to all GNE implementations (as defined in the GNE protocol document).</em> <a href="#a20">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a21" doxytag="GNE::guint8"></a>
typedef unsigned char&nbsp;</td><td valign=bottom><b>guint8</b></td></tr>
<tr><td nowrap align=right valign=top><a name="a22" doxytag="GNE::gbyte"></a>
typedef guint8&nbsp;</td><td valign=bottom><b>gbyte</b></td></tr>
<tr><td nowrap align=right valign=top><a name="a23" doxytag="GNE::gbool"></a>
typedef guint8&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a23">gbool</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A gbool is 'false' only when its value is 0, else it is 'true'.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a26" doxytag="GNE::gint16"></a>
typedef signed short&nbsp;</td><td valign=bottom><b>gint16</b></td></tr>
<tr><td nowrap align=right valign=top><a name="a27" doxytag="GNE::guint16"></a>
typedef unsigned short&nbsp;</td><td valign=bottom><b>guint16</b></td></tr>
<tr><td nowrap align=right valign=top><a name="a28" doxytag="GNE::gint32"></a>
typedef signed int&nbsp;</td><td valign=bottom><b>gint32</b></td></tr>
<tr><td nowrap align=right valign=top><a name="a29" doxytag="GNE::guint32"></a>
typedef unsigned int&nbsp;</td><td valign=bottom><b>guint32</b></td></tr>
<tr><td nowrap align=right valign=top><a name="a30" doxytag="GNE::gsingle"></a>
typedef float&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a30">gsingle</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A single precision 32-bit IEEE 754 floating point variable.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a31" doxytag="GNE::gdouble"></a>
typedef double&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a31">gdouble</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A double precision 64-bit IEEE 754 floating point variable.</em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Functions</h2></td></tr>
<tr><td nowrap align=right valign=top>bool&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a32">initGNE</a> (NLenum networkType, int(*atexit_ptr)(void(*func)(void)))</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Initalizes GNE and HawkNL.</em> <a href="#a32">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a33">shutdownGNE</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Shutsdown GNE and HawkNL.</em> <a href="#a33">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a class="el" href="classGNE_1_1Address.html">Address</a>&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a34">getLocalAddress</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Use this function to get the address of the default networking device on this system, if possible.</em> <a href="#a34">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a class="el" href="structGNE_1_1ConnectionStats.html">ConnectionStats</a>&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a35">getGlobalStats</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Gets the global stats.</em> <a href="#a35">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a36">enableStats</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Enables stats gathering, which is off by default.</em> <a href="#a36">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a37" doxytag="GNE::disableStats"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a37">disableStats</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Disables stats gathering, which is the default mode.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a38" doxytag="GNE::clearStats"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a38">clearStats</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Clears all global stats.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a39" doxytag="GNE::getOpenConnections"></a>
int&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a39">getOpenConnections</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the number of open low-level connections GNE has opened.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>GNEProtocolVersionNumber&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a40">getGNEProtocolVersion</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the GNE Protocol version number.</em> <a href="#a40">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a41" doxytag="GNE::getGameName"></a>
const char *&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a41">getGameName</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This function is used internally by GNE to get the name that you set in setGameInformation.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a42" doxytag="GNE::getUserVersion"></a>
guint32&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a42">getUserVersion</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This function is used internally by GNE to get the version that you set in setGameInformation.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a43">setGameInformation</a> (std::string gameName, guint32 version)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The user's game information.</em> <a href="#a43">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a44">checkVersions</a> (const GNEProtocolVersionNumber &amp;otherGNE, std::string otherName, guint32 otherUser)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Compares other versions against this library.</em> <a href="#a44">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>bool&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a46">initDebug</a> (int levelMask, const char *fileName=NULL)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Function to initalize debugging.</em> <a href="#a46">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a47">killDebug</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Function to deinitialize debugging.</em> <a href="#a47">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a48">doTrace</a> (int level, const char *fn, int lineno, const char *msg,...)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A function available in a debug compile that does trace logging to a file.</em> <a href="#a48">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Variables</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="a0" doxytag="GNE::MINLEN"></a>
const int&nbsp;</td><td valign=bottom><b>MINLEN</b> = 8</td></tr>
<tr><td nowrap align=right valign=top><a name="a1" doxytag="GNE::REFLEN"></a>
const int&nbsp;</td><td valign=bottom><b>REFLEN</b> = 44</td></tr>
<tr><td nowrap align=right valign=top><a name="a2" doxytag="GNE::CAPLEN"></a>
const int&nbsp;</td><td valign=bottom><b>CAPLEN</b> = 12</td></tr>
<tr><td nowrap align=right valign=top>const std::string&nbsp;</td><td valign=bottom><b>ErrorStrings</b> []</td></tr>
<tr><td nowrap align=right valign=top>const std::string&nbsp;</td><td valign=bottom><b>ViolationStrings</b> []</td></tr>
<tr><td nowrap align=right valign=top><a name="a5" doxytag="GNE::gameNameBuf"></a>
char&nbsp;</td><td valign=bottom><b>gameNameBuf</b> [32] = {0}</td></tr>
<tr><td nowrap align=right valign=top><a name="a6" doxytag="GNE::userVersion"></a>
guint32&nbsp;</td><td valign=bottom><b>userVersion</b> = 0</td></tr>
<tr><td nowrap align=right valign=top><a class="el" href="classGNE_1_1ConnectionEventGenerator.html">ConnectionEventGenerator</a> *&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a7">eGen</a> = NULL</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The global event generator.</em> <a href="#a7">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a9" doxytag="GNE::CRPLEN"></a>
const int&nbsp;</td><td valign=bottom><b>CRPLEN</b> = 48</td></tr>
<tr><td nowrap align=right valign=top><a name="a10" doxytag="GNE::MAX_GAME_NAME_LEN"></a>
const int&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a10">MAX_GAME_NAME_LEN</a> = 31</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The maximum number of ASCII characters in game name that is passed into the setGameInformation function.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a11" doxytag="GNE::VER"></a>
const double&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a11">VER</a> = 0.46</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A numeric representation of the current version of this library.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a12" doxytag="GNE::VER_STR"></a>
const std::string&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a12">VER_STR</a> = "GNE v0.46 alpha CVS"</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A string representation of the name of the library and the current version.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>const int&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a13">UDP_HEADER_SIZE</a> = 28</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The low-level header size of a UDP header, which is used with the HawkNL internet driver that GNE uses.</em> <a href="#a13">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>const NLenum&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a14">NO_NET</a> = 128</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Normally you would pass a network type to GNE::init, but passing this value means that no network should be initalized.</em> <a href="#a14">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a15" doxytag="GNE::DLEVEL1"></a>
const int&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a15">DLEVEL1</a> = 1</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Debugging level constants for the levelMask.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a16" doxytag="GNE::DLEVEL2"></a>
const int&nbsp;</td><td valign=bottom><b>DLEVEL2</b> = 2</td></tr>
<tr><td nowrap align=right valign=top><a name="a17" doxytag="GNE::DLEVEL3"></a>
const int&nbsp;</td><td valign=bottom><b>DLEVEL3</b> = 4</td></tr>
<tr><td nowrap align=right valign=top><a name="a18" doxytag="GNE::DLEVEL4"></a>
const int&nbsp;</td><td valign=bottom><b>DLEVEL4</b> = 8</td></tr>
<tr><td nowrap align=right valign=top><a name="a19" doxytag="GNE::DLEVEL5"></a>
const int&nbsp;</td><td valign=bottom><b>DLEVEL5</b> = 16</td></tr>
<tr><td nowrap align=right valign=top><a name="a24" doxytag="GNE::gTrue"></a>
const <a class="el" href="namespaceGNE.html#a23">gbool</a>&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a24">gTrue</a> = 1</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>One possible true value for a gbool.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a25" doxytag="GNE::gFalse"></a>
const <a class="el" href="namespaceGNE.html#a23">gbool</a>&nbsp;</td><td valign=bottom><a class="el" href="namespaceGNE.html#a25">gFalse</a> = 0</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The only false value for a gbool.</em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The namespace in which all of GNE resides in.
<p>
The namespace consists of a few global functions, some constants, classes, and the <a class="el" href="namespaceGNE_1_1Console.html">GNE::Console</a> namespace, which holds the console IO functions. 
<p>
<hr><h2>Typedef Documentation</h2>
<a name="a20" doxytag="GNE::gint8"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> typedef signed char GNE::gint8
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Typedefs for the variable types that are common to all GNE implementations (as defined in the GNE protocol document).
<p>
"u" type variables denote unsigned versions.     </td>
  </tr>
</table>
<hr><h2>Function Documentation</h2>
<a name="a44" doxytag="GNE::checkVersions"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::checkVersions </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const GNEProtocolVersionNumber &amp;&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>otherGNE</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>std::string&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>otherName</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>guint32&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>otherUser</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Compares other versions against this library.
<p>
This is used internally by GNE to compare versions. It checks the GNE version numbers first, then the game name, then the user versions.<dl compact><dt><b>
Exceptions: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em><a class="el" href="classGNE_1_1Error.html">Error</a></em>&nbsp;</td><td>
 if the GNE versions did not match. </td></tr>
<tr><td valign=top><em><a class="el" href="classGNE_1_1WrongGame.html">WrongGame</a></em>&nbsp;</td><td>
 if the game is of the wrong type. </td></tr>
<tr><td valign=top><em><a class="el" href="classGNE_1_1UserVersionMismatch.html">UserVersionMismatch</a></em>&nbsp;</td><td>
 if the user versions are different. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<a name="a48" doxytag="GNE::doTrace"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void doTrace </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>level</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>fn</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>lineno</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>msg</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>...&nbsp;</td>
          <td class="mdname" nowrap>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
A function available in a debug compile that does trace logging to a file.
<p>
This function is thread-safe. <dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>level</em>&nbsp;</td><td>
the "level" of detail for this trace statement, 1 being the most basic and should always be displayed. The higher you go, the more detailed the trace should get. This is so to allow debugging but not totally flood the logfile unless you need to get this detailed.<br>
 These general standards are followed:<br>
 1 - startup, shutdown, and explicit error messages.<br>
 2 - connection, disconnection, and other "normal" operation.<br>
 3 - average level. packet registration, socket registration<br>
 4 - events like onReceive and such, and some reporting.<br>
 5 - very low level -- thread creation, memory allocation. </td></tr>
<tr><td valign=top><em>fn</em>&nbsp;</td><td>
The file name this trace was called from </td></tr>
<tr><td valign=top><em>lineno</em>&nbsp;</td><td>
The line number in the file </td></tr>
<tr><td valign=top><em>msg</em>&nbsp;</td><td>
The message to display to the logfile, in printf style, followed by the data. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<a name="a36" doxytag="GNE::enableStats"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::enableStats </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Enables stats gathering, which is off by default.
<p>
When stats is not enabled, the get function's results is undefined.     </td>
  </tr>
</table>
<a name="a35" doxytag="GNE::getGlobalStats"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="structGNE_1_1ConnectionStats.html">ConnectionStats</a> GNE::getGlobalStats </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Gets the global stats.
<p>
Very similar to <a class="el" href="classGNE_1_1Connection.html#a5">Connection::getStats</a>, but this gets cumulative stats for all sockets, user-created ones and GNE ones too you may not know about.     </td>
  </tr>
</table>
<a name="a40" doxytag="GNE::getGNEProtocolVersion"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> GNEProtocolVersionNumber GNE::getGNEProtocolVersion </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the GNE Protocol version number.
<p>
This is different from the library version number. This number is specified by the GNE protocol document on the GNE web site. Versions of this library obtained from CVS might have the build number non-zero. Non-beta public releases of GNE will have a build number of zero and a version and subVersion number strictly defined by the GNE protocol specification. Public alpha or beta releases might have a non-zero build number.     </td>
  </tr>
</table>
<a name="a34" doxytag="GNE::getLocalAddress"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="classGNE_1_1Address.html">Address</a> GNE::getLocalAddress </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Use this function to get the address of the default networking device on this system, if possible.
<p>
The port in the resulting address will be zero. The returned address is invalid if an error occured.     </td>
  </tr>
</table>
<a name="a46" doxytag="GNE::initDebug"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> bool initDebug </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>levelMask</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>fileName</em> = NULL</td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Function to initalize debugging.
<p>
This is safe to call before initialization of GNE, but can be called at any time (but not multiple times). No debugging messages will be displayed until this function is called, and it is save to use the debugging macros and doTrace before calling this -- just nothing will be displayed. <dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>fileName</em>&nbsp;</td><td>
an optional fileName to log to. If you pass NULL for this parameter, then GNE will pick a temp file name that is safe for multiple instances. The filename will be based on time: gneHH'MM'SS.log </td></tr>
<tr><td valign=top><em>levelMask</em>&nbsp;</td><td>
sets just how detailed the trace is, and will display all messages that match this parameter. You should bitwise OR together the levels you want to see. </td></tr>
</table>
</dl><dl compact><dt><b>
Returns: </b><dd>
false on error </dl>    </td>
  </tr>
</table>
<a name="a32" doxytag="GNE::initGNE"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> bool GNE::initGNE </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">NLenum&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>networkType</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int(*&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>atexit_ptr</em>)(void(*func)(void))</td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initalizes GNE and HawkNL.
<p>
Call this before using any HawkNL or GNE functions. Pass it the atexit function so shutdown will be called on exit. A call to any other GNE function before this function succeeds is undefined. <dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>networkType</em>&nbsp;</td><td>
a HawkNL network driver, such as NL_IP or NL_IPX </td></tr>
</table>
</dl><dl compact><dt><b>
Returns: </b><dd>
true if GNE or HawkNL could not be initalized. </dl>    </td>
  </tr>
</table>
<a name="a47" doxytag="GNE::killDebug"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void killDebug </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Function to deinitialize debugging.
<p>
This will be called automatically on program exit, and the GNE user need not call it.     </td>
  </tr>
</table>
<a name="a43" doxytag="GNE::setGameInformation"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::setGameInformation </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::string&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>gameName</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>guint32&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>version</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The user's game information.
<p>
This information is used during the connection process to check if the versions and games match. This function should only be called once before making any connections.<dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>gameName</em>&nbsp;</td><td>
the name of your game, or any other unique string identifier in ASCII format with a length not exceeding MAX_GAME_NAME_LEN ASCII characters. </td></tr>
<tr><td valign=top><em>version</em>&nbsp;</td><td>
a 4-byte value with the current game version in any format. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<a name="a33" doxytag="GNE::shutdownGNE"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::shutdownGNE </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Shutsdown GNE and HawkNL.
<p>
This function should be called only after all connections are individually shutdown to properly deinitalize the library. However, this function is acceptable enough to be used on an "emergency" shutdown due to some error -- just don't try to call any other GNE or HawkNL function after calling this.
<p>
Note that it is possible that this function may block for a short time (500ms or less), while the event generators shut down.     </td>
  </tr>
</table>
<hr><h2>Variable Documentation</h2>
<a name="a7" doxytag="GNE::eGen"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="classGNE_1_1ConnectionEventGenerator.html">ConnectionEventGenerator</a> * GNE::eGen = NULL
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The global event generator.
<p>
The library uses this internally to register and unregister connections. The end-user will not have to use this object under any normal cirumstances.     </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::ErrorStrings"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const std::string GNE::ErrorStrings[]
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Initial value:</b><div class="fragment"><pre> {
  <font class="stringliteral">"No error."</font>,
  <font class="stringliteral">"The remote end did not follow the specifications of the GNE protocol."</font>,
  <font class="stringliteral">"The remote end uses an earlier version of the GNE protocol."</font>,
  <font class="stringliteral">"The remote end uses a later version of the GNE protocol."</font>,
  <font class="stringliteral">"The connecting game names differ."</font>,
  <font class="stringliteral">"The user protocol version numbers do not match."</font>,
  <font class="stringliteral">"Could not open a network socket."</font>,
  <font class="stringliteral">"Could not contact the host due to connection timeout."</font>,
  <font class="stringliteral">"The remote end decided to refuse your connection request."</font>,
  <font class="stringliteral">"Remote computer suddenly disconnected without warning, or dropped."</font>,
  <font class="stringliteral">"The operation was canceled because the SyncConnection is released."</font>,
  <font class="stringliteral">"The remote end sent a connection close notice."</font>,
  <font class="stringliteral">"Network error when trying to read from connection."</font>,
  <font class="stringliteral">"Network error when trying to write to connection."</font>,
  <font class="stringliteral">"Unknown packet type encountered or corrupted data received -- possible additional data loss."</font>,
  <font class="stringliteral">"Packet type received does not match next packet type expected."</font>,
  <font class="stringliteral">"Other GNE (not a low-level network) error."</font>,
  <font class="stringliteral">"Low-level HawkNL error:"</font>
}</pre></div>    </td>
  </tr>
</table>
<a name="a14" doxytag="GNE::NO_NET"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const NLenum GNE::NO_NET = 128
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Normally you would pass a network type to GNE::init, but passing this value means that no network should be initalized.
<p>
This is useful only in the example programs that don't use networking and do not need to initalize everything. <dl compact><dt><b>
See also: </b><dd>
<a class="el" href="namespaceGNE.html#a32">initGNE</a> </dl>    </td>
  </tr>
</table>
<a name="a13" doxytag="GNE::UDP_HEADER_SIZE"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const int GNE::UDP_HEADER_SIZE = 28
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The low-level header size of a UDP header, which is used with the HawkNL internet driver that GNE uses.
<p>
A number that I always have trouble finding and might be useful in getting stats or calculating actual bandwith.     </td>
  </tr>
</table>
<a name="a4" doxytag="GNE::ViolationStrings"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const std::string GNE::ViolationStrings[]
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Initial value:</b><div class="fragment"><pre> {
  <font class="stringliteral">""</font>,
  <font class="stringliteral">" Client sent an invalid request packet."</font>,
  <font class="stringliteral">" Server sent an invalid connection response packet."</font>,
  <font class="stringliteral">" Client sent an invalid or corrupted unreliable information packet."</font>
}</pre></div>    </td>
  </tr>
</table>
<hr><address><small>Generated on Fri Mar 8 03:03:22 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

