ID=F0802
URL=http://www.visualbasicbooks.com/advVB6samplepg14.html
SIZE=8080
DATE=09/07/2002
TIME=13:26:02
DATASET=Visual Basic
HTML=<html>

<head>



<meta name="description"
content="Visual Basic books for all levels of visual basic programmers are featured and reviewed regularly. Only those Visual Basic books of highest quality appear on this site.">
<meta name="keywords" content="visual basic books,visual basic,vb books,visual basic sites,programming,win32 api,database,beginner,amazon,bookstore">

<title>Visual Basic Books</title>
</head>

<body bgcolor="#6373B5" text="#616161" link="#0000ff" vlink="#666666" alink="#CC9900">
<center>
<!-- BEGIN RICH-MEDIA BURST! CODE --> 
       <script language="JavaScript"> 
       <!-- /* © 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
       var TheAdcode = 'ad5645a'; 
       var bN = navigator.appName; 
       var bV = parseInt(navigator.appVersion); 
       var base='http://www.burstnet.com/'; 
       var Tv=''; 
       var agt=navigator.userAgent.toLowerCase(); 
       if (bV>=4) 
         {ts=window.location.pathname+window.location.search; 
          i=0; Tv=0; while (i< ts.length) 
             { Tv=Tv+ts.charCodeAt(i); i=i+1; } Tv="/"+Tv;} 
         else   {Tv=escape(window.location.pathname); 
          if( Tv.charAt(0)!='/' ) Tv="/"+Tv; 
                 else if (Tv.charAt(1)=="/")
       Tv=""; 
         if( Tv.charAt(Tv.length-1) == "/") 
           Tv = Tv + "_";} 
       if (bN=='Netscape'){ 
            if ((bV>=4)&&(agt.indexOf("mac")==-1))
       {  document.write('<s'+'cript src="'+ 
             base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
             +Tv+'">'); 
            document.write('</'+'script>');    
       } 
            else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
               TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
               document.write('<img src="' + base + 'cgi-bin/ads/' + 
               TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
               ' border=0 alt="Click Here"></a>');} 
        } 
       if (bN=='Microsoft Internet Explorer') 
        document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
       + 
         TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
         'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
         'frameborder=0 scrolling=no></ifr'+'ame>'); 
       // --> 
       </script> 
       <noscript><a href="http://www.burstnet.com/ads/ad5645a-map.cgi" target=_top> 
       <img src="http://www.burstnet.com/cgi-bin/ads/ad5645a.cgi" 
        width=468 height=60 border=0 alt="Click Here"></a> 
       </noscript> 
       <!-- END BURST CODE --> 
</center>


<table border="0" bgcolor="" cellpadding="0" cellspacing="0">
<tr><td><p align="center"><img src="images/vblogo.jpg" border="0" alt="vb logo"></td></tr>
<tr> 
<td rowspan="3" valign="top" height="1"> <p>&nbsp;</p>

<p align="left"><font face= "verdana" color="#000000"><b>Visual Basic Books</b></font><br>
<a href="index.html"><font color="#ffffff">Home</font></a><br>
<a href="beginner.html"><font color="#ffffff">Visual Basic Beginner Books</font></a><br>
<a href="database.html"><font color="#ffffff">Visual Basic Database Books</font></a><br>
<a href="activex.html"><font color="#ffffff">Visual Basic ActiveX Books</font></a><br>
<a href="advanced.html"><font color="#ffffff">Visual Basic Advanced Books</font></a><br>
<a href="vbinternet.html"><font color="#ffffff">VB Internet Programming Books</font></a><br>


</p>
<p><font color="#000000" face="verdana"><b>Resources</b></font><br>
<a href="links.html"><font color="#FFFFFF">Visual Basic Links</font></a><br>
<a href="addlink.html"><font color="#FFFFFF">Add a Link</font></a><br>
<a href="esubscribe.html"><font color="#FFFFFF">Subscribe to Mailing List</font></a>

</p>

<p>


</font>


<td bgcolor="#ffffff" valign="middle"><h1 align="center"><img src="../images/anibook.gif" alt="" width="32" height="32"><font face="trebuchet ms, arial, helvetica" color="#000000"> Visual Basic Books </font><img src="../images/anibook.gif" alt="" width="32" height="32"></h1>

</td>






</tr><tr>
<td bgcolor="#ffffff" colspan="1" valign="top">



<table border="0" cellpadding="5"><tr><td>


<font  color="#000000" FACE="Verdana, Arial, Helvetica" SIZE="-1">

<center><H1> Advanced Microsoft Visual Basic 6 Chapter 1</h1></center>


<FONT FACE="Arial">
</B></FONT><P> Now consider what happens if we’re running as an EXE. Basically this means that the line <I>Debug.Assert InDesign </I>is missing from the routine. In this case, the only call made to our routine returns the state of <I>bRet—</I>False by default. If you’re worried about the clock cycles taken here (that as an EXE we increment an integer and then set it to zero again), don’t be—it’s fast! If you insist, however, you can wrap the routine so that it’s called just once, perhaps upon application start-up.</P>
<P>OK, why did I say that <I>Debug.Assert</I> was suboptimal? Normally assertions are used to implement what is known in the trade as a &quot;soft if.&quot; Consider this code:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>nFile = FreeFile</P></DIR>

</FONT><P>If <I>FreeFile</I> fails, what does <I>nFile</I> equal? Actually, like <I>Open</I>, <I>FreeFile</I> raises an exception to indicate failure (maybe it knows that return values can, and will, be ignored), but for the sake of argument let’s say <I>FreeFile</I> returns 0. To detect this, as you should if you’re building really critical applications that must cope with and recover from every possibility, expand the code to this:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>nFile = FreeFile<BR>
<BR>
If nFile &lt;&gt; 0 Then<BR>
    §<BR>
End If</P></DIR>

</FONT><P>Adding the conditional test and the indentation complicates the code. The execution time increases due to the branch, the evaluation of both the expressions on either side of the angle brackets, and of course the comparison itself. For all we know, we may never need this code—after all, what is the probability that <I>FreeFile</I> will fail in real life? To test this, sanitize the code, and make it more efficient, we would use a &quot;soft if&quot; conditional instead of a &quot;hard if&quot; conditional:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>nFile = FreeFile<BR>
<BR>
Assert nFile &lt;&gt; 0<BR>
<BR>
§</P></DIR>

</FONT><P>Here we’re asserting our belief that <I>FreeFile</I> will never return 0. (Note that we’ve lost the indentation.) Now we build the application and send it out to test. If the assertion fails, the probability that we’ve run out of file handles surely approaches 1, whereas if it doesn’t fail, the probability approaches 0. In this case, we can decide that the likelihood of failure is so remote that we can effectively ignore it. If the assertion never fails, we use conditional compilation to remove it and build the final EXE. In fact, we’d normally remove all assertions either by turning them into &quot;hard ifs&quot; or by removing them altogether. Never ship with assertions in your code. By the way, all of the previous was C-speak (for example, I’d do it this way in C or C++), and therein lies the rub. In Visual Basic you can’t do otherwise because <I>Debug.Assert</I> is removed for you whenever you build an EXE. &quot;Great,&quot; you say. &quot;So now I must never<I> </I>ship with assertions in my code?&quot; (I just said this practice was a good one, but only when you ship the final EXE.) &quot;How do I determine if an assertion failed during a test if it’s not even there?&quot; Aha—the plot thickens. Assertions in Visual Basic seem to be there solely for the developer and not the tester, meaning they work only in the IDE environment. In other words, suboptimal. That is, of course, unless you ship the source and IDE when you go out to beta!</P>
<P>Back to the story. By using <I>InDesign </I>we can, as mentioned earlier, do things a little differently at run time depending upon whether we’re running in the IDE. We at TMS usually store the result of a single call to <I>InDesign </I>in a property of the <I>App </I>object called <I>InDesign. </I>(We replace the real <I>App </I>object with our own—also called <I>App</I>—and set this property at application start-up.)</P>
<P>Another use of <I>App.InDesign </I>is to turn off your own error handling altogether. Now I know that Visual Basic allows you to Break On All Errors, but that’s rarely useful, especially if you implement delayed error handling. Instead, use <I>App.InDesign </I>to conditionally turn error handling on or off:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>If Not App.InDesign Then On Error GoTo ...</P></DIR>

</FONT><P>The reason for this is that one of the last things you want within the IDE is active error handlers. Imagine you’re hitting F8 and tracing through your code. I’m sure you know what happens next—you suddenly find yourself in an error handler. What you really want is for Visual Basic to issue a <I>Stop</I> for you on the erroring line (which it will do by default if you’re using the IDE and hit an error and don’t have an error handler active). The code above causes that to happen even when your error handling code has been added. Only if you’re running as an EXE will the error trap become enabled.</P>

<center><a href="advVB6samplepg15.html">next page....</a></center>

</td></tr></table></table><tr><td bgcolor="#991100"><center>
<font FACE="Verdana, Arial, Helvetica" SIZE="-1"><font color="#FFFFFF">Email us your comments:<a href="mailto:contact@vbbooks.freeservers.com"><img src="../images/emailed.gif"alt="mail" border=0></a><br>Fax: 1(916)404-7719<br>&copy;1999 Valassis Enterprises. All rights reserved.</font>

<P>
<!--Start of WSTR Block-->
<script language=JavaScript>id=1530</script>
<script language=JavaScript src="http://www.meixler-tech.com/wstr/js.cgi"></script>
<!--End of WSTR Block-->
</center>


</body>
</html>

