ID=D0616
URL=http://java.sun.com/docs/books/tutorial/javabeans/events/index.html
SIZE=13061
DATE=16/07/02
TIME=14:53:06
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>Manipulating Events in the BeanBox</title>
<script language="JavaScript">
<!-- hide
function openWin(term) {
  url="../../information/glossary.html#" + term;
  myWin= window.open(url, "Glossary",
              "width=400,height=150,scrollbars=yes,status=no,toolbar=no,menubar=no");
  myWin.focus();
}
//-->
</script>
</head>
<body BGCOLOR="#ffffff" LINK="#000099">
<B><FONT SIZE="-1">The Java</font><sup><font size="-2">TM</font></sup> <font size="-1">Tutorial</FONT></B>
<br>
<table width="550">
<tr>
<td align="left" valign="center">
<a href="../properties/index.html" target="_top"><img src="../../images/PreviousArrow.gif" width="26" height="26" align="center" border="0" alt="Previous Page"></a>
<a href="../TOC.html#events" target="_top"><img src="../../images/TOCIcon.gif" width="26" height="26" align="center" border="0" alt="Lesson Contents"></a>
<a href="../beaninfo/index.html" target="_top"><img src="../../images/NextArrow.gif" width="26" height="26" align="center" border="0" alt="Next Page"></a></td>

<td align="center" valign="center">
<font size="-1">
<a href="../../index.html" target="_top">Start of Tutorial</a>
&gt;
<a href="../index.html" target="_top">Start of Trail</a>
</font>
</td>

<td align="right" valign="center">
<font size="-1">
<a href="../../search.html" target="_top">Search</a>
<br><a href="../../forms/sendusmail.html">Feedback Form</a>
</font>
</td>

</tr>
</table>
<img src="../../images/blueline.gif" width="550" height="8" ALIGN="BOTTOM" NATURALSIZEFLAG="3">

<br>
<font size="-1">
<b>Trail</b>: JavaBeans(TM)
</font>

<h2>
Lesson: Manipulating Events in the BeanBox
</h2>
<blockquote>
<p>
<blockquote>
<hr>
You'll need a good understanding of the JDK 1.1 event
mechanism before reading this section. Here's the list
of recommended readings:
<ul>
  <li><a href= "../../uiswing/overview/event.html">Event Handling</a> 
  <li>Chapter 6 of the
      
<a target="other" href="http://java.sun.com/beans/spec.html"><font color="#009bbb">JavaBeans API Specification</font></a><a href="http://java.sun.com/beans/spec.html"><img src="../../images/otherIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(outside of the tutorial)"></a>   <li>Section 8.4, <i>Design Patterns for Events</i> of
      the JavaBeans API Specification.
</ul>
<hr></blockquote>

<p>
Beans use the new event mechanism implemented in JDK 1.1, so
implementing Bean events is the same as implementing
events in any JDK 1.1 component. This section describes
how this event mechanism is used by Beans and the
BeanBox.

</blockquote>
<h3>How the BeanBox Discovers a Beans Event Capabilities</h3>
<blockquote>
<p>
The BeanBox uses either design pattern introspection
or a <a href="../beaninfo/index.html">
<code>BeanInfo</code></a>
class to discover what events a Bean can fire.

<h3>Using Introspection to Discover the Events A Bean Fires</h3>
<p>
JavaBeans provides event-oriented design patterns
to give introspecting tools the ability to discover
what events a Bean can fire. 
For a Bean to be the source of an event, it must
implement methods that add and remove listener objects for
that type of event. The design patterns for
these methods are
<blockquote><pre>
public void add&lt;EventListenerType&gt;(&lt;EventListenerType&gt; a)
public void remove&lt;EventListenerType&gt;(&lt;EventListenerType&gt; a)
</pre></blockquote>
These methods let a source Bean know where to fire events.
The source Bean then fires events at those listener Beans using
the methods for those particular interfaces. For example,
if a source Bean registers <code>ActionListener</code> objects,
it will fire events at those objects by calling the
<code>actionPerformed</code> method on those listeners.

<p>
To see events discovered using design patterns, drop
an instance of <code>OurButton</code> into the BeanBox and
pull down the Edit|Events menu. This displays a list of
event interfaces to which <code>OurButton</code> can fire
events. Note that <code>OurButton</code> itself only adds
and removes two of these interfaces; the rest are 
inherited from the base class.


<h3>Using BeanInfo to Define the Events a Bean Fires</h3>
<p>
You can explicitly "publish" the events a Bean fires
by using a class that implements the <code>BeanInfo</code> interface.
The <code>ExplicitButton</code> demo Bean subclasses
<code>OurButton</code>, and provides an associated
<code>ExplicitButtonBeanInfo</code>
class. <code>ExplicitButtonBeanInfo</code> implements
the following method to explicitly define
interfaces to which <code>ExplicitButton</code> fires events.
<blockquote><pre>
public EventSetDescriptor[] getEventSetDescriptors() {
    try {
        EventSetDescriptor push = new EventSetDescriptor(beanClass,
                    "actionPerformed",
                    java.awt.event.ActionListener.class,
                    "actionPerformed");
 
        EventSetDescriptor changed = new EventSetDescriptor(beanClass,
                    "propertyChange",
                    java.beans.PropertyChangeListener.class,
                    "propertyChange");
 
        push.setDisplayName("button push");
        changed.setDisplayName("bound property change");
     
        EventSetDescriptor[] rv = { push, changed};
        return rv;
    } catch (IntrospectionException e) {
        throw new Error(e.toString());
    }
}
</pre></blockquote>
Drop an <code>ExplicitButton</code> instance in the BeanBox,
and pull down the Edit|Events menu. Notice that only those
interfaces explicitly exposed in the
<code>ExplicitButtonBeanInfo</code> class are listed. No
inherited capabilities are exposed.
See <a href="../beaninfo/index.html">The BeanInfo Interface</a>
section for more information on the <a>BeanInfo</a> interface.

<h3>Viewing a Bean's Events in the BeanBox</h3>
<p>
If you select an <code>OurButton</code> Bean
in the BeanBox, then pull down the Edit|Events menu,
you will see a list of interfaces that <code>OurButton</code>
can fire events at. Each interface item will, when selected,
display the methods that fire different events at those
interfaces. These correspond to all the events that
<code>OurButton</code> can fire.
</blockquote>







<h3>Hooking Up Events in the BeanBox</h3>
<blockquote>
<p>
In this example you will use two <code>OurButton</code>
Bean instances to stop and start an instance of the animated
<code>Juggler</code> Bean.
You will label the buttons "start" and "stop"; make the
start button, when pressed, invoke the <code>Juggler</code> Bean's 
<code>startJuggling</code> method;
and make the stop button, when pressed, invoke
the <code>Juggler</code> Bean's <code>stopJuggling</code> method.

<p>
<ol>
  <li>Start the BeanBox. 
  <li>Drop a <code>Juggler</code> Bean and two
      <code>OurButton</code> bean instances into the BeanBox.
  <li>Select an <code>OurButton</code> instance. In the Properties
      sheet, change the label property to "start". 
      Select the second <code>OurButton</code> instance and change
      its label to "stop".
  <li>Select the start button. Choose the
      Edit|Events|action|actionPerformed menu item.
      This causes a rubber band line to track between
      the start button and the cursor. Click on the
      <code>Juggler</code>
      instance. This brings up the
      <code>EventTargetDialog</code>:
<p><center><IMG SRC="../../figures/javabeans/eventTargetDialog.gif" WIDTH="300" HEIGHT="269" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT=""></center></p>      This list contains <code>Juggler</code> methods
      that take no arguments, or
      arguments of type <code>actionPerformed</code>.
  <li>Select the <code>startJuggling</code> method and press OK.
      You will see
      a message that the BeanBox is generating adapter classes.
  <li>Do the above two steps on the stop button, except choose
      the <code>stopJuggling</code> method in the
      <code>EventTargetDialog</code>.
</ol>

<p>
Clicking on the start and stop buttons will now start and
stop the <code>Juggler</code>. Here is a general description of what
happened:

<ul>
 <li>The start and stop buttons, are
     <i>event sources</i>. Event sources <i>fire events</i>
     at <i>event targets</i>. In this example the Juggler Bean is the
     event target.
 <li>When you select the start button and choose an event method
     (via the Edit|Event menu item), you are choosing the type of
     event the event source will fire.
 <li> When you connect the rubber band line to another Bean, you are 
      selecting the event target Bean.
 <li>The <code>EventTargetDialog</code>
     lists methods that can accept that type of event or that take no
     parameters.  When you choose a method in
     the <code>EventTargetDialog</code>, you are specifying the
     method that will receive the fired event, and act on it.
</ul>

<p>
Use the File|Save menu item to save this example to a
file of your choice.
</blockquote>

<h3>Event Adapter Classes</h3>
<blockquote>
<p>
The BeanBox generates an adapter class that interposes
between the event source and target. The adapter class
implements the appropriate event listener interface
(and so is the actual listener),
catches the event fired by the button, and then calls the
selected target Bean method. Here is the BeanBox-generated
adapter class that interposes between the start
button and the <code>JugglerBean</code>:

<blockquote><pre>
// Automatically generated event hookup file.

package tmp.sunw.beanbox;
import sunw.demo.juggler.Juggler;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ___Hookup_1474c0159e implements
           java.awt.event.ActionListener, java.io.Serializable {

    public void setTarget(sunw.demo.juggler.Juggler t) {
        target = t;
    }

    public void actionPerformed(java.awt.event.ActionEvent arg0) {
        target.startJuggling(arg0);
    }

    private sunw.demo.juggler.Juggler target;
}
</pre></blockquote>
<p>
The adapter implements the <code>ActionListener</code> interface
that you selected in the BeanBox's Edit|Events menu.
<code>ActionListener</code> declares one method,
<code>actionPerformed()</code>, which is implemented by the adapter
to call the target Bean method (<code>startJuggling()</code>)
that you selected. The adapter's <code>setTarget()</code> method
is called by the BeanBox to set the actual target Bean, in
this case <code>Juggler</code>. See section 6.7 of the
JavaBeans specification for a complete discussion of event
adapters.
</blockquote>


<h3>The EventMonitor Demo Bean</h3>
<blockquote>
<p>
The <code>EventMonitor</code> Bean
(<code>beans/demo/sunw/demo/encapsulatedEvents</code>) prints
out source Bean event reports, as they occur, in a scrolling listbox.
To see how this works, take the following steps:
<ol>
 <li>Drop <code>OurButton</code> and <code>EventMonitor</code>
     instances in the BeanBox. You might want to resize the
     <code>EventMonitor</code> (and the BeanBox) to accommodate
     viewing the event reports.
 <li>Select the <code>OurButton</code> instance, and choose any
     event method in the Edit|Events menu.
 <li>Connect the rubber band line to the <code>EventMonitor</code>,
     and choose its <code>initiateEventSourcMonitoring</code>
     in the <code>EventTargetDialog</code>.
 <li>Select the <code>OurButton</code> Bean. You will begin seeing
     event reports in the <code>EventMonitor</code>.
</ol>
When the first event is delivered, <code>EventMonitor</code>
analyzes the source Bean to discover all the events it fires,
creates and registers an event listener for each event type, and
then reports whenever any event is fired. This is useful
for debugging.
Try connecting other demo Beans to <code>EventMonitor</code>
to observer their events.

<p>

</blockquote>

<img src="../../images/blueline.gif" width="550" height="8" ALIGN="BOTTOM" NATURALSIZEFLAG="3">
<br>
<table width="550">
<tr>
<td align="left" valign="center">
<a href="../properties/index.html" target="_top"><img src="../../images/PreviousArrow.gif" width="26" height="26" align="center" border="0" alt="Previous Page"></a>
<a href="../TOC.html#events" target="_top"><img src="../../images/TOCIcon.gif" width="26" height="26" align="center" border="0" alt="Lesson Contents"></a>
<a href="../beaninfo/index.html" target="_top"><img src="../../images/NextArrow.gif" width="26" height="26" align="center" border="0" alt="Next Page"></a></td>

<td align="center" valign="center">
<font size="-1">
<a href="../../index.html" target="_top">Start of Tutorial</a>
&gt;
<a href="../index.html" target="_top">Start of Trail</a>
</font>
</td>

<td align="right" valign="center">
<font size="-1">
<a href="../../search.html" target="_top">Search</a>
<br><a href="../../forms/sendusmail.html">Feedback Form</a>
</font>
</td>

</tr>
</table>
<p>
<font size="-1">
<a href="../../information/copyright.html">Copyright</a>
1995-2002 Sun Microsystems, Inc.  All rights reserved.
</font>
</p>
</body>
</html>

