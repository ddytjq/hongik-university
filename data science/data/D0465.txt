ID=D0465
URL=http://www.jchq.net/tutorial/08_02Tut.htm
SIZE=17843
DATE=16/07/02
TIME=14:47:46
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
	<TITLE>4.6) Event Listeners</TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.2 (Linux)">
	<META NAME="CREATED" CONTENT="20010325;152000">
	<META NAME="CHANGEDBY" CONTENT="Marcus Green">
	<META NAME="CHANGED" CONTENT="20010325;161100">
</HEAD>

<link rel="stylesheet" href="tutor.css"></HEAD>
<BODY BGCOLOR="#ffffff">
<TABLE WIDTH=95% BORDER=0 CELLPADDING=2 CELLSPACING=0 STYLE="page-break-before: always">
	<COL WIDTH=147*>
	<COL WIDTH=109*>
	<TR>
		<TD WIDTH=57% HEIGHT=104>
			<P><A HREF="introj2.htm"><IMG SRC="images/btnIndex.jpg" NAME="Graphic1" ALT="Return to Tutorial Index" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A><A HREF="introj2.htm"><BR><BR></A><A HREF="../index.htm"><IMG SRC="images/btnHome.jpg" NAME="Graphic2" ALT="Back to the home page of this site" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A>
						</P>
		</TD>
		<TD WIDTH=43%>
			<P ALIGN=RIGHT><IMG SRC="images/hat.gif" NAME="Graphic3" ALT="morterboard" ALIGN=BOTTOM WIDTH=118 HEIGHT=113 BORDER=0></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=57% HEIGHT=11>
			<H1 ALIGN=LEFT>Java2 Certification <BR>Tutorial 
			</H1>
		</TD>
		<TD WIDTH=43% BGCOLOR="#ff9900">
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<P>You can discuss this topic with others at
<A HREF="http://www.jchq.net/discus">http://www.jchq.net/discus</A><BR>Read
reviews and buy a Java Certification book at
<A HREF="http://www.jchq.net/bookreviews/jcertbooks.htm">http://www.jchq.net/bookreviews/jcertbooks.htm</A>
</P>
<HR SIZE=5 NOSHADE>
<H1><B><FONT FACE="GENEVA, HELVETICA, ARIAL, LUCIDA SANS">8)The
java.awt package </FONT></B>
</H1>
<H3><FONT FACE="GENEVA, HELVETICA, ARIAL, LUCIDA SANS"><B>Objective
2)</B></FONT></H3>
<P>Write code to implement listener classes and methods and in
listener methods extract information from the event to determine the
affected component, mouse position nature and time of the event.
State the event classname for any specified event listener interface
in the java.awt.event package.</P>
<P><B>Note on this objective</B></P>
<P>This objective can seem quite a tall order as there are many
different graphical elements that generate different types of event.
Thus a mouse will create one sort of event whereas a frame opening or
closing will create an altogether different type of event. However
much of what is required is memorisation so part of the task is just
repetition untill you are familiar with the classes, interfaces and
event methods.s</P>
<H3><B><FONT FACE="GENEVA, HELVETICA, ARIAL, LUCIDA SANS">The
listener event model</FONT></B> 
</H3>
<P>To write any useful GUI applications with Java you need to
understand the listener classes and how to extract information from
the events they process. The Java event handling system changed
significantly between versions 1.0x and 1.1. In version 1.0x the
event handling code concept was a little like plain C code for
windows, i.e. fairly horrible. It required the creation of huge <I>case</I>
statements where you would put in code to process a particular event
according to parameters. This system is quite easy to understand for
trivial examples but does not scale well for larger programs. <BR><BR>I
get the impression that the only thing you need to know about the 1.1
exam for the 1.1 or Java2 exam is that the 1.1 approach is not
backwardly compatible. In theory, code written for the 1.0x style of
event handling should work OK in later versions of the JDK.</P>
<H3><B><FONT FACE="GENEVA, HELVETICA, ARIAL, LUCIDA SANS">The JDK 1.1
event model</FONT></B> 
</H3>
<P>The Java 1.1 system involves using listener classes that are
effectively &quot;attached&quot; to components to process specific
events. This lends itself well for GUI builders to generate event
handling code. If you examine the code generated by a GUI builders it
can seem a little opaque, partly because it tends to involve inner
classes created within methods. For the purpose of learning you can
treat the event handling classes as top level classes.<BR><BR>One of
the complicating factors for event handling is that it is based on
Interfaces but is easiest to use with a series of classes known as
the <I>Adapter</I> classes, that simply implement the event
Interfaces. When you use an interface you need to implement all of
its methods, thus direct use of the EventListener interface requires
the creation of blank bodies for any unused event handling methods.
By using the Adapter classes you only need to create the bodies of
event handling methods you actually use.</P>
<P>&nbsp; 
</P>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=13%>
			<P><IMG SRC="images/key2.gif" NAME="Graphic4" ALIGN=BOTTOM WIDTH=106 HEIGHT=73 BORDER=0></P>
		</TD>
		<TD WIDTH=87%>
			<H3><FONT COLOR="#ff0000">The adapter classes allow you to use the
			Listener Interfaces without having<BR>to create a body for every
			method.</FONT> 
			</H3>
		</TD>
	</TR>
</TABLE>
<P>One of the most essential events to handle for a stand alone
application is the simple ability to shut down an application in
response to choosing the <I>close</I> option from the system menu. It
may come as a surprise at first that this does not come as a default
with a Java AWT Frame. If you create an application that extends
Frame, but do not create code to handling closing, you will have to
either kill it from the task manager or go back to the command line
and hit control-c.</P>
<P>The equivalent <I>Swing</I> component to Frame, JFrame does
process closing as a default action, but the certification does not
cover the Swing components. As you must do this for the AWT Frame it
is a good place to start covering the subject of event handling</P>
<P>The methods for <I>WindowEvent</I> handling are not as intuitive
as some of the other Event methods. Thus it is not obvious at first
if you need to respond to</P>
<P><I>windowClosed or windowClosing</I></P>
<P>In fact it is the windowClosing method method that needs to be
processed. The simplest way to destroy the window is to use</P>
<PRE STYLE="margin-bottom: 0.2in">System.exit(0);</PRE><P>
Thus if you have an application with the main display of a frame you
can give it the ability to close itself by creating a class that sub
classes the WindowAdapter class and overrides the WindowClosing event
with a new version that simply has the line</P>
<P>System.exit(0);</P>
<P>as the body of that method.</P>
<P>Here is an example of a simple application that shows a Frame that
will respond by disappearing when you click the System/close menu
choice. I</P>
<PRE>import java.awt.event.*;  //Make event handling available
import java.awt.*;
public class ShutHello extends Frame{
public static void main(String argv[]){
        ShutHello h = new ShutHello();
    }

    ShutHello(){
        Button b = new Button(&quot;ShutHello&quot;);
        //Create a new instance of the WindowCloser class
        WindowCloser wc = new WindowCloser();
        //Attach that listener to this program
        addWindowListener(wc);
        this.add(b);
        setSize(300,300);
        setVisible(true);
    }
}

class WindowCloser extends WindowAdapter{
        //override one of the methods in the Adapter class
        public void windowClosing(WindowEvent e){
        System.exit(0);
        }
}</PRE><P>
The following example demonstrates how to use the interface classes
directly rather than using the Adapter classes that wrap them and
eliminate the need for blank method bodies.</P>
<P>The second half of the objective asks you to know the event class
name for any event listener interface. The following table lists all
of the Listener interfaces along with their methods. Do not be too
put off by the apparent number of Interfaces and methods as they fit
naturally into fairly intuitive groups based around things you would
expect to be able to do with GUI components.</P>
<P>Thus the <I>MouseListener</I> interface offers methods for</P>
<UL>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">clicked 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">pressed 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">released 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">entered 
	</P>
	<LI><P ALIGN=LEFT>exited 
	</P>
</UL>
<P><BR>If you compare this with event handlers in Visual Basic 5 the
only significant area not covered is a set of methods for handling
dragdrop events.</P>
<P>The name of the Event class passed to each method is fairly
intuitive and based on the name of the Listener class. Thus all of
the ActionListener methods take a parameter of ActionEvent, the
ComponentListener methods take a ComponentEvent type,
ContainerListener takes ComponentEvent etc etc etc.</P>
<P>There are 11 Listener Interfaces in all, but only 7 of them have
multiple methods. As the point of the adapters is to remove the need
to implement blank methods, Adapters classes are only implemented for
these 7 Interfaces.</P>
<P>These are as follows</P>
<UL>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">ComponentAdapter 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">ContainerAdapter 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">FocusAdapter 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">KeyAdapter 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">MouseAdapter 
	</P>
	<LI><P ALIGN=LEFT STYLE="margin-bottom: 0in">MouseMotionAdapter 
	</P>
	<LI><P ALIGN=LEFT>WindowAdapter 
	</P>
</UL>
<P ALIGN=LEFT>The following table shows the full list of Event
handling interfaces</P>
<P ALIGN=CENTER STYLE="margin-bottom: 0in"><BR>
</P>
<P ALIGN=CENTER STYLE="margin-bottom: 0in"><B>Event Handling
Interfaces</B></P>
<CENTER>
	<TABLE WIDTH=79% BORDER=1 CELLPADDING=0 CELLSPACING=0 BGCOLOR="#ffcccc">
		<TR VALIGN=TOP>
			<TD WIDTH=23% HEIGHT=21>
				<P><FONT SIZE=2>ActionListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>actionPerformed(ActionEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addActionListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23% HEIGHT=23>
				<P><FONT SIZE=2>AdjustmentListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>adjustmentValueChanged(AdjustmentEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addAdjustmentListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>ComponentListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>componentHidden(ComponentEvent)<BR>componentMoved(ComponentEvent)<BR>componentResized(ComponentEvent)<BR>componentShown(ComponentEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addComponentListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>ContainerListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>componentAdded(ContainerEvent)<BR>componetRemoved(ContainerEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addContainerListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>FocusListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>focusGained(FocusEvent)<BR>focusLost(FocusEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addFocusListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>ItemListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>itemStateChanged(ItemEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addItemListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>KeyListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>keyPressed(KeyEvent)<BR>keyReleased(KeyEvent)<BR>keyTyped(KeyEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addKeyListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>MouseListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>mouseClicked(MouseEvent)<BR>mouseEntered(MouseEvent)<BR>mouseExited(MouseEvent)<BR>mousePressed(MouseEvent)<BR>mouseReleased(MouseEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addMouseListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>MouseMotionListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>mouseDragged(MouseEvent)<BR>mouseMoved(MouseEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addMouseMotionListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>TextListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>textValueChanged(TextEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addTextListener()</FONT></P>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=23%>
				<P><FONT SIZE=2>WindowListener</FONT></P>
			</TD>
			<TD WIDTH=47%>
				<P><FONT SIZE=2>windowActivated(WindowEvent)<BR>windowClosed(WindowEvent)<BR>windowClosing(WindowEvent)<BR>windowDeactivated(WindowEvent)<BR>windowDeiconified(WindowEvent)<BR>windowIconified(WindowEvent)<BR>|windowOpened(WindowEvent)</FONT></P>
			</TD>
			<TD WIDTH=30%>
				<P><FONT SIZE=2>addWindowListener()</FONT></P>
			</TD>
		</TR>
	</TABLE>
</CENTER>
<HR>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=11%>
			<P><IMG SRC="images/Quiz.gif" NAME="Graphic5" ALIGN=BOTTOM WIDTH=99 HEIGHT=101 BORDER=0></P>
		</TD>
		<TD WIDTH=89%>
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<H1>Questions</H1>
<H3><B>Question 1)</B></H3>
<P>Which of the following statements are true?</P>
<P>1) For a given component events will be processed in the order
that the listeners were added<BR>2) Using the Adapter approach to
event handling means creating blank method bodies for all event
methods<BR>3) A component may have multiple listeners associated with
it<BR>4) Listeners may be removed once added</P>
<HR>
<H3><B>Question 2)</B> 
</H3>
<P>Which of the following are correct event handling methods?</P>
<P><BR>1) mousePressed(MouseEvent e){}<BR>2) MousePressed(MouseClick
e){}<BR>3) functionKey(KeyPress k){}<BR>4)
componentAdded(ContainerEvent e){}</P>
<HR>
<H3><B>Question 3)</B> 
</H3>
<P>What will happen when you attempt to compile and run the following
code?</P>
<PRE>import java.awt.*;
import java.awt.event.*;
public class MClick extends Frame implements MouseListener{
public static void main(String argv[]){
            MClick s = new MClick();
      }
       MClick(){
                this.addMouseListener(this);
        }
        public void mouseClicked(MouseEvent e){
                System.out.println(e.getWhen());
        }
}</PRE><P>
1) Compile time error<BR>2) Run time error<BR>3) Compile and at
runtime the date and time of each click will be output<BR>4) Compile
and at runtime a timestamp wil be output for each click</P>
<HR>
<H3><B>Question 4)</B> 
</H3>
<P>Which of the following statments are true about event handling?</P>
<P>1) The 1.1 Event model is fully backwardly compatible with the 1.0
event model<BR>2) Code written for the 1.0x Event handling will run
on 1.1 versions of the JVM<BR>3) The 1.1 Event model is particularly
suited for GUI building tools<BR>4) The dragDrop event handler was
added with the 1.1 version of event handling. 
</P>
<H1>Answers 
</H1>
<H3><B>Answer 1)</B></H3>
<P>3) A component may have multiple listeners associated with it<BR>4)
Listeners may be removed once added</P>
<H3><B>Answer 2)</B></H3>
<P>1) mousePressed(MouseEvent e){}<BR>4)
componentAdded(ContainerEvent e){}</P>
<H3><B>Answer 3)</B></H3>
<P>1) Compile time error<BR><BR>Because this code uses the Event
listener, bodies must be created for each method in the Listener.
<BR>This code will cause errors warning that MClick is an abstract
class.</P>
<H3><B><BR>Answer 4)</B></H3>
<P>2) Code written for the 1.0x Event handling will run on 1.1
versions of the JVM<BR>3) The 1.1 Event model is particularly suited
for GUI building tools<BR><B><BR><BR></B>Code written for the 1.1
event handling will not work with a 1.0x version of the JVM. I
invented the name <I>dragdrop</I> method.</P>
<P ALIGN=CENTER STYLE="margin-bottom: 0in"><B>Other sources on this
topic</B></P>
<TABLE WIDTH=100% BORDER=1 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=100% HEIGHT=160>
			<P><B>The Sun
			Tutorial<BR></B><A HREF="http://java.sun.com/docs/books/tutorial/uiswing/events/intro.html">http://java.sun.com/docs/books/tutorial/uiswing/events/intro.html<BR><BR></A><B>Richard
			Baldwin<BR></B><A HREF="http://www.Geocities.com/Athens/7077/Java080.htm#design goals of the jdk 1.1 delegation">http://www.Geocities.com/Athens/7077/Java080.htm#design
			goals of the jdk 1.1 delegation<BR></A><B><BR>Jyothi Krishnan on
			this topic at
			</B><A HREF="http://www.Geocities.com/Athens/7077/Java080.htm#design goals of the jdk 1.1 delegation"><BR></A><A HREF="http://www.geocities.com/SiliconValley/Network/3693/obj_sec8.html#obj25">http://www.geocities.com/SiliconValley/Network/3693/obj_sec8.html#obj25<BR><BR></A><B>David
			Reilly</B><A HREF="http://www.geocities.com/SiliconValley/Network/3693/obj_sec8.html#obj25"><BR>http://www.davidreilly.com/jcb/java107/java107.html</A></P>
		</TD>
	</TR>
</TABLE>
<P>Last updated<BR>24 Mar 2001<BR>copyright &copy; Marcus Green 2001</P>
<P>&nbsp;</P>
<H1>&nbsp;</H1>
<P>&nbsp;</P>
<P>&nbsp;</P>
</BODY>
</HTML>

