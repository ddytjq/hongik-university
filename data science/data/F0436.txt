ID=F0436
URL=http://vbtechniques.com/content.asp?a=co&cID=625
SIZE=9430
DATE=09/07/2002
TIME=13:20:32
DATASET=Visual Basic
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>VB Techniques: Linking a TreeView to a Database </title>
<style type="text/css" title="Techniques Style Sheet">
<!-- This is the toolbar at the top of the page -->
.headingbar {
	background-color : Black;
	color: White;
}
.headinglink {
	color : White;
	text-decoration : none;
	font-family : Tahoma, Arial, sans-serif;
	font-size : 8pt;
}

<!-- All standard text in the page gets this style -->
.text {
	color: Black;
	font-family: Tahoma, Arial, sans-serif;
	font-size: 10pt;
}

.text_grayed {
	color: Silver;
	font-family: Tahoma, Arial, sans-serif;
	font-size: 10pt;
}

.text_error {
	color: Red;
	font-family: Tahoma, Arial, sans-serif;
	font-size: 10pt;
}

<!-- The title on the page uses this style -->
.pageheading {
	color: #000080;
	font-family: Verdana, Arial, sans-serif;
	font-size: 16pt;
	font-weight: bold;
	
}
.subheading {
	color: #000080;
	font-family: Verdana, Arial, sans-serif;
	font-size: 12pt;
	font-weight: bold;
}
.copyright
{
    COLOR: #000000;
    TEXT-ALIGN: left;
    FONT-FAMILY: Tahoma, Arial, sans-serif;
    FONT-SIZE: 8pt
}

<!-- Prompts and boxes in forms use this style -->
.form {
	font-family: Arial, sans-serif;
	font-size: 8pt;
}
.tableheading {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	color: white;
	background-color: #000080;
	text-align : center;
}
.table {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	background-color: White;
}
.tableshaded {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	background-color: Silver;
}
.tabletoday {
	font-family: Arial, sans-serif;
	font-size: 8pt;
	background-color: Silver;
}
PRE {
   padding-top: 10px;
   padding-bottom: 10px;
   padding-left: 10px;
   background-color: #EEEEEE;
}

</style>
<script language="JavaScript">
function onLink(L)
{
	if (L.style.color = 'White')
	{
	   L.style.color = 'Yellow';
		L.style.textDecoration = "underline";
	}
}
function offLink(L)
{
	if (L.style.color = 'Yellow')
	{
		L.style.color = 'White';
		L.style.textDecoration = "none";
	}
		
}
</script>
</head>
<body leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" bgcolor="#FFFFFF">
<table width=100% cellspacing=0 cellpadding=4 border=0>
<tr><td width="250" background="/images/stripe_vb.gif"><img src="/images/logo_vb.gif" valign="middle" width=250 height=80 border=0></td><td width="100%" background="/images/stripe_vb.gif"><a href="http://click.linksynergy.com/fs-bin/stat?id=0DYcYQoW7OM&subid=0"><IMG alt=icon border=0 hspace=50 vspace=10  width=468 height=60 src="http://ad.linksynergy.com/fs-bin/show?id=0DYcYQoW7OM&bids=+22117.10000191+22117.10000192+22117.10000196+27778+29496+29744+31083&gridnum=1&subid=0"></a></td></tr>
<tr><td colspan=2 class=headingbar bgcolor="#000000##"><span class=headinglink>
<a href="default.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Home</span></a>
&nbsp;&#8226;&nbsp;
<a href="search.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Search</span></a>
&nbsp;&#8226;&nbsp;
<a href="forum.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Forums</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=5"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Articles</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=8"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Interviews</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=9"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Links</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=6"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Reviews</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=28"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Tip Archive</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=34"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">VB 6.0 Toolkit</span></a>
&nbsp;&#8226;&nbsp;
<a href="content.asp?a=se&sID=7"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">Visual Basic 6.0 Bible</span></a>
&nbsp;&#8226;&nbsp;
<a href="about.asp"><span class="headinglink" onmouseover="onLink(this);" onmouseout="offLink(this);">About</span></a>
</td></tr>
<tr><td colspan=2 valign=top width="600">
<span class=subheading>Linking a TreeView to a Database </span>
<span class=text><p>
<p>When it was introduced with Windows 95 and Visual Basic 4.0, the TreeView and ListView controls provided a brand new way to visualize data. Since many types of data are hierarchical in nature, a tree is a perfect way to show it. Unfortunately, the TreeView control could not populate itself automatically from a database. Because of this, you need a good way to load data into the TreeView and to be able to use that information at runtime to retrieve more information about a record. In addition, if you're using the TreeView/ListView combination, you have two controls worth of data to worry about. </p>

<p>There are two things you need to make this scheme work effectively. The first is in using the Key property effectively. Each node or item in either control has a Key property. This property is designed to retrieve a particular node quickly from the entire collection. In our case, however, we'll use the Key property to retrieve data quickly from the database backing the application. </p>

<p>The second key thing you need to have to make this whole thing work is to have a good data design. Every record in every table you want to show needs to have a unique ID. In most databases, these IDs will be sequences generated by the database. (AutoNumber fields in Access) The Northwind Traders database used in this example has a mix of text-based IDs and AutoNumber fields. However, both sets of IDs are unique across all the records. </p>

<p>The application is shown in Figure 1. This simple window shows categories on the left, which in turn trigger data to be shown on the right. The right-hand side changes based on the content of the left-hand side. </p>
<p><img src="/content/vb/linktvwdb_fig1.gif" width=502 height=313 border=0></p>
<p>The first thing you need to do is to create some variables that will be used throughout the form. Add these variable declarations to the Declarations section of the form.</p>

<pre>Option Explicit
Dim db As Database
Dim rsCategories As Recordset
Dim rsProducts As Recordset
</pre>
<p>Next, you need to retrieve the category and product records from the database. The code for the Form_Load event is shown here:</p>

<pre>Private Sub Form_Load()

   Set db = OpenDatabase("C:\DevStudio\VB\NWind.MDB")
   Set rsCategories = _
      db.OpenRecordset("SELECT * FROM Categories " _
	     & "ORDER BY CategoryName", _
      dbOpenSnapshot)
   Set rsProducts = _
      db.OpenRecordset("SELECT * FROM Products " _
	     & "ORDER BY ProductName", _
      dbOpenSnapshot)
   
   Do While Not rsCategories.EOF
      ctlTree.Nodes.Add , _
         , _
         "Category" & rsCategories("CategoryID"), _
         rsCategories("CategoryName")
      rsCategories.MoveNext
   Loop

End Sub</pre>

<p>This code creates two snapshots: one for the categories, and one for the products. If you add features to modify the recordsets, you should probably use dynasets instead of snapshots. However, the point of this exercise is in the code below the OpenRecordset calls. This code adds a tree node for each category in the database. The Key property is made up of two pieces: the first is the word Category, and the second is the unique ID for that category record. The makeup of the key will be important in the next chunk of code, which takes care of loading the ListView control when the user clicks a node in the tree on the left. </p>

<pre>Private Sub ctlTree_MouseDown(Button As Integer, _
   Shift As Integer, _
   x As Single, _
   y As Single)
   
   Dim rsFiltered As Recordset
   
   Set ctlTree.SelectedItem = ctlTree.HitTest(x, y)
   If ctlTree.SelectedItem Is Nothing Then Exit Sub
   
   rsProducts.Filter = _
      "CategoryID = " _
	  & Mid$(ctlTree.SelectedItem.Key, Len("Category") + 1)
   Set rsFiltered = rsProducts.OpenRecordset
   
   ctlList.ListItems.Clear
   Do While Not rsFiltered.EOF
      ctlList.ListItems.Add , _
         "Product" & rsFiltered("ProductID"), _
         rsFiltered("ProductName")
      rsFiltered.MoveNext
   Loop
   rsFiltered.Close
   Set rsFiltered = Nothing
   
End Sub
</pre>
<p>This event handler runs whenever the user pushes the mouse button down anywhere in the ListView control. The first few lines of code determine if the user actually clicked on an item in the list. If so, the list of products (in rsProducts) is filtered down to just the products in the category that was selected. This is where the key value of the category comes into play. To determine what tree node was selected, we simply look at the value of the key following the word "Category". That portion is actually the unique ID, which is then added to the filter used on the Products recordset. Once the filtered recordset is built, each item is added to the ListView control. The Key property of each ListItem is created in the same way as the TreeView nodes, except these use the word "Product" instead of "Category". As long as you are consistent, you can use whatever word you want. The ListItem could then be used with an editor window of some sort, since you have the unique ID of the record already available to you. </p>

<p>The last code required is just some housekeeping code in several places in the form.</p>

<pre>Private Sub Form_Resize()
   ctlTree.Height = Me.ScaleHeight - 2 * ctlTree.Top
   ctlList.Height = ctlTree.Height
   ctlList.Width = Me.ScaleWidth - ctlTree.Width - (3 * ctlTree.Left)
   
End Sub

Private Sub Form_Unload(Cancel As Integer)
   rsCategories.Close
   rsProducts.Close
   db.Close
   
   Set rsCategories = Nothing
   Set rsProducts = Nothing
   Set db = Nothing
   
End Sub</pre>

<p>The first subroutine, Form_Resize, resizes the TreeView and ListView controls so that they fill the form both vertically and horizontally. While this version of the form does not allow you to adjust the width of the two panes, that code is easy to implement and is available many places on the web and in DejaNews (www.dejanews.com). </p>

<p>Form_Unload closes and then cleans up the database objects so that no open connections are left in place. </p>
</p>
<p class="text"><i>Written by Eric Smith on 3/1/2000</i></p>
<p class="text"><b>Categories</b></p>
<span class="text"><a href="http://vbtechniques.com/content.asp?a=ct&cID=84">VB Techniques Articles, Forms and Controls Category</a><br>
</span>
</span>
</td></tr></table>
<table width="100%" cellpadding=4><tr><td>
<br><br><br><hr noshade>
<span class=copyright>
Copyright &copy; 2002 by Northstar Computer Systems.<br>
Contact the <a href="mailto:editor@vbtechniques.com">webmaster</a> with any comments, questions or problems with the site.</span>
</td></tr></table>
</body></html>

