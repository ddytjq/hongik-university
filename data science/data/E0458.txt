ID=E0458
URL=http://www.linuxdoc.org/HOWTO/C++Programming-HOWTO-5.html
SIZE=7075
DATE=12/07/02
TIME=19:21:05
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>C++ Programming HOW-TO: Usage of String class</TITLE>
 <LINK HREF="C++Programming-HOWTO-6.html" REL=next>
 <LINK HREF="C++Programming-HOWTO-4.html" REL=previous>
 <LINK HREF="C++Programming-HOWTO.html#toc5" REL=contents>
</HEAD>
<BODY>
<A HREF="C++Programming-HOWTO-6.html">Next</A>
<A HREF="C++Programming-HOWTO-4.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc5">Contents</A>
<HR>
<H2><A NAME="s5">5. Usage of String class</A></H2>

<P>Take notice, this String class is not the same as the string class
implemented in the Standard C++ Library. This special String class is a
"home-made" String class, made to help Java programmers convert to C++. When
you are more comfortable with C++, you should use the real string class
provided in The Standard C++ Library.
<P>To use String class, you should first refer to a sample program
"example_String.cpp" given in 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">Appendix A</A> and
the String class which is given in 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">Appendix A</A>.
<P>The <B>'String class'</B> is a complete replacement for char and char *
datatype.  You can use <B>'String class'</B> just like char and get much
more functionalities.  You should link with the library 'libString.a' which
you can build from the makefile given in 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">Appendix A</A> and copy the library to /usr/lib or /lib directory where
all the C++ libraries are located. To use the 'libString.a' compile your
programs like -
<HR>
<PRE>
        g++ example.cpp -lString
</PRE>
<HR>

See illustration sample code as given below -
<HR>
<PRE>
        String aa;

        aa = "Creating an Universe is very easy, similar to creating a baby human.";

        // You can use aa.val() like a 'char *' variable in programs
        for (unsigned long tmpii = 0; tmpii &lt; aa.length(); tmpii++)
        {
                //fprintf(stdout, "aa.val()[%ld]=%c ", tmpii, aa.val()[tmpii]);
                fprintf(stdout, "aa[%ld]=%c ", tmpii, aa[tmpii]);
        }

        // Using pointers on 'char *' val ...
        for (char *tmpcc = aa.val(); *tmpcc != 0; tmpcc++)  
        {
                fprintf(stdout, "aa.val()=%c ", *tmpcc);
        }
</PRE>
<HR>
<P>
<P>
<H2><A NAME="ss5.1">5.1 Operators</A>
</H2>

<P>The 
<B>'String class'</B> 
provides these operators :-
<UL>
<LI> Equal to <B>==</B> </LI>
<LI> Not equal to <B>!=</B> </LI>
<LI> Assignment <B>=</B>  </LI>
<LI> Add to itself and Assignment <B>+=</B> </LI>
<LI> String concatenation or addition <B>+</B>  </LI>
</UL>

For example to use operators -
<HR>
<PRE>
        String aa;
        String bb("Bill Clinton");

        aa = "put some value string";  // assignment operator
        aa += "add some more"; // Add to itself and assign operator
        aa = "My name is" + " Alavoor Vasudevan "; // string cat operator

        if (bb == "Bill Clinton")  // boolean equal to operator
                cout &lt;&lt; "bb is equal to 'Bill Clinton' " &lt;&lt; endl;

        if (bb != "Al Gore")   // boolean 'not equal' to operator
                cout &lt;&lt; "bb is not equal to 'Al Gore'" &lt;&lt; endl;
</PRE>
<HR>
<P>
<P>
<H2><A NAME="ss5.2">5.2 Functions</A>
</H2>

<P>The functions provided by String class have the <B>same name</B>
as that of Java language's 
String class. The function names and the behaviour is <B>exactly</B> the same
as that of Java's String class. StringBuffer class is also provided.
This will facilitate portability of code
between Java and C++ (you can cut and paste and do minimum changes to code).
The code from Java's function body can be copied into C++ member function 
body and with very mininum changes the code will compile under C++.
Another advantage is that developers coding in 
both Java and C++ do not need to remember two 
different syntax or function names.
<P>For example to convert integer to string do -
<HR>
<PRE>
        String  aa;

        aa = 34;  // The '=' operator will convert int to string
        cout &lt;&lt; "The value of aa is : " &lt;&lt; aa.val() &lt;&lt; endl;

        aa = 234.878;  // The '=' operator will convert float to string
        cout &lt;&lt; "The value of aa is : " &lt;&lt; aa.val() &lt;&lt; endl;

        aa = 34 + 234.878;
        cout &lt;&lt; "The value of aa is : " &lt;&lt; aa.val() &lt;&lt; endl;
        // The output aa will be '268.878'

        // You must cast String to convert
        aa = (String) 34 + " Can create infinite number of universes!! " + 234.878;
        cout &lt;&lt; "The value of aa is : " &lt;&lt; aa.val() &lt;&lt; endl;
        // The output aa will be '34 Can create infinite number of universes!! 234.878'
</PRE>
<HR>
<P>Refer to
<A HREF="C++Programming-HOWTO-23.html#Appendix A">Appendix A String.h</A>
for details about the String class function names. The same file String.h is
reproduced here in next section.
<P>
<P>
<H2><A NAME="ss5.3">5.3 Renaming the String class</A>
</H2>

<P>
<H3>Case 1: Simple rename</H3>

<P>If you do not like the String class name then you can use <B>"typedef"</B>
to rename the String class.
<P>In all the files where you do include String.h, insert these lines:
<HR>
<PRE>
// If you do not like the class name String, then you can rename using typedef
typedef String StringSomethingElseIwant;

// Your remaining code may be like this ....
int main()
{
        StringSomethingElseIwant aa_renstr; 
        aa_renstr = "I renamed the String Class using typedef";

        // .......etc...
}
</PRE>
<HR>

See the 
<A HREF="http://www.milkywaygalaxy.freeservers.com">example_String.cpp</A>
click on 'Source code for C++'.
<P>
<P>
<H3>Case 2: Resolve conflict</H3>

<P>If there is a conflict with another class-name having the same name, and
you want to use both this class and conflicting class then you use this 
technique -
in all the files where you do include String.h, insert these lines: 
<HR>
<PRE>
#define  String  String_somethingelse_which_I_want
#include "String.h"
#undef String

#include "ConflictingString.h"  // This also has String class...

// All your code goes here...
int main()
{
        String_somethingelse_which_I_want aa;
        String bb; // This string class from conflicting string class

        aa = " some sample string";
        bb = " another string abraka-dabraka";
        .......
}
</PRE>
<HR>

The pre-processor will replace all literals of String 
to "String_somethingelse_which_I_want" and immediately undefines String.
After undef the conflicting string class header file is included which
defines the "String" class.
<P>
<P>
<HR>
<A HREF="C++Programming-HOWTO-6.html">Next</A>
<A HREF="C++Programming-HOWTO-4.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc5">Contents</A>
</BODY>
</HTML>

