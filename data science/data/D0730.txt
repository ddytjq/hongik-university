ID=D0730
URL=http://www.geocities.com/lkp550/java/lesson4.htm
SIZE=5714
DATE=16/07/02
TIME=14:56:39
DATASET=Java
HTML=<html>
<body background="notepad.gif">
<table width=90% align=right><tr><td>
<font face="arial">
<center><h2><u>Lesson Four</u></h2></center>

<p>The coding for any method or class that is between "<b>{</b>" and "<b>}</b>" is called a <i>block</i>. Think of a block of code as children's building blocks. No matter how hard you try, you cannot make the two blocks equal one. You can make them equal one shape (or in our case, one class or method), but never one block.

<p>For example:<br>
<br>
<tt>
public class First<br>
{<br>
  public static void main(String[] args)<br>
  {<br>
    System.out.println("This is my first Java Program!!!");<br>
  }<br>
}<br>
</tt>
<br>

<p>has two blocks within the program. The first block is:<br>

<br>
<tt>
public class First<br>
{<br>
}<br>
</tt>
<br>

<p>and the second block is:<br>

<br>
<tt>
  public static void main(String[] args)<br>
  {<br>
    System.out.println("This is my first Java Program!!!");<br>
  }<br>
</tt>
<br>

<p>This second block is called a <i>nested block</i> because it is inside the first block. The scope, or area you can reference in, of this block is called <b>local scope</b>, meaning only this block can use the included data. Anything outside of this block would be considered <b>global</b>, meaning that any method or block after the declaration of the global variable can use that variable. You can use nested blocks to write programs inside of programs, or programs that bypass other programs data. This is called <b>overloading</b>. Here is a form of overloading a method:<br>

<br>
<tt>
public class DemoOverload<br>
{<br>
  public static void main(String[] args)<br>
  {<br>
    int month = 6, day = 24, year = 2003;<br>
    overloadDate(month);<br>
    overloadDate(month,day);<br>
    overloadDate(month,day,year);<br>
  }<br>
  public static void overloadDate(int mm)<br>
  {<br>
    System.out.println("Event date " + mm + "/1/2001");<br>
  }<br>
  public static void overloadDate(int mm, int dd)<br>
  {<br>
    System.out.println("Event date " + mm + "/" + dd + "/2001");<br>
  }<br>
  public static void overloadDate(int mm, int dd, int yy)<br>
  {<br>
    System.out.println("Event date " + mm + "/" + dd + "/" + yy);<br>
  }<br>
}<br>
</tt>

<p>There are other more advanced methods you can use to create desired outputs. This next program involves using the <i>Math</i> class.<br>

<br>
<tt>
public class DemoMath<br>
{<br>
  public static void main(String[] args)<br>
  {<br>
    double val = 26.9;<br>
    System.out.print("Absolute value of val is ");<br>
    System.out.println(Math.abs(val));<br>
    System.out.print("Absolute value of -val is ");<br>
    System.out.println(Math.abs(-val));<br>
    System.out.print("The square root of val is ");<br>
    System.out.println(Math.sqrt(val));<br>
    System.out.print("Val rounded is ");<br>
    System.out.println(Math.round(val));<br>
  }<br>
}<br>
</tt>

<p>Another advanced method is the <i>import java.util.*</i>. This whole class, which is included in the JDK when you download the program to your computer, will import a library of classes and methods for you to use without having to write out every method you wish to use. In future lessons, you will learn more about other class packages that are included with the Java JDK. These packages make it so you don't have to "reinvent the wheel". The following is an example of this class:<br>

<br>
<tt>
import java.util.*;<br>
public class DemoDate<br>
{<br>
  public static void main(String[] args)<br>
  {<br>
    Date startTime = new Date();<br>
    Date classStart = new Date(99,7,25);<br>
    System.out.println("The current date is " + startTime);<br>
    System.out.println("The class started on " + classStart);<br>
    Date endTime = new Date();<br>
    System.out.print("Time elapsed is ");<br>
    System.out.print(endTime.getTime() - startTime.getTime());<br>
    System.out.println(" milliseconds");<br>
  }<br>
}<br>
</tt>

<p>You cannot type <i>import java.*</i> to use all the packages. You have to access each package individually. Although the word "import" is at the front of the call, "import" simply tells the program that you will be referring to some of the data and method names that are part of the class you are importing.

<p><b><u>Question:</u></b> I came to this site to learn Java. I don't want to learn some programming language. When are you going to teach me how to do things relating to HTML?

<p><b><u>Answer:</u></b> On the contrary, you <b>ARE</B> learning Java because Java <b>IS</b> a programming language. As far as HTML goes, you'll be learning how to incorporate Java with HTML before you know it.


<hr>
<center><a href="lesson3.htm">Lesson Three</a> | <a href="http://www.geocities.com/lkp550/JAVAHUT.htm">Home</a> | <a href="lesson5.htm">Lesson Five</a><br>
<br>
If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.</center>
</font>
</td></tr></table>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026500352" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026500352" ALT=1 WIDTH=1 HEIGHT=1>

