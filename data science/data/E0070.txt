ID=E0070
URL=http://www.cs.princeton.edu/software/lcc/cgi-bin/man2html.cgi?lcc+1
SIZE=18590
DATE=12/07/02
TIME=19:17:09
DATASET=C
HTML=<!-- manual page source format generated by PolyglotMan v3.0.3a12, -->
<!-- available via anonymous ftp from ftp.cs.berkeley.edu:/ucb/people/phelps/tcltk/rman.tar.Z -->

<HTML>
<HEAD>
<TITLE>man page(1) manual page</TITLE>
</HEAD>
<BODY>
<A HREF="#toc">Table of Contents</A><P>

<H2><A NAME="sect0" HREF="#toc0">Name</A></H2>

<P>
lcc - ANSI C compiler

<H2><A NAME="sect1" HREF="#toc1"><B>Synopsis</B></A></H2>

<P>
<B>lcc</B> [ <I>option</I> | <I>file</I> ]...

<H2><A NAME="sect2" HREF="#toc2"><B>Description</B></A></H2>

<P>
<I>lcc</I> is an ANSI C compiler for a variety of platforms.
<P>
Arguments whose names end with `.c' (plus `.C' under Windows)
are taken to be C source programs; they are preprocessed,
compiled, and each object program is left on the
file whose name is that of the source with `.o' (UNIX) or
`.obj' (Windows) substituted for the extension. Arguments
whose names end with `.i' are treated similarly, except they
are not preprocessed. In the same way, arguments ending
with `.s' (plus `.S', `.asm', and `.ASM', under Windows) are
taken to be assembly source programs and are assembled, producing
an object file. If there are no arguments, <I>lcc</I> summarizes
its options on the standard error.
<P>
<I>lcc</I> deletes an object file if and only if exactly one source
file is mentioned and no other file (source, object,
library) or <B>-l</B> option is mentioned.
<P>
If the environment variable <B>LCCINPUTS</B> is set, <I>lcc</I> assumes it
gives a semicolon- or colon-separated list of directories in
which to look for source and object files whose names do not
begin with `/'. These directories are also added to the
list of directories searched for libraries. If <B>LCCINPUTS</B> is
defined, it must contain `.' in order for the current directory
to be searched for input files.
<P>
<I>lcc</I> uses ANSI standard header files (see `FILES' below).
Include files not found in the ANSI header files are taken
from the normal default include areas, which usually
includes <B>/usr/include</B>. Under Windows, if the environment
variable <B>include</B> is defined, it gives a semicolon-separated
list of directories in which to search for header files.
<P>
<I>lcc</I> interprets the following options; unrecognized options
are taken as loader options (see <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?ld:1">ld(1)</A>
) unless <B>-c</B>, <B>-S</B>, or <B>-E</B>
precedes them. Except for <B>-l</B>, all options are processed
before any of the files and apply to all of the files.
Applicable options are passed to each compilation phase in
the order given.

<DL>

<DT><B>-c</B> </DT></DT>
<DD>Suppress the loading phase of the compilation, and
force an object file to be produced even if only one
program is compiled.
</DD>

<DT><B>-g</B> </DT></DT>
<DD>Produce additional symbol table information for the
</DD>
</DL>
<P>
local debuggers. <I>lcc</I> warns when <B>-g</B> is unsupported.

<DL>

<DT><B>-Wf-gn,x</B></DT></DT>
<DD>
Set the debugging level to <I>n</I> and emit source code as
comments into the generated assembly code; <I>x</I> must be
the assembly language comment character. If <I>n</I> is omitted,
it defaults to 1, which is similar to <B>-g</B>. Omitting
<B>,x</B> just sets the debugging level to <I>n</I>.
</DD>

<DT><B>-w</B> </DT></DT>
<DD>Suppress warning diagnostics, such as those announcing
unreferenced statics, locals, and parameters. The line
<I>#pragma</I> <I>ref</I> <I>id</I> simulates a reference to the variable
<I>id</I>.
</DD>

<DT><B>-dn</B> </DT></DT>
<DD>Generate jump tables for switches whose density is at
least <I>n</I>, a floating point constant between zero and
one. The default is 0.5.
</DD>

<DT><B>-A</B> </DT></DT>
<DD>Warns about declarations and casts of function types
without prototypes, assignments between pointers to
ints and pointers to enums, and conversions from pointers
to smaller integral types. A second <B>-A</B> warns about
unrecognized control lines, nonANSI language extensions
and source characters in literals, unreferenced variables
and static functions, declaring arrays of incomplete
types, and exceeding <I>some</I> ANSI environmental limits,
like more than 257 cases in switches. It also
arranges for duplicate global definitions in separately
compiled files to cause loader errors.
</DD>

<DT><B>-P</B> </DT></DT>
<DD>Writes declarations for all defined globals on standard
error. Function declarations include prototypes; editing
this output can simplify conversion to ANSI C.
This output may not correspond to the input when there
are several typedefs for the same type.
</DD>

<DT><B>-n</B> </DT></DT>
<DD>Arrange for the compiler to produce code that tests for
dereferencing zero pointers. The code reports the
offending file and line number and calls <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?abort:3">abort(3)</A>
.
</DD>

<DT><B>-O</B> </DT></DT>
<DD>is ignored.
</DD>

<DT><B>-S</B> </DT></DT>
<DD>Compile the named C programs, and leave the assemblerlanguage
output on corresponding files suffixed `.s' or
`.asm'.
</DD>

<DT><B>-E</B> </DT></DT>
<DD>Run only the preprocessor on the named C programs and
unsuffixed file arguments, and send the result to the
standard output.
</DD>

<DT><B>-o</B> </DT></DT>
<DD><I>output</I>
Name the output file <I>output</I>. If <B>-c</B> or <B>-S</B> is specified
and there is exactly one source file, this option names
the object or assembly file, respectively. Otherwise,
this option names the final executable file generated
by the loader, and `a.out' (UNIX) or `a.exe' (Windows)
is left undisturbed. <I>lcc</I> warns if <B>-o</B> and <B>-c</B> or <B>-S</B> are
given with more than one source file and ignores the <B>-o</B>
option.
</DD>

<DT><B>-Dname=def</B></DT></DT>
<DD>
Define the <I>name</I> to the preprocessor, as if by
`#define'. If <I>=def</I> is omitted, the name is defined as
&laquo;1".
</DD>

<DT><B>-Uname</B></DT></DT>
<DD>
Remove any initial definition of <I>name</I>.
</DD>

<DT><B>-Idir</B></DT></DT>
<DD>
`#include' files whose names do not begin with `/' are
always sought first in the directory of the <I>file</I> arguments,
then in directories named in <B>-I</B> options, then in
directories on a standard list.
</DD>

<DT><B>-N</B> </DT></DT>
<DD>Do not search <I>any</I> of the standard directories for
`#include' files. Only those directories specified by
subsequent explicit <B>-I</B> options will be searched, in the
order given.
</DD>

<DT><B>-Bstr</B></DT></DT>
<DD>
Use the compiler instead of the default version. Note
that <I>str</I> often requires a trailing slash. On Sparcs
only, <B>-Bstatic</B> and <B>-Bdynamic</B> are passed to the loader;
see <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?ld:1">ld(1)</A>
.
</DD>

<DT><B>-Wo-lccdir=dir</B></DT></DT>
<DD>
Find the preprocessor, compiler proper, and include
directory in the directory <I>dir/</I> or <I>dir\.</I> If the environment
variable <B>LCCDIR</B> is defined, it gives this
directory. <I>lcc</I> warns when this option is unsupported.
</DD>

<DT><B>-Wf-unsigned_char=1</B></DT></DT>
<DD>
<B>-Wf-unsigned_char=0</B>
makes plain <B>char</B> an unsigned (1) or signed (0) type; by
default, <B>char</B> is signed.
</DD>

<DT><B>-Wf-wchar_t=unsigned_char</B></DT></DT>
<DD>
<B>-Wf-wchar_t=unsigned_short</B>
<B>-Wf-wchar_t=unsigned_int</B>
Makes wide characters the type indicated; by default,
wide characters are unsigned short ints, and <B>wchar_t</B> is
a typedef for unsigned short defined in stddef.h. The
definition for <B>wchar_t</B> in stddef.h must correspond to
the type specified.
</DD>

<DT><B>-v</B> </DT></DT>
<DD>Print commands as they are executed; some of the executed
programs are directed to print their version numbers.
More than one occurrence of <B>-v</B> causes the commands
to be printed, but <I>not</I> executed.
</DD>

<DT><B>-help</B> or <B>-?</B></DT></DT>
<DD>
Print a message on the standard error summarizing <I>lcc</I>'s
options and giving the values of the environment variables
<B>LCCINPUTS</B> and <B>LCCDIR</B>, if they are defined. Under
Windows, the values of <B>include</B> and <B>lib</B> are also given,
if they are defined.
</DD>

<DT><B>-b</B> </DT></DT>
<DD>Produce code that counts the number of times each
expression is executed. If loading takes place,
arrange for a <B>prof.out</B> file to be written when the
object program terminates. A listing annotated with
execution counts can then be generated with <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?bprint:1">bprint(1)</A>
.
<I>lcc</I> warns when <B>-b</B> is unsupported. <B>-Wf-C</B> is similar,
but counts only the number of function calls.
</DD>

<DT><B>-p</B> </DT></DT>
<DD>Produce code that counts the number of times each function
is called. If loading takes place, replace the
standard startup function by one that automatically
calls <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?monitor:3">monitor(3)</A>
 at the start and arranges to write a
<B>mon.out</B> file when the object program terminates normally.
An execution profile can then be generated with
<A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?prof:1">prof(1)</A>
. <I>lcc</I> warns when <B>-p</B> is unsupported.
</DD>

<DT><B>-pg</B> </DT></DT>
<DD>Causes the compiler to produce counting code like <B>-p</B>,
but invokes a run-time recording mechanism that keeps
more extensive statistics and produces a <B>gmon.out</B> file
at normal termination. Also, a profiling library is
searched, in lieu of the standard C library. An execution
profile can then be generated with <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?gprof:1">gprof(1)</A>
. <I>lcc</I>
warns when <B>-pg</B> is unsupported.
</DD>

<DT><B>-tname</B></DT></DT>
<DD>
<B>-t</B> Produce code to print the name of the function, an
activation number, and the name and value of each argument
at function entry. At function exit, produce code
to print the name of the function, the activation number,
and the return value. By default, <I>printf</I> does the
printing; if <I>name</I> appears, it does. For null <I>char*</I>
values, &laquo;(null)&raquo; is printed. <B>-target</B> <I>name</I> is accepted,
but ignored.
</DD>

<DT><B>-tempdir=dir</B></DT></DT>
<DD>
Store temporary files in the directory <I>dir/</I> or <I>dir\.</I>
The default is usually <B>/tmp</B>.
</DD>

<DT><B>-Wxarg</B></DT></DT>
<DD>
pass argument <I>arg</I> to the program indicated by <I>x</I>; <I>x</I> can
be one of <B>p</B>, <B>f</B>, <B>a</B>, or <B>l</B>, which refer, respectively, to
the preprocessor, the compiler proper, the assembler,
and the loader. <I>arg</I> is passed as given; if a <B>-</B> is
expected, it must be given explicitly. <B>-Woarg</B> specifies
a system-specific option, <I>arg</I>.
</DD>
</DL>
<P>
Other arguments are taken to be either loader option arguments,
or C-compatible object programs, typically produced
by an earlier <I>lcc</I> run, or perhaps libraries of C-compatible
routines. Duplicate object files are ignored. These programs,
together with the results of any compilations specified,
are loaded (in the order given) to produce an executable
program with name <B>a.out</B> (UNIX) or <B>a.exe</B> (Windows).
<P>
<I>lcc</I> assigns the most frequently referenced scalar parameters
and locals to registers whenever possible. For each block,
explicit register declarations are obeyed first; remaining
registers are assigned to automatic locals if they are `referenced'
at least 3 times. Each top-level occurrence of an
identifier counts as 1 reference. Occurrences in a loop,
either of the then/else arms of an if statement, or a case
in a switch statement each count, respectively, as 10, 1/2,
or 1/10 references. These values are adjusted accordingly
for nested control structures. <B>-Wf-a</B> causes <I>lcc</I> to read a
<B>prof.out</B> file from a previous execution and to use the data
therein to compute reference counts (see <B>-b</B>).
<P>
<I>lcc</I> is a cross compiler; <B>-Wf-target=target/os</B> causes <I>lcc</I> to
generate code for <I>target</I> running the operating system
denoted by <I>os</I>. The supported <I>target/os</I> combinations may
include

<DL>

<DT>alpha/osf </DT></DT>
<DD>     ALPHA, OSF 3.2
</DD>

<DT>mips/irix </DT></DT>
<DD>     big-endian MIPS, IRIX 5.2
</DD>

<DT>mips/ultrix </DT></DT>
<DD>   little-endian MIPS, ULTRIX 4.3
sparc/solaris SPARC, Solaris 2.3
</DD>

<DT>x86/win32 </DT></DT>
<DD>     x86, Windows NT 4.0/Windows 95/98
</DD>

<DT>x86/linux </DT></DT>
<DD>     x86, Linux
</DD>

<DT>symbolic </DT></DT>
<DD>      text rendition of the generated code
</DD>

<DT>null </DT></DT>
<DD>          no output
</DD>
</DL>
<P>
For <B>-Wf-target=symbolic</B>, the option <B>-Wf-html</B> causes the text
rendition to be emitted as HTML.

<H2><A NAME="sect3" HREF="#toc3"><B>Limitations</B></A></H2>

<P>
<I>lcc</I> accepts the C programming language as described in the
ANSI standard. If <I>lcc</I> is used with the GNU C preprocessor,
the <B>-Wp-trigraphs</B> option is required to enable trigraph
sequences.
<P>
Plain int bit fields are signed. Bit fields are aligned
like unsigned integers but are otherwise laid out as by most
standard C compilers. Some compilers, such as the GNU C
compiler, may choose other, incompatible layouts.
<P>
Likewise, calling conventions are intended to be compatible
with the host C compiler, except possibly for passing and
returning structures. Specifically, <I>lcc</I> passes and returns
structures like host ANSI C compilers on most targets, but
some older host C compilers use different conventions. Consequently,
calls to/from such functions compiled with older
C compilers may not work. Calling a function that returns a
structure without declaring it as such violates the ANSI
standard and may cause a fault.

<H2><A NAME="sect4" HREF="#toc4"><B>Files</B></A></H2>

<P>
The file names listed below are <I>typical</I>, but vary among
installations; installation-dependent variants can be displayed
by running <I>lcc</I> with the <B>-v</B> option.

<DL>

<DT>file.{c,C} </DT></DT>
<DD>             input file
</DD>

<DT>file.{s,asm} </DT></DT>
<DD>           assembly-language file
</DD>

<DT>file.{o,obj} </DT></DT>
<DD>           object file
</DD>

<DT>a.{out,exe} </DT></DT>
<DD>            loaded output
</DD>

<DT>/tmp/lcc* </DT></DT>
<DD>              temporary files
</DD>

<DT>$LCCDIR/cpp </DT></DT>
<DD>            preprocessor
</DD>

<DT>$LCCDIR/rcc </DT></DT>
<DD>            compiler
$LCCDIR/liblcc.{a,lib} <I>lcc</I>-specific library
</DD>

<DT>/lib/crt0.o </DT></DT>
<DD>            runtime startup (UNIX)
</DD>

<DT>/lib/[gm]crt0.o </DT></DT>
<DD>        startups for profiling (UNIX)
</DD>

<DT>/lib/libc.a </DT></DT>
<DD>            standard library (UNIX)
</DD>

<DT>$LCCDIR/include </DT></DT>
<DD>        ANSI standard headers
</DD>

<DT>/usr/local/include </DT></DT>
<DD>     local headers
</DD>

<DT>/usr/include </DT></DT>
<DD>           traditional headers
</DD>

<DT>prof.out </DT></DT>
<DD>               file produced for <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?bprint:1">bprint(1)</A>

</DD>

<DT>mon.out </DT></DT>
<DD>                file produced for <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?prof:1">prof(1)</A>

</DD>

<DT>gmon.out </DT></DT>
<DD>               file produced for <A HREF="http://www.CS.Princeton.EDU/cgi-bin/man2html?gprof:1">gprof(1)</A>

</DD>
</DL>
<P>
<I>lcc</I> predefines the macro <B>__LCC__</B> on all systems. It may
also predefine some installation-dependent symbols; option
<B>-v</B> exposes them.

<H2><A NAME="sect5" HREF="#toc5"><B>See</B> <B>Also</B></A></H2>

<P>
C. W. Fraser and D. R. Hanson, <I>A</I> <I>Retargetable</I> <I>C</I> <I>Compiler:</I>
<I>Design</I> <I>and</I> Addison-Wesley, 1995. ISBN 0-8053-1670-1.
<P>
The World-Wide Web page at http://www.cs.princeton.edu/software/lcc/.
<P>
S. P. Harbison and G. L. Steele, Jr., <I>C:</I> <I>A</I> <I>Reference</I> <I>Manual,</I>
4th ed., Prentice-Hall, 1995.
<P>
B. W. Kernighan and D. M. Ritchie, <I>The</I> <I>C</I> <I>Programming</I> <I>Lan_</I>g<I>uage,</I>
2nd ed., Prentice-Hall, 1988.
<P>
American National Standards Inst., <I>American</I> <I>National</I> <I>Stan_</I>d<I>ard</I>
<I>for</I> <I>Information</I> <I>Systems--Programming</I> <I>Language--C</I>, ANSI
X3.159-1989, New York, 1990.

<H2><A NAME="sect6" HREF="#toc6"><B>Bugs</B></A></H2>

<P>
Mail bug reports along with the shortest preprocessed program
that exposes them and the details reported by <I>lcc</I>'s <B>-v</B>
option to lcc-bugs@princeton.edu. The WWW page at URL
http://www.cs.princeton.edu/software/lcc/ includes detailed
instructions for reporting bugs.
<P>
The ANSI standard headers conform to the specifications in
the Standard, which may be too restrictive for some applications,
but necessary for portability. Functions given in
the ANSI headers may be missing from some local C libraries
(e.g., wide-character functions) or may not correspond
exactly to the local versions; for example, the ANSI standard
stdio.h specifies that <I>printf</I>, <I>fprintf</I>, and <I>sprintf</I>
return the number of characters written to the file or
array, but some existing libraries don't implement this convention.
<P>
On the MIPS and SPARC, old-style variadic functions must use
varargs.h from MIPS or Sun. New-style is recommended.
<P>
With <B>-b</B>, files compiled <I>without</I> <B>-b</B> may cause <I>bprint</I> to print
erroneous call graphs. For example, if <B>f</B> calls <B>g</B> calls <B>h</B>
and <B>f</B> and <B>h</B> are compiled with <B>-b</B>, but <B>g</B> is not, <B>bprint</B> will
report that <B>f</B> called <B>h</B>. The total number of calls is correct,
however.
<P>

<HR><P>
<A NAME="toc"><B>Table of Contents</B></A><P>
<UL>
<LI><A NAME="toc0" HREF="#sect0">Name</A></LI>
<LI><A NAME="toc1" HREF="#sect1">Synopsis</A></LI>
<LI><A NAME="toc2" HREF="#sect2">Description</A></LI>
<LI><A NAME="toc3" HREF="#sect3">Limitations</A></LI>
<LI><A NAME="toc4" HREF="#sect4">Files</A></LI>
<LI><A NAME="toc5" HREF="#sect5">See Also</A></LI>
<LI><A NAME="toc6" HREF="#sect6">Bugs</A></LI>
</UL>
</BODY></HTML>

