ID=E0528
URL=http://www.hh.se/stud/d98rolb/ansi/malloc().html
SIZE=3482
DATE=12/07/02
TIME=19:21:54
DATASET=C
HTML=<html>
<head>
  <title>malloc()</title>
  <meta name="Generator" content="GuideML V1.6">
  <meta http-equiv="Content-Type" content="text/html">
</head>
<body>
<a href="main.html"><img src="toc.gif" alt="CONTENTS" border=0></a><a href="alphalist.html"><img src="index.gif" alt="INDEX" border=0></a><a href="main().html"><img src="prev.gif" alt="PREV" border=0></a><a href="mblen().html"><img src="next.gif" alt="NEXT" border=0></a><a href="http://www.hh.se/stud/d98rolb/programming.html"><img src="home.gif" alt="HOME" border=0></a>
<hr>
<pre>
malloc-Allocate memory

Synopsis

        #include &#060;stdlib.h&#062;

        b = malloc(n);

        void *b;     /*block pointer   */
        size_t n;    /*number of bytes */

Description

        The malloc function allocates a block that is n bytes long and is
        aligned in such a way that you can cast the block pointer to any
        pointer type.  If the block cannot be allocated, a NULL pointer is
        returned.

        The malloc function can only allocate 64 kilobytes at a time if
        short integers are used.


Returns

        A NULL pointer is returned if there is not enough space for the
        requested block.

Example

        #include &#060;stdio.h&#062;
        #include &#060;stdlib.h&#062;
        #include &#060;string.h&#062;

        struct LIST
        {
            struct LIST *next;
            char text[2];
        };

        void main(int argc, char *argv[])
        {
            struct LIST *p;
            struct LIST *q;
            struct LIST list;
            char b[256];
            int x;

            printf(&quot;nBegin new group...n&quot;);
            for (q = &amp;list; ; q = p)
            {
                printf(&quot;Enter a text string: &quot;);
                if (fgets(b,sizeof(b),stdin) == NULL)
                {
                    break;
                }
                if (b[0] == NULL)
                {
                    if (q == &amp;list)
                    {
                        printf(&quot;n&quot;);
                        exit(EXIT_SUCCESS);
                    }
                    break;
                }
                x = sizeof(struct LIST) - 2 + strlen(b) + 1;
                p = malloc(x);
                if (p == NULL)
                {
                    printf(&quot;No more memoryn&quot;);
                    exit(EXIT_FAILURE);
                }
                q-&#062;next = p;
                p-&#062;next = NULL;
                strcpy(p-&#062;text, b);
            }
            printf(&quot;nnTEXT LIST...n&quot;);
            p = list.next;
            while(p != NULL)
            {
                q = p-&#062;next;
                printf(&quot;%s&quot;, p-&#062;text);
                free(p);
                p = q;
            }
            list.next = NULL;
        }

See Also

        <a href="calloc().html"> calloc </a>, <a href="free().html"> free </a>, <a href="realloc().html"> realloc </a>
</pre>
<hr>
<a href="main.html"><img src="toc.gif" alt="CONTENTS" border=0></a><a href="alphalist.html"><img src="index.gif" alt="INDEX" border=0></a><a href="main().html"><img src="prev.gif" alt="PREV" border=0></a><a href="mblen().html"><img src="next.gif" alt="NEXT" border=0></a><a href="http://www.hh.se/stud/d98rolb/programming.html"><img src="home.gif" alt="HOME" border=0></a>
</body>
</html>

