ID=E0281
URL=http://www.rit.edu/~jpw9607/ctut/part2.htm
SIZE=29351
DATE=12/07/02
TIME=19:19:30
DATASET=C
HTML=<html><!-- #BeginTemplate "/Templates/main.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>C/C++ Tutorial Page 2</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../style.css" type="text/css">
<meta name="keywords" content="DJGPP, Allegro, programming, JetFight, Project V2143, C++, tutorials, linklist, MSVC, Microsoft Visual C++, Itana, GNE, Deathworms, MUUDPIC, Java, links, games, libraries, source, code, C, network, multiplayer">
<meta name="description" content="Gillius's Programming.  C/C++ tutorials, games, java, allegro, and libraries.">
</head>
<body bgcolor="#000000" text="#FFFFFF" link="#FFFF00" vlink="#008080" alink="#990099">
<table width="100%" border="0" cellpadding="0" cellspacing="5">
  <tr> 
    <td colspan="2" class="titleBar">Gillius's Programming</td>
  </tr>
  <tr> 
    <td width="130" height="621" valign="top"> 
      <table border="0" cellpadding="3" cellspacing="0" name="NavBar" width="130">
        <tr> 
          <td valign="top" class="leftTitle">Sections</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../index.htm">Home / News</a><br>
            <a href="../tutorial.htm">Tutorials</a><br>
            <a href="../games.htm">Games Corner</a><br>
            <a href="../java/index.htm">Java</a><br>
            <a href="../filesandprog.htm">The Archive</a><br>
            <a href="../links.htm">Links</a> </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="http://boards.eesite.com/board.cgi?boardset=60999">Fourms</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Current Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"> 
            <p><a href="../gne/index.htm">GNE</a> v.49a<br>
              <span class="leftDesc">--Game Networking Engine</span></p>
            <p><a href="../itana/index.htm">Itana</a> v.71a<br>
              <span class="leftDesc">--2D multiplayer space game</span></p>
          </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Complete Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../bgui2/index.htm">BGui2</a> 
            v.2.0.2<br>
            <a href="../deathworms/index.htm">Deathworms</a><br>
            <a href="../muudpic/index.htm">MUUDPIC</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../contact.htm">Contact 
            Gillius</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../resume.htm">Gillius's 
            Resum&eacute;</a></td>
        </tr>
        <tr> 
          <td valign="top">&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td> 
            <form action="http://pub.alxnet.com/poll" METHOD="POST" >
              <input type="hidden" name="id" value="2061268">
              <input type="hidden" name="q" value="submit">
              <table border="1" bgcolor="#AAAAAA" cellpadding="3" cellspacing="0">
                <tr> 
                  <td bgcolor="#202020" align="middle" class="pollTitle"> Location</td>
                </tr>
                <tr> 
                  <td> 
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                      <tr> 
                        <td class="pollQuestion">What part of the world do you 
                          live in?</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="1">
                          North America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="2">
                          South America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="3">
                          Europe</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="4">
                          Africa</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="5">
                          West/North Asia (like Russia)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="6">
                          East/South Asia (like India and Japan)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="7">
                          Australia / Indonesia</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="8">
                          Middle East</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="9">
                          Other</td>
                      </tr>
                      <tr> 
                        <td align="middle">
<input type="submit" value="Vote">
                        </td>
                      </tr>
                      <tr> 
                        <td align="middle"><a href="http://pub.alxnet.com/poll?id=2061268&q=view" class="pollLink" >Current 
                          results</a></td>
                      </tr>
                    </table>
                  </td>
                </tr>
                <tr> 
                  <td align="middle"><a href="http://www.alxnet.com/services/poll/" class="pollLink">Alxnet 
                    Free Web Tools</a></td>
                </tr>
              </table>
            </form>
            <a href="../poll.htm">View old poll results</a></td>
        </tr>
        <tr> 
          <td>&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td valign="middle" align="center" height="64"> 
            <!-- Start of TheCounter.com Code -->
            <script type="text/javascript" language="javascript">
s="na";c="na";j="na";f=""+escape(document.referrer)
</script>
            <script type="text/javascript" language="javascript1.2">
s=screen.width;v=navigator.appName
if (v != "Netscape") {c=screen.colorDepth}
else {c=screen.pixelDepth}
j=navigator.javaEnabled()
</script>
            <script type="text/javascript" language="javascript">
function pr(n) {document.write(n,"\n");}
NS2Ch=0
if (navigator.appName == "Netscape" &&
navigator.appVersion.charAt(0) == "2") {NS2Ch=1}
if (NS2Ch == 0) {
r="&size="+s+"&colors="+c+"&referer="+f+"&java="+j+""
pr("<A HREF=\"http://www.TheCounter.com\" TARGET=\"_top\"><IMG"+
" BORDER=0 SRC=\"http://c2.thecounter.com/id=1557583"+r+"\"><\/A>")}
</script>
            <noscript><a href="http://www.TheCounter.com" target="_top"><img
src="http://c2.thecounter.com/id=1557583" alt="TC" border=0></a> </noscript> 
            <!-- End of TheCounter.com Code -->
            <br>
            since 5/14/01</td>
        </tr>
      </table>
    </td>
    <td valign="top" align="left"><!-- #BeginEditable "content" --> 
      <p><a name="Decisions II"></a>More than just the &gt; and 
        &lt; can use used to make decisions with variables. There are a few more 
        operators.</p>
      <p>== is the equal comparison<br>
        != is the not equal to comparison<br>
        &gt;= is greater than or equal to<br>
        &gt; greater than<br>
        &lt; less than<br>
        &lt;= less than or equal to</p>
      <p>Comparisions return a value which can actually be stored 
        in a variable called bool, which is short for boolean. Comparisons either 
        return true(non-zero) or false(zero). If the expression in the if statement 
        is non-zero it will evaluate true and execute its code. Variables can 
        be left by themselves in an if to test for this as well:</p>
      <p>if (x) cout &lt;&lt; &quot;X is not 
        zero&quot; &lt;&lt; endl;</p>
      <p>! used by itself means &quot;not&quot; which reverses 
        the expression:</p>
      <p>if (!x) cout &lt;&lt; &quot;X is zero&quot; 
        &lt;&lt; endl;</p>
      <p>In addition to comparing numbers, boolean expressions 
        can also be compared using the logical comparison operators (use parenthesis 
        to seperate the expressions):</p>
      <p>|| (the double pipe symbol) means or<br>
        &amp;&amp; means and</p>
      <p>if ((x &gt; 10) &amp;&amp; (x &lt; 
        15)) cout &lt;&lt; &quot;x is between 10 and 15&quot; &lt;&lt; endl;<br>
        if ((x == 5) || (x == 6)) cout &lt;&lt; &quot;x is 5 or 6&quot; &lt;&lt; 
        endl;<br>
        if ((x != 5) &amp;&amp; (x != 6)) cout &lt;&lt; &quot;x is neither 5 or 
        6&quot; &lt;&lt; endl;</p>
      <p>The comparasions can be assigned to a bool variable like 
        this:</p>
      <p>bool xtest = (x&gt;10) &amp;&amp; (x&lt;15);<br>
        if (xtest) cout &lt;&lt; &quot;x is between 10 and 15&quot;) &lt;&lt; 
        endl;<br>
        if (!xtest) cout &lt;&lt; &quot;x is not between 10 and 15&quot; &lt;&lt; 
        endl;</p>
      <p>This last segment could also use an else:</p>
      <p>bool xtest = (x&gt;10) &amp;&amp; (x&lt;15);<br>
        if (xtest) cout &lt;&lt; &quot;xtest is true&quot; &lt;&lt; endl;<br>
        else cout &lt;&lt; &quot;xtest is false&quot; &lt;&lt; endl;</p>
      <p>A very common mistake made by programmers moving from 
        other languages is using the assignment operator, =, instead of the equals 
        operator, ==. Both of these operators are valid in an if, but an assignment 
        is rarely used in this case.</p>
      <p>if (x = 5) /*this is ALWAYS true since 
        it will evaluate for 5, which is non-zero*/<br>
        if (x == 5) /*this is probably what the programmer meant*/</p>
      <p>On most compilers using the assignement instead of the 
        equals will generate a courteous warning.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Functions I"></a>Functions in C work just like 
        they do in any other langage, except that C programmers tend not to make 
        the distinction between procedures, which do not return values, and functions, 
        which do return values. Like the main function, each function declaration 
        requires 3 parts: the return type, the function name, and the parameter 
        list. A function prototype(some programmers call this the &quot;interface&quot;) 
        in C looks like this:</p>
      <p>void MyFunction();</p>
      <p>This function does not return a value, denoted by void, 
        and its name is MyFunction. There are no parameters. Notice that the prototype 
        ends with a semi-colon. This tells the compiler that the function exists, 
        but will be declared later(this part is sometimes referred to as the &quot;implimentation&quot;). 
        This is done so that the main function is at the very top of the program 
        while the code for other functions is declared below. This is not a nessacity--functions 
        can be declared without prototypes above the main function, but the program 
        becomes harder to read and follow. Below is a short example program demonstrating 
        a basic function call:</p>
      <pre>#include &lt;iostream.h&gt; //for cout</pre>
      <pre>void DisplayGreeting();
void SayGoodbye();</pre>
      <pre>void main() {
  DisplayGreeting();
  SayGoodbye();
}</pre>
      <pre>void DisplayGreeting() {
  cout &lt;&lt; &quot;Hello user!&quot; &lt;&lt; endl;
}</pre>
      <pre>void SayGoodbye() {
  cout &lt;&lt; &quot;Goodbye!&quot; &lt;&lt; endl;
}</pre>
      <p>This method for functions is pretty straight forward. 
        Parameters are not much more complex:</p>
      <pre>void DisplayNumbers(int numb1, int numb2, float numb3) {
  cout &lt;&lt; &quot;Number 1: &quot; &lt;&lt; numb1;
  cout &lt;&lt; &quot;Number 2: &quot; &lt;&lt; numb2;
  cout &lt;&lt; &quot;Number 3: &quot; &lt;&lt; numb3;
}</pre>
      <p>Notice that each variable in the list needs a variable 
        type in front of it. Call the function like this:</p>
      <pre>void main() {
  int x = 26;
  DisplayNumbers(50, x, 34.1);
}</pre>
      <p>Returning values require only changing the variable type 
        before the name and using a return command at the end of the function.</p>
      <pre>float GetSquare(float numb);</pre>
      <pre>void main() {
  float sq = GetSquare(3.0);
  cout &lt;&lt; &quot;sq is &quot; &lt;&lt; g;
  cout &lt;&lt; &quot;Five squared is&quot; &lt;&lt; GetSquare(5.0);
}</pre>
      <pre>float GetSquare(float numb) {
  return numb * numb;
}</pre>
      <p>A shortcut method to the function prototyes is to only 
        include the variable type. The compiler does not need to know the name 
        until the function declaration later, however most programmers still include 
        the variable name because not only does the name help to describe what 
        the variable is, but also because it is easy to write the function, then 
        copy/paste the first line to the top of the program and just simply replace 
        the { with ;. Here are several ways to prototype the same function:</p>
      <pre>float FindDistance(float x1, float y1, float x2, float y2);
//or use:
float FindDistance(float, float, float, float);
//Notice how the names helped to clairify what is being passed</pre>
      <pre>float FindDistance(float x1, float y1, float x2, float y2) {
  return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
}</pre>
      <p>Notice how including the names clarified the function's 
        purpose. Also, on a side note, notice that in the implimentation of FindDistance 
        does NOT use a square function, since C does not have one, however the 
        programmer can choose to write a square function.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Main Function II"></a>The true purpose for the 
        void main() in C++ and int main() in C has not yet been fully explained. 
        Like other languages, functions return values in C. In DOS and Windows 
        your program is called from a function in the operating system just like 
        it was any other function. An integer can be returned to the operating 
        system to denote an error in the program. Although this is a rarely used 
        feature, it is used in cases like scandisk in Windows 95, which the main 
        function returns true if the user canceled or if an error was encountered, 
        that is how the computer knew to display the &quot;scandisk was canceled 
        or had an error&quot; message.</p>
      <p>Since some value is always returned, C gives a warning 
        about main() being void and not int. C++ still does the same thing, but 
        in C++ it is proper to declare main as void, whereas C standards dictate 
        main should return int. Even when main is a void function, it just simply 
        always returns 0.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Loops I"></a>The syntax for loops in C requires 
        three parts, the beginning condition, the test, and counter update. In 
        reality, each of these lines are simply just lines of code that are executed 
        before the loop and after it. Below is a simple C loop:</p>
      <pre>for (int c=0; c &lt; 9; c++)
  cout &lt;&lt; &quot;Loop counter is &quot; &lt;&lt; c &lt;&lt; endl;</pre>
      <p>The loop executes until the test becomes false, also note 
        that if the test BEGINS false the control will never enter the loop. Notice 
        there were no braces on the for loop, but if there were multiple lines 
        the code would need to be in a block.</p>
      <p>A while loop continues until the condition given becomes 
        false, and like the for loop, if the condition starts as false control 
        will never enter the loop. The parameters for the for loop can be better 
        understood by looking at how the same code is written as a while loop:</p>
      <pre>int c = 0;
while (c &lt; 9) {
  cout &lt;&lt; &quot;Loop counter is &quot; &lt;&lt; c &lt;&lt; endl;
  c++;
}</pre>
      <p>A do..while loop is virtually the same thing as a while 
        loop, except that the test comes at the END of the loop rather than at 
        the start, so that the control will enter the loop AT LEAST once. Do..while 
        loops are used mostly for input protection:</p>
      <pre>float x = 0.0;
do {
  cout &lt;&lt; &quot;Enter a number between 5 and 6: &quot;;
  cin &gt;&gt; x;
} while ((x&gt;5.0) &amp;&amp; (x&lt;6.0));</pre>
      <p>The two major diffences between this loop and the rest 
        are using two keywords, one at the beginning, and one at the end, and 
        using a semi-colon after the structure. Notice that the variable is declared 
        outside of the loop's &quot;scope.&quot; A variable declared in a block 
        can only be viewed in that block and blocks inside that block. So if a 
        variable would be declared in the loop, only the loop can see that variable.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Decisions III"></a>User input, espically with 
        menus, will require many decisions. Imagine a menu of choices, and the 
        user enters a number to select which option he or she desires:</p>
      <pre>#include &lt;iostream.h&gt;</pre>
      <pre>void EnterNewUser();
void DeleteUser();
void FindUser();</pre>
      <pre>void main() {
  bool cont = true;//For use in while loop
  while (cont) {   //Contiune until user selects quit
    //Display Menu
    cout &lt;&lt; &quot;Network Management--Users&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;1 - Enter a new user&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;2 - Delete a user&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;3 - Find a user&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;4 - Exit this menu&quot; &lt;&lt; endl;</pre>
      <pre>    int choice;
    cout &lt;&lt; &quot;Enter choice: &quot;; cin &gt;&gt; choice;</pre>
      <pre>    if (choice == 1)
      EnterNewUser();
    else if (choice == 2)
      DeleteUser();
    else if (choice == 3)
      FindUser();
    else if (choice == 4)
      cont = false;
    else
      cout &lt;&lt; &quot;Invalid choice!&quot; &lt;&lt; endl;
  } //End of while loop
}   //End of main()</pre>
      <p>After some time the if..else if statements can become 
        cumbersome and redundant. C allows for a shortcut decision structure which 
        only works on integer types (char, short, int, long). Below is the same 
        decisions from the program above except in a &quot;switch&quot; statement:</p>
      <pre>switch (choice) {
  case 1:
    EnterNewUser(); break;
  case 2:
    DeleteUser(); break;
  case 3:
    FindUser(); break;
  case 4:
    cont = false; break;
  default:
    cout &lt;&lt; &quot;Invalid choice!&quot; &lt;&lt; endl; break;
}</pre>
      <p>A block of code under the case need not be in braces, 
        UNLESS a variable is declared inside the switch, then braces are needed 
        to define its scope. The break statement tells the computer to exit the 
        swtich instead of continuing the statements. If the breaks are eliminated, 
        control simply passes through any other case statements and continues 
        until the end of the switch or a break statement. This is not used often, 
        but the following is an example of how a switch could be used for this:</p>
      <pre>int x=0;
cout &lt;&lt; &quot;Enter an integer: &quot;
cin &gt;&gt; x;
switch (x) {
  case 1:
    cout &lt;&lt; &quot;X is 1&quot; &lt;&lt; endl;
  case 2:
    cout &lt;&lt; &quot;X is 2 or less&quot; &lt;&lt; endl;
  case 3:
    cout &lt;&lt; &quot;X is 3 or less&quot; &lt;&lt; endl;
    break; //This will stop control from going into default
  default:
    cout &lt;&lt; &quot;X is less than 1 or greater than 3&quot; &lt;&lt; endl;
}</pre>
      <p>And an example of using braces (x can ONLY be seen inside 
        the braces and not in other cases or outside the switch, as the braces 
        denote its scope):</p>
      <pre>switch(x) {
  case 1: {
    int x = 0;
    cout &lt;&lt; &quot;Enter for x: &quot;; cin &gt;&gt; x;
    cout &lt;&lt; &quot;x is &quot; &lt;&lt; x &lt;&lt; endl;
    break;
    }
}</pre>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Arrays I"></a>When using larger amounts of data, 
        a seperatte name for each variable would be redundant and masochisitc 
        at best, so a better method would be to use an array. An array declaration 
        is just like a variable declaration except a number is added:</p>
      <p>int myarray[10];</p>
      <p>This statement declares an array of 10 integers. The indexes 
        for the array start from 0 and go to 9. For those curious why the indexes 
        are numbered this way, Pointers I will explain in depth the exact reason 
        for this.</p>
      <p>A for loop is the best structure for accessing a fixed 
        size array like this one. This program asks the user to enter data into 
        the array above then displays it.</p>
      <pre>for (int c=0; c &lt; 10; c++) {
  cout &lt;&lt; &quot;Enter an integer: &quot;;
  cin &gt;&gt; myarray[c];
}</pre>
      <pre>for (int c=0; c &lt; 10; c++)
  cout &lt;&lt; &quot;Element &quot; &lt;&lt; c &lt;&lt; &quot; is &quot; &lt;&lt; myarray[c];</pre>
      <p>Accessing the array only requires the name, followed by 
        the element number in brackets, which can be a constant (myarray[2]=3;) 
        or a variable (myarray[c]=6;). However, when using variables to access 
        the array, in C there is NO error checking. The statement myarray[50]=10; 
        will execute in the above program despite it being obviously out of range. 
        This will overrun the array, and write in memory which may contain other 
        variables, DOS, Windows, or even your code! Obviously this will cause 
        major problems and the program may not crash immedately until the corrupted 
        memory is accessed, or may never even crash at all! So if a program is 
        performing weird actions without any other explanation, check for &quot;memory 
        leaks&quot; like this one.</p>
      <p>To initalize an array, braces and data seperated by commas 
        will fill the array with data, like this:</p>
      <p>int myarray[10] = {1, 2, 3, 4, 5, 6, 
        7, 8, 9};</p>
      <p>You do not even have to initalize all elements either. 
        If the list stops before the end of the array, the rest of the elements 
        become 0.</p>
      <p>int myarray[10] = {}; //All elements 
        are 0</p>
      <p>Two dimentional arrays, or matrices work just like their 
        one-dimentional or vector counterparts, just that they use more brackets. 
        The same pattern applies for 3D and so on to infinity.</p>
      <p>int matrix[5][5]; //2D array<br>
        int space[100][100][100]; //3D array<br>
        int wow[3][3][3][3]; //Even 4D and more work!</p>
      <p>Keep in mind that 2D arrays are really an array of arrays. 
        For example the matrix above is really a 5 element array contaning int 
        arrays of 5 elements. I mention this for understanding that accessing 
        an array sequentially requires looping the last values, for faster access, 
        since it accesses sequentially and does not jump around. Two ways of looking 
        at the elements is [row][col] or [y][x]. This is best shown in code:</p>
      <pre>for (int row=0; row &lt; 5; row++)
  for (int col=0; col &lt; 5; col++)
    cout &lt;&lt; matrix[row][col] &lt;&lt; endl;</pre>
      <p>This is the fastest way to access the array in memory. 
        If row and col were switched, the computer would jump in memory. The best 
        way to show this is visually. In memory the array is stored like this:</p>
      <p>[0][0], [0][1], [0][2], [1][0], [1][1], [1][2]</p>
      <p>Going from [0][0] to [0][1] requires only a simple addition 
        to the computer, while going from [0][0] to [1][0] the computer needs 
        to skip over 2 elements.</p>
      <p>Initializing an array makes sense when seen--you need 
        to initialize the array with arrays:</p>
      <pre>myarray[2][2] = {{56, 76}, {12, 78}};</pre>
      <p>Notice how arrays are the elements, which have elements 
        as well.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Variables III"></a>Strings in C are MUCH more 
        compicated than in a language like BASIC. Other languages like BASIC tend 
        to hide the fact that strings are arrays of characters and need to be 
        treated that way. In C++, most programmers use a string class which lets 
        the programmer use strings like in BASIC. However, my personal preference 
        is still to use strings with char *, and in C, this is virtually the only 
        way to do it (Technically you can convert all class code to C but it's 
        hard and not very pretty.)</p>
      <p>The asterisk after char means it is a pointer or an array. 
        Until the Pointers I lession, regard both char[] and char * meaning as 
        same thing. I note this because most programmers refer to a C-style string 
        as char *, and when passed to a function the parameter type is char *. 
        When you declare a string, the easiest way to do it is to declare it as 
        an array.</p>
      <pre>char mystring[500] = &quot;&quot;;</pre>
      <p>This declares a string of 500 characters. Note the double 
        quotes. Each string must ALWAYS be initialized before using it, since 
        all strings must end with a NULL character (ASCII 0). The compiler interprets 
        strings this way--it contines to process characters (in a cout or cin 
        or string operation) until it hits a character with value 0 -- the NULL 
        character. If this NULL character does not exist, then the computer will 
        process the memory in the string and flow over, until it happens to hit 
        a NULL by chance or runs out of memory. This is also considered a memory 
        leak and will probably crash the computer.</p>
      <p>Strings cannot be copied since they are arrays. This rule 
        applies to any string operation. Below are some things that will not work 
        with strings that might for other variables. Also keep in mind the array 
        needs to be large enough to contain any possible strings that may enter 
        it, or the array may &quot;overrun.&quot;</p>
      <pre>char str1[100] = &quot;Mom&quot;;
char str2[100] = &quot;Dad&quot;;
char str3[100] = &quot;Mom&quot;;</pre>
      <pre>str3 = str1 + str2; //Cannot add strings like this
if (str1 == str3)   //Cannot compare strings</pre>
      <p>In order to work with strings like this, one needs to 
        use the C library string functions. Below are equalvalent statements to 
        those above that work (the declarations are not repeated):</p>
      <pre>#include &lt;string.h&gt; //For C string functions</pre>
      <pre>strcpy(str3, str1); //Moves str1 to str3
strcat(str3, str2); //Adds str2 to the end of str3
if (strcmp(str1, str3) == 0)//If these are equal</pre>
      <p>With all this work one can see why most programmers in 
        C++ choose to use a string class which allows operations like the first 
        ones listed. Classes like this will be explained in the C++ specific tutorial.</p>
      <p>Fortunately C has a way for simplifing this process of 
        processing and comparing strings. Sprintf works just like printf but sends 
        the data to a buffer (the string).</p>
      <pre>sprintf(str1, &quot;I am a %s and my spouse is a %s&quot;, str2, str3);
//str1 becomes &quot;I am a dad and my spouse is a mom&quot;</pre>
      <p>Sprintf simplifies most string operations. These operations 
        are the reason why the strings were declared with more characters than 
        they really needed, since in this case, str1 grew to be much larger. The 
        size of str1 needs to be big enough to hold the output from sprintf.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <p align="center"><a href="part3.htm"><strong>Move onto the 
        first section of part 3</strong></a></p>
      <!-- #EndEditable --></td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>

