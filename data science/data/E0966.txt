ID=E0966
URL=http://www.hh.se/stud/d98rolb/ansi/vsprintf().html
SIZE=2901
DATE=12/07/02
TIME=19:26:15
DATASET=C
HTML=<html>
<head>
  <title>vsprintf()</title>
  <meta name="Generator" content="GuideML V1.6">
  <meta http-equiv="Content-Type" content="text/html">
</head>
<body>
<a href="main.html"><img src="toc.gif" alt="CONTENTS" border=0></a><a href="alphalist.html"><img src="index.gif" alt="INDEX" border=0></a><a href="vprintf().html"><img src="prev.gif" alt="PREV" border=0></a><a href="wcstombs().html"><img src="next.gif" alt="NEXT" border=0></a><a href="http://www.hh.se/stud/d98rolb/programming.html"><img src="home.gif" alt="HOME" border=0></a>
<hr>
<pre>
vsprintf-Formatted write of a varying-length argument list to a string

Synopsis

        #include &#060;stdarg.h&#062;
        #include &#060;stdio.h&#062;

        x = vsprintf(buf, ctl, args);

        int x;                  /* number of characters placed in the   */
                          /*   output buffer                          */
        char *buf;          /* String for resulting image           */
        const char *ctl;  /* control string specifying formatting */
        va_list args;          /* items to be formatted                  */

Description

        This function is identical in capabilities to the <a href="sprintf().html"> sprintf </a>
        function, except that the argument list is passed as a va_list
        instead of on the stack. The argument list args must be
        initialized by the caller with a <a href="va_start().html"> va_start </a> macro (and any preceding
        <a href="va_arg().html"> va_arg </a> macros that it wants to call).  When terminated, it is the
        responsibility of the caller to call the <a href="va_end().html"> va_end </a> macro on the
        argument list.


Returns

        This function returns the number of characters placed in the
        output buffer (excluding the terminating NULL byte).

Example

        #include &#060;stdio.h&#062;
        #include &#060;stdarg.h&#062;

        /* Format an arbitrary message into a buffer */
        void getmsg(char *buffer, char *string, ...)
        {
            va_list arglist;

            va_start(arglist, string);

            vsprintf(buffer, string, arglist);

            va_end(arglist);
        }

        void main(void)
        {
            char buf[256];

            getmsg(buf, &quot;Formatted with %d argument.n&quot;, 1);
            printf(buf);
        }

See Also

        <a href="sprintf().html"> sprintf </a>
</pre>
<hr>
<a href="main.html"><img src="toc.gif" alt="CONTENTS" border=0></a><a href="alphalist.html"><img src="index.gif" alt="INDEX" border=0></a><a href="vprintf().html"><img src="prev.gif" alt="PREV" border=0></a><a href="wcstombs().html"><img src="next.gif" alt="NEXT" border=0></a><a href="http://www.hh.se/stud/d98rolb/programming.html"><img src="home.gif" alt="HOME" border=0></a>
</body>
</html>

