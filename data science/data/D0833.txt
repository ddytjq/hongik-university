ID=D0833
URL=http://www.jchq.net/tutorial/11_05Tut.htm
SIZE=12801
DATE=16/07/02
TIME=14:59:15
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
	<TITLE>The Java.io package</TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.2 (Linux)">
	<META NAME="CREATED" CONTENT="20010408;9175500">
	<META NAME="CHANGEDBY" CONTENT="Marcus Green">
	<META NAME="CHANGED" CONTENT="20010408;9191200">
	<link rel="stylesheet" href="tutor.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<TABLE WIDTH=95% BORDER=0 CELLPADDING=2 CELLSPACING=0 STYLE="page-break-before: always">
	<COL WIDTH=147*>
	<COL WIDTH=109*>
	<TR>
		<TD WIDTH=57% HEIGHT=104>
			<P><A HREF="introj2.htm"><IMG SRC="images/btnIndex.jpg" NAME="Graphic1" ALT="Return to Tutorial Index" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A><A HREF="introj2.htm"><BR><BR></A><A HREF="../index.htm"><IMG SRC="images/btnHome.jpg" NAME="Graphic2" ALT="Back to the home page of this site" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A>
						</P>
		</TD>
		<TD WIDTH=43%>
			<P ALIGN=RIGHT><IMG SRC="images/hat.gif" NAME="Graphic3" ALT="morterboard" ALIGN=BOTTOM WIDTH=118 HEIGHT=113 BORDER=0></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=57% HEIGHT=11>
			<H1 ALIGN=LEFT>Java2 Certification <BR>Tutorial 
			</H1>
		</TD>
		<TD WIDTH=43% BGCOLOR="#ff9900">
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<P>You can discuss this topic with others at
<A HREF="http://www.jchq.net/discus">http://www.jchq.net/discus</A><BR>Read
reviews and buy a Java Certification book at
<A HREF="http://www.jchq.net/bookreviews/jcertbooks.htm">http://www.jchq.net/bookreviews/jcertbooks.htm</A>
</P>
<HR SIZE=5 NOSHADE>
<H2>11) The java.io package 
</H2>
<H2>Objective 5)</H2>
<P><FONT FACE="Arial, Helvetica, sans-serif">Write appropriate code
to read, write and update files using FileInputStream,
FileOutputStream, and RandomAccessFile objects. </FONT>
</P>
<H3>FileInputStream and FileOutputStream</H3>
<P>The following example creates a text file called Out.txt and
writes the text Hello into it. If you type out the resulting file you
will see that file comes out as H e l l o (with a gap between each
letter) . I suspect this is because a character is 16 bits and
because ASCII is 8 bit, the upper 8 bits result in a blank character.</P>
<P><BR>This also illustrates the previous objective in that it uses
the FilterOutputStream descendent DataOutputStream. This allows human
readable chars to be written. If this example only used
FileOutputStream methods you would be limited to writing bytes or
ints. If you do this and then type the results to the console, it
just shows up as junk characters.</P>
<PRE>import java.io.*;

public class Fos{
                    String s = new String(&quot;Hello&quot;);
                    public static void main(String argv[]){
                    Fos f = new Fos();
                    f.amethod();
                   }



            public void amethod(){
                try{
                FileOutputStream fos = new FileOutputStream(&quot;Out.txt&quot;);
                //DataOutputStream allows you to write chars
                DataOutputStream dos = new DataOutputStream(fos);
                dos.writeChars(s);
                }catch(IOException ioe) {}
              }
}</PRE><P>
The following example will read the text file produced by the last
example and output the text to the console. Note that because the
previous program will have written Out.txt as unicode, if you create
a text file with an editor containing a a string such as &quot;Hello&quot;
, the following code will probably print out junk such as question
marks.</P>
<PRE>import java.io.*;

public class Fis{
                 public static void main(String argv[]){
                 Fis f = new Fis();
                 f.amethod();
                }


      public void amethod(){
                try{
                FileInputStream fis = new FileInputStream(&quot;Out.txt&quot;);
                DataInputStream dis = new DataInputStream(fis);
                while(true){
                    char c =dis.readChar();
                    System.out.println(c);
                    }
                }catch(IOException ioe) {}              
          }
}</PRE><H3>
<BR>RandomAccessFile</H3>
<P>The RandomAccessFile class is way out on it's own and doesn't fit
neatly with the Stream I/O classes. If you get answer possibilities
that mix instances of RandomAccessFile with other streams, then they
are almost certainly the wrong answers. RandomAccessFile is more like
the File class than the Stream classes. It is useful if you want to
move backwards and forwards with in a file without re-opening it.</P>
<P>For its constructor RandomAccessFile takes either an instance of a
File class or a string and a read/write mode argument. The mode
argument can be either &quot;r&quot; for read only or &quot;rw&quot;
can be read and written to. Memorise those two options, don't get
caught out in the exam by a bogus mode such as &quot;w&quot;, &quot;ro&quot;
or &quot;r+w&quot;;</P>
<P>Unlike the File class, if you attempt pass the name of a file as a
constructor, RandomAccessFile will attempt to open that file. If you
pass only the &quot;r&quot; parameter mode and the file does not
exist an exception will be thrown. If you pass the mode as &quot;rw&quot;
 RandomAccessFile will attempt to create the file in the underlying
operating system. 
</P>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=9%>
			<P><IMG SRC="images/key2.gif" NAME="Graphic4" ALIGN=BOTTOM WIDTH=106 HEIGHT=73 BORDER=0></P>
		</TD>
		<TD WIDTH=91%>
			<H4><FONT COLOR="#ff0000">The Random Access does not take a stream
			as a constructor parameter.</FONT></H4>
		</TD>
	</TR>
</TABLE>
<P><BR>This example will read the Out.txt file created by the
Fos.java example shown earlier.</P>
<P>Because of the blank high byte (not bit), the results show a
question mark with each letter.</P>
<PRE>import java.io.*;

public class Raf{
               public static void main(String argv[]){
                 Raf r = new Raf();
                 r.amethod();
                 }


            public void amethod(){
                 try{
                RandomAccessFile raf = new RandomAccessFile(&quot;Out.txt&quot;,&quot;rw&quot;);
                for(int i=0; i&lt;10;i++){
                                raf.seek(i);
                                char myc = raf.readChar();
                                //?Show for high bytes
                                System.out.println(myc);
                                }
                        } catch(IOException ioe) {}         
              }
}</PRE><H3>
&nbsp;</H3>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD WIDTH=11%>
			<P><IMG SRC="images/Quiz.gif" NAME="Graphic5" ALIGN=BOTTOM WIDTH=99 HEIGHT=101 BORDER=0>
						</P>
		</TD>
		<TD WIDTH=89%>
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<HR>
<H1>Questions</H1>
<H4>Question 1)</H4>
<P>Assuming any exception handling has been set up, which of the
following will create an instance of the RandomAccessFile class? 
</P>
<P>1) RandomAccessFile raf = new
RandomAccessFile(&quot;myfile.txt&quot;,&quot;rw&quot;);<BR>2)
RandomAccessFile raf = new RandomAccessFile( new
DataInputStream());<BR>3) RandomAccessFile raf = new
RandomAccessFile(&quot;myfile.txt&quot;);<BR>4) RandomAccessFile raf
= new RandomAccessFile( new File(&quot;myfile.txt&quot;)); 
</P>
<H4>Question 2)</H4>
<P>Which of the following statements are true?</P>
<P>1) The RandomAccessFile class allows you to move forwards and
backwards without re-opening the file<BR>2) An instance of
RandomAccessFile may be used as a constructor for FileInputStream<BR>3)
The methods of RandomAccessFile do not throw exceptions<BR>4)
Creating a RandomAccessFile instance with a constructor willl throw
an exception if the file does not exist.</P>
<H4>Question 3)</H4>
<P>Which of the following statements are true?</P>
<P>1) The FileInputStream can take either the name of a file or a an
instance of the File class as a constructor<BR>2) FileInputStream
will throw an exception if the file name passed as a constructor does
not exist<BR>3) The methods of the FileInputStream are especially
appropriate for manipulating text files<BR>4) The delete method of
the FileOutputStream class will remove a file from the operating
system</P>
<H4>Question 4)</H4>
<P>Question 4)</P>
<P>What will happen when you attempt to compile and run the following
code</P>
<PRE>import java.io.*;
public class Fos{
                    String s = new String(&quot;Hello&quot;);
                    public static void main(String argv[]){
                    Fos f = new Fos();
                    f.amethod();
                   }

                 public void amethod(){
                        FileOutputStream fos = new FileOutputStream(&quot;Out.txt&quot;);
                        fos.write(10);
              }
}</PRE><P>
<BR>1) Compile time error <BR>2) Runtime error <BR>3) Creation of a
file called Out.txt containing the text &quot;10&quot; <BR>4)
Creation of a file called Out.txt</P>
<H3>Question 5)</H3>
<P>Which of the following statements are true?</P>
<P>1) The seek method of FileInputStream will set the position of the
file pointer<BR>2) The read method of FileInputStream will read bytes
from a FileInputStream<BR>3) The get method of FileInputStream will
read bytes from a FileInputStream<BR>4) A FileOutputStream can be
closed using the close method</P>
<H1>Answers</H1>
<H4>Answer to Question 1)</H4>
<P>1) RandomAccessFile raf = new RandomAccessFile(&quot;myfile.txt&quot;,&quot;rw&quot;);</P>
<P>The RandomAccessFile is an anomoly in the Java I/O architecture.
It descends directly from Object and is not part of the Streams
architecture.</P>
<H4>Answer to Question 2</H4>
<P>1) The RandomAccessFile class allows you to move forwards and
backwards without re-opening the file<BR>4) Creating a
RandomAccessFile instance with a constructor willl throw an exception
if the file does not exist</P>
<H3>Answer to Question 3)</H3>
<P>&nbsp;</P>
<P>1) The FileInputStream can take either the name of a file or a an
instance of the File class as a constructor<BR>2) FileInputStream
will throw an exception if the file name passed as a constructor does
not exist<BR>Option 3 is a reasonable description of the Reader and
Writer classes, the FileInput and Output clases are designed to read
and write bytes rather than text. 
</P>
<H4>Answer to Question 4)</H4>
<P>1) Compile time error 
</P>
<P>This code will throw an error something like</P>
<P>Fos.java:10: Exception java.io.IOException must be caught, or it
must be declare in the throws clause of this method. FileOutputStream
fos = new FileOutputStream(&quot;Out.txt&quot;); 
</P>
<H4>Answer to Question 5)</H4>
<P>2) The read method of FileInputStream can be used to read bytes
from a FileInputStream<BR>4) A FileOutputStream can be closed using
the close method</P>
<P>Option one referring to a seek method is fairly implausible as the
concept of file pointer is appropriate to the RandomAccessFile rather
than the stream classes. The get method of option three is
implausible as the prefix get is almost always follwed by what you
are getting.</P>
<H3>&nbsp;</H3>
<P>&nbsp;</P>
<HR>
<H4><B>Other sources on this topic</B></H4>
<P>This topic is covered in the Sun Tutorial at
<BR><A HREF="http://java.sun.com/docs/books/tutorial/essential/io/">http://java.sun.com/docs/books/tutorial/essential/io/</A></P>
<P>The JLS on Java IO a bit academic and bare
<BR><A HREF="http://www.infospheres.caltech.edu/resources/langspec-1.0/javaio.doc.html">http://www.infospheres.caltech.edu/resources/langspec-1.0/javaio.doc.html</A></P>
<P>Richard Baldwin on
I/O<BR><A HREF="http://home.att.net/%7Ebaldwin.rg/Intermediate/Java060.htm">http://home.att.net/~baldwin.rg/Intermediate/Java060.htm</A></P>
<P>Oreilly have published a book specifically about Java I/O It
probably goes into more detail than is necesary for the Certificaiton
exam but browsing the online samples might give you some insights.
The book gets generally good reviews at www.amazon.com
<BR><A HREF="http://www.oreilly.com/catalog/javaio/">http://www.oreilly.com/catalog/javaio/</A>
</P>
<P>Joyothi has some handy tables for the I/O classes at
<BR><A HREF="http://www.geocities.com/SiliconValley/Network/3693/io.html">http://www.geocities.com/SiliconValley/Network/3693/io.html</A></P>
<P>Last updated<BR>14 Oct 2001<BR>copyright &copy; Marcus Green
2000<BR>most recent version at www.jchq.net</P>

</H3>
</BODY>
</HTML>

