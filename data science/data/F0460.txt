ID=F0460
URL=http://www.vb-helper.com/howto_activex_dll.html
SIZE=26528
DATE=09/07/2002
TIME=13:20:58
DATASET=Visual Basic
HTML=<HTML>
<META http-equiv="PICS-Label" content='(PICS-1.1 "http://www.rsac.org/ratingsv01.html" l gen true comment "RSACi North America Server" by "RodStephens@vb-helper.com" for "http://www.vb-helper.com" on "1998.03.17T18:18-0800" r (n 0 s 0 v 0 l 0))'>
<HEAD>
<TITLE>VB Helper: HowTo: Make an ActiveX DLL or EXE</TITLE>
<META NAME="Author" CONTENT="Rod Stephens">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META HTTP-EQUIV="Keywords" CONTENT="ActiveX DLL, ActiveX EXE">
<META NAME="Keywords" CONTENT="ActiveX DLL, ActiveX EXE">
<META NAME="Description" CONTENT="VB Helper: HowTo: Make an ActiveX DLL or EXE">
<META NAME="Copyright" CONTENT="Copyright 1997-2001, Rocky Mountain Computer Consulting, Inc.">
<META NAME="Rating" CONTENT="General">
<META NAME="Robots" CONTENT="All">
</HEAD>

<BODY BGCOLOR="#E1F3FF" BACKGROUND="bg_blue.jpg">

  <!-- This table contains the banner, menu column, and content. -->
  <TABLE WIDTH="100%" BORDER="0" CELLSPACING="0" CELLPADDING="0">
    <!-- ****** -->
    <!-- Banner -->
    <!-- ****** -->
    <TR><TD>
      <TABLE WIDTH="100%" BORDER="0" CELLSPACING="0" CELLPADDING="0" ALIGN="Left">
        <TR>
          <TD BACKGROUND="banner_mid.jpg"><IMG SRC="banner_l.jpg" WIDTH="410" HEIGHT="64"></TD>
          <TD BGCOLOR="#E1F3FF"><IMG SRC="banner_r.jpg" WIDTH="32" HEIGHT="64"></TD>
        </TR>
      </TABLE>
    </TD></TR>
    <TR><TD>&nbsp;</TD></TR>

    <!-- Menu column and content -->
    <TR><TD>
      <TABLE WIDTH="100%" BORDER="0" CELLSPACING="2" CELLPADDING="0">
        <!-- *********** -->
        <!-- Menu column -->
        <!-- *********** -->
        <TR>
          <TD ALIGN="Left" VALIGN="Top">
            <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
              <!-- Menu top -->
              <TR>
                <TD><IMG SRC="blue_ul.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_um.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_ur.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <!-- Menu entries -->
              <TR BGCOLOR="#7FCFFF">
                <TD BACKGROUND="blue_l.jpg" WIDTH="16">&nbsp;</TD>
                <TD><CENTER>
                  <A HREF="index.html"><B><FONT SIZE="+1">Home</FONT></B></A><BR>
                  &nbsp;<BR>
                  <A HREF="whats_new.html"><B>What's New</B></A><BR>
                  <A HREF="index_categories.html"><B>Index</B></A><BR>
                  <A HREF="books.html"><B>Books</B></A><BR>
                  <A HREF="links.html"><B>Links</B></A><BR>
                  <A HREF="http://www.topica.com/lists/VBHelperQA/read"><B>Q &amp; A</B></A><BR>
                  <A HREF="newsletter.html"><B>Newsletter</B></A><BR>
                  <A HREF="banners.html"><B>Banners</B></A><BR>
                  &nbsp;<BR>
                  <A HREF="mailto:feedback@vb-helper.com"><B>Feedback</B></A><BR>
                  <A HREF="tip_jar.html"><B>Tip Jar</B></A><BR>
                </CENTER></TD>
                <TD BACKGROUND="blue_r.jpg" WIDTH="16">&nbsp;</TD>
              </TR>

              <!-- Menu bottom -->
              <TR>
                <TD><IMG SRC="blue_ll.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_lm.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_lr.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <TR><TD HEIGHT="20" COLSPAN="3">&nbsp;</TR></TD>
              <!-- Old Menu top -->
              <TR>
                <TD><IMG SRC="magenta_ul.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_t.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_ur.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <!-- Menu entries -->
              <TR BGCOLOR="#E36BFF">
                <TD BACKGROUND="magenta_lside.jpg" WIDTH="16">&nbsp;</TD>
                <TD><CENTER>
                  <B><FONT SIZE="+1">Old Pages</FONT></B><BR>
                  &nbsp;<BR>
                  <A HREF="old_index.htm"><B>Old Index</B></A></BR>
                  <A HREF="sitemap.htm"><B>Site Map</B></A></BR>
                  <A HREF="whatsnew.htm"><B>What's New</B></A></BR>
                  &nbsp;<BR>
                  <A HREF="books.htm"><B>Books</B></A></BR>
                  <A HREF="howto.htm"><B>How To</B></A></BR>
                  <A HREF="tips.htm"><B>Tips &amp; Tricks</B></A></BR>
                  <A HREF="tutorial.htm"><B>Tutorials</B></A></BR>
                  <A HREF="stories.htm"><B>Stories</B></A></BR>
                  <A HREF="perform.htm"><B>Performance</B></A></BR>
                  <A HREF="essays.htm"><B>Essays</B></A></BR>
                  <A HREF="links.htm"><B>Links</B></A></BR>
                  <A HREF="q_and_a.htm"><B>Q &amp; A</B></A></BR>
                  <A HREF="newvb6.htm"><B>New in VB6</B></A></BR>
                  <A HREF="free.htm"><B>Free Stuff</B></A></BR>
                  <A HREF="pictures.htm"><B>Pictures</B></A></BR>
                </CENTER></TD>
                <TD BACKGROUND="magenta_rside.jpg" WIDTH="16">&nbsp;</TD>
              </TR>

              <!-- Old Menu bottom -->
              <TR>
                <TD><IMG SRC="magenta_ll.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_b.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_lr.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <!-- Other stuff in the menu column -->
              <TR><TD HEIGHT="100" COLSPAN="3">&nbsp;</TR></TD>

              <!-- ***************** -->
              <!-- Amazon Recommends -->
              <!-- ***************** -->
              <TR><TD COLSPAN="3" ALIGN="Center">
<!-- -->
                <SCRIPT SRC="http://rcm.amazon.com/e/cm?t=vbhelper&l=rc1&p=2&o=1" TYPE="text/JavaScript"></SCRIPT>
<!-- -->
                <NOSCRIPT>
                  <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="125">
                    <TR><TD>
                      <MAP NAME="boxmap">
                        <AREA SHAPE="RECT" COORDS="18, 263, 105, 274" HREF="http://rcm.amazon.com/e/cm/privacy-policy.html?o=1">
                        <AREA COORDS="0,0,10000,10000" HREF="http://www.amazon.com/exec/obidos/redirect-home/vbhelper">
                      </MAP>
                      <img src="http://rcm-images.amazon.com/images/G/01/associates/amzn_recommends/gnbox125x275.gif" width="125" height="275" border="0" usemap="#boxmap">
                    </TD></TR>
                  </TABLE>
                </NOSCRIPT>
              </TD></TR>
              <TR><TD HEIGHT="100" COLSPAN="3">&nbsp;</TR></TD>

              <!-- ******** -->
              <!-- Partners -->
              <!-- ******** -->
              <TR><TD COLSPAN="3" ALIGN="Center" BACKGROUND="sandpaper.gif"><A HREF="http://www.wiley.zcom/compbooks"><IMG SRC="wiley_logo.gif" BORDER="0" ALIGN="Center" WIDTH="77" HEIGHT="105"></TD></TR>
              <TR><TD COLSPAN="3"><FONT SIZE="1">&nbsp;</FONT></TD></TR>
              <TR><TD COLSPAN="3" ALIGN="Center"><A HREF="http://www.quepublishing.com"><IMG SRC="que.gif" BORDER="0" ALIGN="Center" WIDTH="121" HEIGHT="36"></A></TD></TR>
              <TR><TD COLSPAN="3"><FONT SIZE="1">&nbsp;</FONT></TD></TR>
              <TR><TD COLSPAN="3" ALIGN="Center"><A HREF="amazon.html"><IMG SRC="amazon_logo.gif" BORDER="0" ALIGN="Center" WIDTH="68" HEIGHT="65"></A></TD></TR>
              <TR><TD COLSPAN="3">&nbsp;</TR></TD>

              <!-- ********** -->
              <!-- More stuff -->
              <!-- ********** -->
            </TABLE>
          </TD>

          <!-- A little space between the menus and content -->
          <TD WIDTH="5">&nbsp;</TD>

          <!-- ******* -->
          <!-- Content -->
          <!-- ******* -->
          <TD WIDTH="100%" ALIGN="Left" VALIGN="Top">
            <TABLE WIDTH="100%" BORDER="0" CELLSPACING="0" CELLPADDING="0">
              <!-- How To Summary -->
              <TR><TD>
                <TABLE WIDTH="100%" BORDER="2" CELLSPACING="0" CELLPADDING="2">
                  <TR><TH ALIGN="Left">Title</TH><TD WIDTH="100%">Make an ActiveX DLL or EXE</TD></TR>
                  <TR><TH ALIGN="Left">Keywords</TH><TD>ActiveX DLL, ActiveX EXE</TD></TR>
                  <TR><TH ALIGN="Left">Categories</TH><TD>ActiveX</TD></TR>
                </TABLE>
              </TD></TR>

              <!-- Text content -->
              <TR><TD>&nbsp;<BR></TD></TR>
              <TR><TD>
<UL>
<A HREF="#why">Why?</A>
<BR>
<A HREF="#which">Which?</A>
<BR>
<A HREF="#making_project">Making an ActiveX DLL/EXE Project</A>
<BR>
<A HREF="#instancing">Instancing</A>
  <UL>
  <A HREF="#instancing_Private">Private</A>
  <BR>
  <A HREF="#instancing_PublicNotCreatable">PublicNotCreatable</A>
  <BR>
  <A HREF="#instancing_SingleUse">SingleUse</A>
  <BR>
  <A HREF="#instancing_GlobalSingleUse">GlobalSingleUse</A>
  <BR>
  <A HREF="#instancing_MultiUse">MultiUse</A>
  <BR>
  <A HREF="#instancing_GlobalMultiUse">GlobalMultiUse</A>
  </UL>
<A HREF="#test_projects">Test Projects</A>
<BR>
<A HREF="#binding">Binding</A>
  <UL>
  <A HREF="#early_binding">Early Binding</A>
  <BR>
  <A HREF="#late_binding">Late Binding</A>
  </UL>
</UL>
<P>
<HR COLOR="#00C0FF" WIDTH="75%">
<H3><A NAME="why">Why?</A></H3>
<P>
You make an ActiveX DLL or EXE to allow multiple applications to share the same code. This saves you time because you only need to write the code once. It also lets you devote extra time to debugging the shared code. If you are going to use the code in a lot of different applications, you can perform extra tests to make sure the code works correctly and still save time overall.
<P>
Centralizing the code also lets you fix, upgrade, and otherwise modify the shared library relatively easily. You can update the shared DLL/EXE and all of the applications that use it are automatically updated. The <A HREF="#binding">Binding</A> section talks more about this.
<P>

<HR COLOR="#00C0FF" WIDTH="75%">
<H3><A NAME="which">Which?</A></H3>
<P>
ActiveX DLLs and ActiveX EXEs are almost exactly the same in the ways they are built and used. In both cases, you build one or more classes that applications can use to do something. The big difference lies in where they are used.
<P>
An ActiveX DLL's code is executed within the main program's address space. It behaves as if the class was created within the main program's code. Because the code lies inside the program's address space, calling methods is very fast.
<P>
An ActiveX EXE's code is run in a separate process. When the main program calls an ActiveX EXE's method, the system marshalls the call to translate the parameters into the ActiveX EXE's address space, calls the method, translates the results back into the main program's address space, and returns the result. This is slower than running an ActiveX DLL's method inside the main program's address space.
<P>
Because of the difference in speed, an ActiveX DLL is almost always preferable. The reason ActiveX EXEs are useful is they can run on a different computer than the main program while an ActiveX DLL must run on the same computer as the main program.
<P>
If you want to build a library of shared routines to save programming and debugging, use an ActiveX DLL because it will give you better performance. Even if you need to distribute several copies of the DLL on different computers, it will probably be worthwhile.
<P>
If you want a centralized server library, use an ActiveX EXE. The EXE can sit on a central computer and work directly with that computer's resources. If you need to frequently change how the code works, you can easily change it in one place.
<P>

<HR COLOR="#00C0FF" WIDTH="75%">
<H3><A NAME="making_project">Making an ActiveX DLL/EXE Project</A></H3>
<P>
Start a new project and select ActiveX EXE or ActiveX DLL. Initially the project is named Project1 and contains a class named Class1. Change these to meaningful names. The model Microsoft has in mind is a DLL/EXE contains several related classes that each perform related functions. For example, a DLL might contain billing system classes named Customer, Product, and SalesPerson. The Customer class would contain methods for manipulating customer data. In this example, you might change the project name to BillingObjects. You would change Class1's name to Customer and add two more classes named Product and SalesPerson.
<P>
Give the class Public functions and methods to perform whatever tasks it should. The main program can only invoke the Public class methods.
<P>
<HR COLOR="#00C0FF" WIDTH="75%">
<H3><A NAME="instancing">Instancing</A></H3>
<P>
Set the classes' Instancing properties to determine how the object can be created. In VB6 the allowed values are:
<P>

<H4><A NAME="instancing_Private">Private</A></H4>
<P>
Code outside the DLL/EXE cannot create this object type. Other classes in the DLL/EXE can use this type of class as a helper but the main program cannot use it.
<P>

<H4><A NAME="instancing_PublicNotCreatable">PublicNotCreatable</A></H4>
<P>
The main program can use this type of class but cannot create new instances using the New keyword or with CreateObject. In this case, you need to provide some method within the other classes to create thue new object and return it to the main program.
<P>

<H4><A NAME="instancing_SingleUse">SingleUse</A></H4>
<P>
The main program can create the object. Every time you create a new object, the system makes a new ActiveX EXE instance to service the object you created. Among other things, if the EXE contains global variables then different objects you create get different copies of the variables. This option is allowed for ActiveX EXEs only.
<P>
<H4><A NAME="instancing_GlobalSingleUse">GlobalSingleUse</A></H4>
<P>
Similar to SingleUse except you can invoke the properties and methods of the class as if they were simple global functions. This option is allowed for ActiveX EXEs only. See GlobalMultiUse later for more details.
<P>

<H4><A NAME="instancing_MultiUse">MultiUse</A></H4>
<P>
The main program can create the object. When it does, the system makes an ActiveX DLL/EXE component to handle the object. If you make other objects, the system uses the same ActiveX DLL/EXE component to handle them. This can be a little confusing depending on whether you are building a DLL or EXE and whether an EXE is running on different computers.
<P>
If you build an ActiveX DLL, all programs run the DLL code in their own address spaces. That means different objects created in the same program will share the same component server so they could share global variables defined in the DLL. <B>However</B>, if the objects are all freed at the same time, the component server will shut down so any global values will be lost.
<P>
The code in the SharedDll directory available for download demonstrates this kind of sharing. The BillingObjects,vbp project contains the project named BillingObjects. This project holds a BAS module holding a public variable named g_TheNumber. This variable is visible to other code in the project but not to a main program using the DLL.
<P>
The BillingObjects project also contains a MultiUse class named Customer. This class has Property Let and Property Get procedures that set and get the value of g_TheNumber.
<P>
The main program uses two Customer objects like this:
              </TD></TR>

              <!-- Code content -->
              <TR><TD>&nbsp;<BR></TD></TR>
              <TR>
                <TD BACKGROUND="computer_paper.jpg">
                  <PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private m_Customer1 As Object
Private m_Customer2 As Object

Private Sub Form_Load()
    Set m_Customer1 = _
        CreateObject("BillingObjects.Customer")
    Set m_Customer2 = _
        CreateObject("BillingObjects.Customer")
End Sub

Private Sub cmdGet_Click()
    txtTheNumber.Text = m_Customer1.TheNumber
End Sub

Private Sub cmdSet_Click()
    m_Customer1.TheNumber = CInt(txtTheNumber.Text)
    txtTheNumber.Text = ""
End Sub</FONT></PRE>
              </TD></TR>

              <!-- Text content -->
              <TR><TD>&nbsp;<BR></TD></TR>
              <TR><TD>
In the DLL project, open the File menu and select Make BillingObjects.dll to build the DLL. Notice how the main program uses the CreateObject function to create its instances of the Customer class. The name of the class is the project's name followed by the class name: BillingObjects.Customer.
<P>
Notice also that the program creates the two Customer objects when it starts and it keeps those objects running. That means the component stays running so the objects share the value of g_TheNumber. If you use the Set button to save a value into this variable and then use the Get button to retrieve the value, you should get back the value you saved.
<P>
This behavior is what you would expect if you included the DLL's modules directly inside the main program. If you want that behavior, make the DLL MultiUse. If you want each class object to have its own global variables, make the DLL SingleUse. Or better still, move the variables inside the class so each object gets its own variables but you still only need one component instance. That will save some overhead.
<P>
Now you're probably saying, "Big deal. I could have shared values a lot more easily with simple global variables." You're right. The interesting thing is any program that uses a shared component server can share the values. Compile the test program and use Windows Explorer to launch two instances of the program. Enter 1234 in one instance and click Set. Then click Get in the other instance. The second program should see the value set by the first.
<P>
Note that this sometimes gets messed up and a component server is left running so you may end up with two programs running different component servers.
<P>
The ActiveX EXE project in the SharedExe directory demonstrates this sharing using an ActiveX EXE. It's basically the same as the previous example except is uses an ActiveX EXE instead of a DLL. Compile the test program and use Windows Explorer to launch two instances of the program. Enter 1234 in one instance and click Set. Then click Get in the other instance. The second program should see the value set by the first.
<P>
<H4><A NAME="instancing_GlobalMultiUse">GlobalMultiUse</A></H4>
<P>
This is similar to MultiUser except the main program can reference methods and properties as if they were globally declared. The code in the GlobalMultiUse directory demonstrates this. The ActiveX EXE code is the same as in the previous example except the Customer class is marked GlobalMultiUse. The main program uses the Customer's TheNumber property procedures like this:
              </TD></TR>

              <!-- Code content -->
              <TR><TD>&nbsp;<BR></TD></TR>
              <TR>
                <TD BACKGROUND="computer_paper.jpg">
                  <PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private Sub cmdGet_Click()
    <FONT COLOR="#008000">' Implicit use of:</FONT>
    <FONT COLOR="#008000">'   GlobalBillingObjects.Customer.TheNumber</FONT>
    txtTheNumber.Text = TheNumber
End Sub

Private Sub cmdSet_Click()
    <FONT COLOR="#008000">' Implicit use of:</FONT>
    <FONT COLOR="#008000">'   GlobalBillingObjects.Customer.TheNumber</FONT>
    TheNumber = CInt(txtTheNumber.Text)
    txtTheNumber.Text = ""
End Sub</FONT></PRE>
              </TD></TR>

              <!-- Text content -->
              <TR><TD>&nbsp;<BR></TD></TR>
              <TR><TD>
This code simply uses the TheNumber procedures as if they were globally declared. When the program invokes one of the methods using this global syntax, it creates an instance of the class to use its methods. It continues to use that instance whenever it needs to execute a global method.
<P>
If you explicitly create other instances of the class, you get new object not the global one. As far as I know, there is no way to get a direct reference to the global object instance.
<P>
This all seems pretty confusing so I would avoid using GlobalMultiUse and GlobalSingleUse. They let you use a syntax that is more similar to that used by DLLs built in C++ and other languages and that's probably why Microsoft implemented these. They hide the fact that there is an underlying class object, however, so they increase your chances for confusion.
</UL>
<P>

<HR COLOR="#00C0FF" WIDTH="75%">
<H3><A NAME="test_projects">Test Projects</A></H3>
<P>
The previous sections glossed over a few details dealing with test projects. After you create your ActiveX DLL project, you can add a test application. Open the File menu, select Add Project, and add a Standard EXE. That project can act as the main program to test your DLL. This is handy because it means you don't need to compile the DLL before you can test it. It also means you don't need to jump back and forth between the DLL and test application projects.
<P>
After you have the DLL code working, you can compile it into a DLL file. Then you can create independent applications to use it.
<P>

<HR COLOR="#00C0FF" WIDTH="75%">
<H3><A NAME="binding">Binding</A></H3>
<P>
You can bind your DLL or EXE either at runtime (late binding) or at design time (early binding). When you use early binding, you tell the main program all about the DLL. That lets it do things like provide intellisense for the DLL's methods. It is also faster than late binding.
<P>
<H4><A NAME="early_binding">Early Binding</A></H4>
<P>
To use early binding, load the main program, open the Project menu, and select References. Find your DLL in the list and select it. If the DLL project's name is BillingObjects, then look for an entry named BillingObjects. If you have had a couple versions of the project in different locations, you may see more than one entry. Click on one and look at the location displayed near the bottom of the dialog to see if you have the right one. If you can't figure it out, click the Browse button and find the DLL yourself. When you have selected the DLL, click OK.
<P>
Now the program can explicitly refer to the classes in the DLL. For example, it could declare and create a Customer object like this:
<P>
<PRE>    Dim customer1 As Customer
    Set customer1 = New Customer</PRE>
<P>
If you now type "customer1.", intellisense will be able to list the public methods provided by the Customer class. In this example, this is just the TheNumber property procedure.
<P>
Early binding has the disadvantage that it imposes more restrictions on the DLL's compatibility. If you change the DLL's methods as they are visible to outside code, the main program will no longer have a correct picture of the DLL. For example, if you add a new Public method to a class, the main program will not know about that method. When you try to create an instance of the class, the system will decide that the program is looking for an incompatible DLL version and will display the message:
<P>
<BLOCKQUOTE>
Class does not support Automation or does not support expected interface
</BLOCKQUOTE>
<P>
To fix this, load the main program, open the Project menu, and select References. Deselect the DLL and click OK. Then open the References dialog again and reselect the DLL. Now the program will work again.
<P>
Depending on your exact arrangement, you may also get the error:
<BLOCKQUOTE>
Type mismatch
</BLOCKQUOTE>
<P>
To fix this, recompile the main program.
<P>
<H4><A NAME="late_binding">Late Binding</A></H4>
<P>
To use late binding, declare references to DLL objects to have type Object. Then use the CreateObject statement to instantiate the objects like this:
<P>
<P>
<PRE>    Dim customer1 As Object
    Set customer1 = CreateObject("BillingObjects.Customer")</PRE>
<P>
<P>
This code creates an instance of the Customers class that is defined by the DLL project named BillingObjects. After this the program can use the Public properties and methods of the customer1 object just as if it had declared it using early binding.
<P>
Now if you change the DLL's public methods, the compiled executable will still work (if you removed the methods the program uses). The downside with late binding is you don't get intellisense and calling the DLL's methods takes longer than it does with early binding.
              </TD></TR>

              <!-- *************** -->
              <!-- Download button -->
              <!-- *************** -->

              <TR><TD><FONT SIZE="-2">&nbsp;</FONT></TD></TR>
              <TR><TD ALIGN="Center"><A HREF="HowTo/howto_activex_dll.zip"><IMG SRC="download.jpg" BORDER="0"></A></TD></TR>
              <TR><TD><FONT SIZE="-2">&nbsp;</FONT></TD></TR>

            </TABLE> <!-- End content table -->
          </TD>
        </TR> <!-- End row containing menu column and content -->
      </TABLE> <!-- End table containing menu column and content -->
    </TD></TR>

    <!-- ****** -->
    <!-- Footer -->
    <!-- ****** -->
    <TR><TD WIDTH="100%">
      <TABLE WIDTH="100%" BORDER="0" BGCOLOR="#87CEFA" CELLSPACING="0" CELLPADDING="0">
        <!-- Top row -->
        <TR>
          <TD BGCOLOR="#E1F3FF" ALIGN="Right" WIDTH="16"><IMG SRC="blue_ul.jpg" WIDTH="16" HEIGHT="16"></TD>
          <TD BACKGROUND="blue_um.jpg" COLSPAN="2" ALIGN="Center"><FONT SIZE="-2">
            Copyright &copy; 1997-2001 Rocky Mountain Computer Consulting, Inc. &nbsp; All rights reserved.
          </FONT></TD>
          <TD BGCOLOR="#E1F3FF"><IMG SRC="blue_ur.jpg" WIDTH="16" HEIGHT="16"></TD>
        </TR>

        <!-- Bottom row -->
        <TR>
          <TD BGCOLOR="#E1F3FF" ALIGN="Right" WIDTH="16"><IMG SRC="blue_ll.jpg" WIDTH="16" HEIGHT="16"></TD>
          <TD BACKGROUND="blue_lm.jpg"><FONT SIZE="-2">
            &nbsp;<SCRIPT LANGUAGE=JavaScript>document.write(document.URL)</SCRIPT></FONT></TD>
          <TD BACKGROUND="blue_lm.jpg" ALIGN="Right"><FONT SIZE="-2">
            Updated <SCRIPT LANGUAGE=JavaScript>document.write(document.lastModified)</SCRIPT> &nbsp;
          </FONT></TD>
          <TD BGCOLOR="#E1F3FF"><IMG SRC="blue_lr.jpg" WIDTH="16" HEIGHT="16"></TD>
        </TR>
      </TABLE>
    </TD></TR>
  </TABLE> <!-- End table containing banner, menu column + content, and footer -->

</BODY>
</HTML>
