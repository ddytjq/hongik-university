ID=D0216
URL=http://www.absolutejava.com/class-loaders/
SIZE=44943
DATE=16/07/02
TIME=14:40:05
DATASET=Java
HTML=<html>
<head>
<title>Absolute Java - Class Loaders</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../styles.css" type="text/css">
</head>

<body>
<p class="subtitle" style="margin-top:0px"><code>URLClassLoader</code> Makes Unnecessary, 
  Wasteful, and<br>
  Potentially Thread-Hanging HTTP Connections</p>
<div class="postSubtitle">All constructors for <code>URLClassLoader</code> take a <code>URL[]</code> 
    as a paramter. If an attempt is made to load a resource from a <code>URLClassLoader</code> 
    and that resource is located at one of the HTTP URLs used to construct the 
    <code>URLClassLoader</code>, several bad things can happen. Here's a quick 
    summary of the bad things that can happen:</div>
<blockquote>
<ol>
      <li> 
      <p>An unnecessary HTTP <code>GET</code> request will 
        always be made by the <code>URLClassLoader</code> to first &quot;verify&quot; 
        that the resource exists. This <code>GET</code> request is not used to 
        actually retrieve the resource from the <code>URLClassLoader</code> (that 
        occurs during a <i><b>second</b></i> HTTP <code>GET</code>), but only 
        to &quot;verify&quot; that it exists. This is HTTP message is completely 
        unnecessary and wasteful.</p>
    </li>
    <li> 
         <p>If the resource being retrieved is larger than 
        about 73 KB, the HTTP request mentioned in #1, above, can cause server 
        threads to hang and TCP connections to remain open for a long time, depending 
        on how the HTTP server was written.</p>
    </li>
  </ol>
</blockquote>
<div class="postSubtitle"> 
  <p>We'll look at code that illustrates these problems shortly.</p>
   <p>I'd like to address #1 first. The blame for this unnecessary HTTP request 
    does not lie directly with <code>URLClassLoader</code>, but rather with the 
    class, <code>sun.misc.URLClassPath</code>, which the <code>URLClassLoader</code> 
    uses. <code>sun.misc.URLClassPath</code> &quot;verifies&quot; that a resource 
    exists at a particular HTTP URL. How does it &quot;verify&quot; the resource's 
    existence? By trying to retrieve the resource, of course! &quot;Wasteful and 
    unnecessary!&quot;, you say? You betcha! Actually, I submitted this behavior to Sun as a bug. You can examine this bug (and vote for it if you like) on Sun's <a href="http://developer.java.sun.com/developer/bugParade/index.jshtml" target="_blank">Java Bug Parade site</a>. It is <a href="http://developer.java.sun.com/developer/bugParade/bugs/4636331.html" target="_blank">bug #4636331</a>.</p>
  <p><code>URLClassLoader</code> has several methods that retrieve resources. 
    In my testing, I have only experimented with the following three <code>URLClassLoader</code> 
    methods. Calling any of these methods will result in the extra HTTP request 
    but I am quite sure that other methods will also result in the extra HTTP 
    request:</p>
</div>
<ol>
  <ol>
    <li> <code>URL findResource(String name)</code> </li>
    <li> <code>URL getResource(String name)</code> </li>
    <li> <code>InputStream getResourceAsStream(String name)</code> </li>
  </ol>
</ol>
<div class="postSubtitle"> 
   <p>It seems <i><b>completey unnecessary</b></i> to me that <code>sun.misc.URLClassPath</code> 
    should &quot;verify&quot; the existence of resources. If the requested resource 
    did <i><b>not</b></i> exist it would be perfectly reasonable for a URL method 
    or an <code>InputStream</code> method to throw an exception when an attempt 
    was made to read from the resulting URL or <code>InputStream</code>. Retrieving 
    the resource to see if it exists is a bit like driving to your friend's house 
    to see if he's home and then driving back to your house to call him on the phone.</p>
  <p>The second issue described above is related to the first. When a <code>sun.misc.URLClassPath</code> 
    class (remember, this class is used internally by <code>URLClassLoader</code>) 
    attempts to &quot;verify&quot; the existence of a resource it does so by attempting 
    to retrieve the resouce&#151;well, actually, only the first 73 KB (approximately) 
    of the resource. After reading the first 73 KB it simply stops reading, leaving 
    its TCP connection to the HTTP server open, and leaving an HTTP server thread 
    waiting for someone to read the bytes it's written. In my experimentation, 
    the HTTP server has no indication of a problem with the connection: The TCP 
    connection is open as are the input and output streams. The only &quot;problem&quot;, 
    from the HTTP server's perspective, is that the client has stopped reading 
    from its <code>InputStream</code>.</p>
  <p>If you are writing the HTTP server that the <code>URLClassLoader</code> will 
    attempt to access, you will want to guard against this goofy behavior. You 
    will need to structure your server so that it can detect when a thread seems 
    to be waiting &quot;a long time&quot; for the data it's written to be read 
    by the client. If too much time elapses, you will want to close the <code>Socket</code>. 
    Actually, this is probably good advice to follow for any HTTP server you write, 
    regardless of whether or not you know a <code>URLClassLoader</code> will make 
    a request against it.</p>
  <p>Now, let's look at some code that proves what I've been talking about. Below 
    is a simple HTTP server called &quot;<code>LittleServer</code>&quot;. It has 
    a few <code>println()</code> calls to show when an incoming HTTP request arrives. 
    In addition, it creates a &quot;log file&quot; of the data written to the 
    <code>Socket</code>. The name of this log file is &quot;<code>serverGeneratedBytes_</code>&lt;<i><code>thread-name</code></i>&gt;.bin&quot; 
    where <i><code>thread-name</code></i> is the name of the thread servicing 
    the request. Keep in mind this is a toy example to illustrate the problematic 
    behavior. Please, do not attempt to run your e-commerce site using <code>LittleServer</code>.</p>


<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.io.*;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.net.*;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>class</span> LittleServer <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   <span class='codeKeyword'>boolean</span> keepRunning <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>true</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;   LittleServer<span class='codeSeparator'>(</span><span class='codeKeyword'>final</span> ServerSocket ss<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;      <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;         <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> run<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;            <span class='codeKeyword'>while</span><span class='codeSeparator'>(</span>keepRunning<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;               <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;                  startHandlerThread<span class='codeSeparator'>(</span>ss.accept<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>InterruptedIOException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;                  <span class='codeComment'>// ignore -- this happens every SO_TIMEOUT</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>IOException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;                  System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Error waiting for incoming request: "</span> <span class='codeOperatorLiteral'>+</span> e<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;                  keepRunning <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>false</span>;</td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span> <span class='codeComment'>// while()</span></td></tr><tr><td class='lineNumber'><pre>20</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>21</td><td><pre>&nbsp;            <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>22</td><td><pre>&nbsp;               ss.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>23</td><td><pre>&nbsp;               System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"*** LittleServer has closed server socket..."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>24</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>IOException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>25</td><td><pre>&nbsp;               System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Error in closing ServerSocket: "</span> <span class='codeOperatorLiteral'>+</span> e<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>26</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>27</td><td><pre>&nbsp;            System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"*** LittleServer has shut down."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>28</td><td><pre>&nbsp;         <span class='codeSeparator'>}</span> <span class='codeComment'>// run()</span></td></tr><tr><td class='lineNumber'><pre>29</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span>.start<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>30</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>31</td><td><pre>&nbsp;      <span class='codeComment'>// Give the LittleServer a few seconds to start up.</span></td></tr><tr><td class='lineNumber'><pre>32</td><td><pre>&nbsp;      <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span> Thread.sleep<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>3000</span><span class='codeSeparator'>)</span>; <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>InterruptedException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>33</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// LittleServer()</span></td></tr><tr><td class='lineNumber'><pre>34</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>35</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>36</td><td><pre>&nbsp;   <span class='codeComment'>// Starts a new Thread to handle the HTTP request.</span></td></tr><tr><td class='lineNumber'><pre>37</td><td><pre>&nbsp;   <span class='codeKeyword'>private</span> <span class='codeKeyword'>void</span> startHandlerThread<span class='codeSeparator'>(</span><span class='codeKeyword'>final</span> Socket s<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>38</td><td><pre>&nbsp;      <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>39</td><td><pre>&nbsp;         <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> run<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>40</td><td><pre>&nbsp;            <span class='codeComment'>// Writes to a log file to mirror the bytes actually written to the client.</span></td></tr><tr><td class='lineNumber'><pre>41</td><td><pre>&nbsp;            BufferedOutputStream actualBytesWritten <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>null</span>;</td></tr><tr><td class='lineNumber'><pre>42</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>43</td><td><pre>&nbsp;            <span class='codeComment'>// Writes to the client.</span></td></tr><tr><td class='lineNumber'><pre>44</td><td><pre>&nbsp;            BufferedOutputStream bos <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>null</span>;</td></tr><tr><td class='lineNumber'><pre>45</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>46</td><td><pre>&nbsp;            <span class='codeComment'>// Reads from the client.</span></td></tr><tr><td class='lineNumber'><pre>47</td><td><pre>&nbsp;            InputStream is <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>null</span>;</td></tr><tr><td class='lineNumber'><pre>48</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>49</td><td><pre>&nbsp;            System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"-----An HTTP request is being serviced by thread, \""</span> <span class='codeOperatorLiteral'>+</span></td></tr><tr><td class='lineNumber'><pre>50</td><td><pre>&nbsp;                               Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getName<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"\""</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>51</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>52</td><td><pre>&nbsp;            <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>53</td><td><pre>&nbsp;               <span class='codeKeyword'>final</span> <span class='codeKeyword'>int</span> TOTAL_BYTES_TO_WRITE <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>1000000</span>;</td></tr><tr><td class='lineNumber'><pre>54</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>55</td><td><pre>&nbsp;               <span class='codeComment'>// Print out the request...just for the heck of it.</span></td></tr><tr><td class='lineNumber'><pre>56</td><td><pre>&nbsp;               <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>10</span> <span class='codeOperatorLiteral'>*</span> <span class='codeIntegerLiteral'>1024</span><span class='codeSeparator'>]</span>;</td></tr><tr><td class='lineNumber'><pre>57</td><td><pre>&nbsp;               is <span class='codeOperatorLiteral'>=</span> s.getInputStream<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>58</td><td><pre>&nbsp;               <span class='codeKeyword'>int</span> requestLength <span class='codeOperatorLiteral'>=</span> is.read<span class='codeSeparator'>(</span>b<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>59</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>60</td><td><pre>&nbsp;               String request <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> String<span class='codeSeparator'>(</span>b, <span class='codeIntegerLiteral'>0</span>, requestLength, <span class='codeStringLiteral'>"US-ASCII"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>61</td><td><pre>&nbsp;               System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"-----The HTTP Request is\n======&gt;"</span> <span class='codeOperatorLiteral'>+</span> request <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"&lt;======"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>62</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>63</td><td><pre>&nbsp;               <span class='codeComment'>// Now write out the response. To illustrate this bug it's not necessary</span></td></tr><tr><td class='lineNumber'><pre>64</td><td><pre>&nbsp;               <span class='codeComment'>// to retrieve the requested resource. Instead, just return an arbitrary</span></td></tr><tr><td class='lineNumber'><pre>65</td><td><pre>&nbsp;               <span class='codeComment'>// stream of bytes and set the content type to */*.</span></td></tr><tr><td class='lineNumber'><pre>66</td><td><pre>&nbsp;               bos <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> BufferedOutputStream<span class='codeSeparator'>(</span>s.getOutputStream<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>67</td><td><pre>&nbsp;               String response <span class='codeOperatorLiteral'>=</span> <span class='codeStringLiteral'>"HTTP/1.0 200 OK\r\n"</span>;</td></tr><tr><td class='lineNumber'><pre>68</td><td><pre>&nbsp;               bos.write<span class='codeSeparator'>(</span>response.getBytes<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"US-ASCII"</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>69</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>70</td><td><pre>&nbsp;               response <span class='codeOperatorLiteral'>=</span> <span class='codeStringLiteral'>"Content-Length: "</span> <span class='codeOperatorLiteral'>+</span> TOTAL_BYTES_TO_WRITE <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"\r\n"</span>;</td></tr><tr><td class='lineNumber'><pre>71</td><td><pre>&nbsp;               bos.write<span class='codeSeparator'>(</span>response.getBytes<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"US-ASCII"</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>72</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>73</td><td><pre>&nbsp;               response <span class='codeOperatorLiteral'>=</span> <span class='codeStringLiteral'>"Content-Type: */*\r\n\r\n"</span>;</td></tr><tr><td class='lineNumber'><pre>74</td><td><pre>&nbsp;               bos.write<span class='codeSeparator'>(</span>response.getBytes<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"US-ASCII"</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>75</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>76</td><td><pre>&nbsp;               <span class='codeComment'>// As a logging mechanism, write all the bytes sent</span></td></tr><tr><td class='lineNumber'><pre>77</td><td><pre>&nbsp;               <span class='codeComment'>// to the client to a file. The name of the thread</span></td></tr><tr><td class='lineNumber'><pre>78</td><td><pre>&nbsp;               <span class='codeComment'>// servicing the request is appended to the name of</span></td></tr><tr><td class='lineNumber'><pre>79</td><td><pre>&nbsp;               <span class='codeComment'>// the file.</span></td></tr><tr><td class='lineNumber'><pre>80</td><td><pre>&nbsp;               String logFilename <span class='codeOperatorLiteral'>=</span> <span class='codeStringLiteral'>"serverGeneratedBytes_"</span> <span class='codeOperatorLiteral'>+</span></td></tr><tr><td class='lineNumber'><pre>81</td><td><pre>&nbsp;                      Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getName<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>".bin"</span>;</td></tr><tr><td class='lineNumber'><pre>82</td><td><pre>&nbsp;               actualBytesWritten <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> BufferedOutputStream<span class='codeSeparator'>(</span><span class='codeOperatorLiteral'>new</span> FileOutputStream<span class='codeSeparator'>(</span>logFilename<span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>83</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>84</td><td><pre>&nbsp;               System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"*** Started writing lot-o-bytes...from thread, \""</span> <span class='codeOperatorLiteral'>+</span></td></tr><tr><td class='lineNumber'><pre>85</td><td><pre>&nbsp;                                  Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getName<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"\""</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>86</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>87</td><td><pre>&nbsp;               <span class='codeKeyword'>for</span><span class='codeSeparator'>(</span><span class='codeKeyword'>int</span> i <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>; i <span class='codeOperatorLiteral'>&lt;</span> TOTAL_BYTES_TO_WRITE; <span class='codeOperatorLiteral'>++</span>i<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>88</td><td><pre>&nbsp;                  bos.write<span class='codeSeparator'>(</span>i<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>89</td><td><pre>&nbsp;                  actualBytesWritten.write<span class='codeSeparator'>(</span>i<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>90</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>91</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>92</td><td><pre>&nbsp;               System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"*** Finished writing lot-o-bytes...by thread, \""</span> <span class='codeOperatorLiteral'>+</span></td></tr><tr><td class='lineNumber'><pre>93</td><td><pre>&nbsp;                                  Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getName<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"\""</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>94</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>Exception e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>95</td><td><pre>&nbsp;               System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"----------------------------------"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>96</td><td><pre>&nbsp;               System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Thread \""</span> <span class='codeOperatorLiteral'>+</span> Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getName<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span></td></tr><tr><td class='lineNumber'><pre>97</td><td><pre>&nbsp;                                  <span class='codeStringLiteral'>"\" had an error in handling request: "</span> <span class='codeOperatorLiteral'>+</span> e<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>98</td><td><pre>&nbsp;               e.printStackTrace<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>99</td><td><pre>&nbsp;               System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"----------------------------------"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>100</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span> <span class='codeKeyword'>finally</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>101</td><td><pre>&nbsp;               <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>102</td><td><pre>&nbsp;                  bos.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>103</td><td><pre>&nbsp;                  is.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>104</td><td><pre>&nbsp;                  actualBytesWritten.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>105</td><td><pre>&nbsp;                  s.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>106</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>Exception e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>107</td><td><pre>&nbsp;                  System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"**********************************"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>108</td><td><pre>&nbsp;                  System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Thread \""</span> <span class='codeOperatorLiteral'>+</span> Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getName<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span></td></tr><tr><td class='lineNumber'><pre>109</td><td><pre>&nbsp;                                     <span class='codeStringLiteral'>"\" had an error in closing streams: "</span> <span class='codeOperatorLiteral'>+</span> e<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>110</td><td><pre>&nbsp;                  e.printStackTrace<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>111</td><td><pre>&nbsp;                  System.err.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"**********************************"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>112</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>113</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>114</td><td><pre>&nbsp;         <span class='codeSeparator'>}</span> <span class='codeComment'>// run()</span></td></tr><tr><td class='lineNumber'><pre>115</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span>.start<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>116</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// startHandlerThread()</span></td></tr><tr><td class='lineNumber'><pre>117</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// LittleServer</span></td></tr><tr><td class='lineNumber'><pre>118</td><td><pre>&nbsp;&nbsp;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->





  <p>Now let's look at a class that utilizes the <code>LittleServer</code> class. 
    The Tester class, below, creates a <code>URLClassLoader</code> which will 
    use <code>LittleServer</code> to retrieve its resources. The <code>Tester</code> 
    class is very straight-forward, I think. It requests a resource from the <code>URLClassLoader</code> 
    and it writes that resource to a log file, &quot;<code>clientBytesReceived.bin</code>&quot;. 
    When your run this program, you will see <u><i><b>two</b></i></u> HTTP requests 
    come in to <code>LittleServer</code>: One request is made by the <code>sun.misc.URLClassPath</code> 
    object to &quot;verify&quot; that the resource exists and the other request 
    is made to actually send the resource back to the client.</p>
  <p>Once the resource has been received, <code>Tester</code> goes into an infinite 
    loop on line 42 simply to show what threads are still running. From the output 
    produced by running <code>Tester</code> you will see that the thread that 
    originally received an HTTP request is still running. This is the thread that 
    received the request from <code>sun.misc.URLClassPath</code> to &quot;verify&quot; 
    that the resource exists. Keep in mind that associated with this &quot;hanging 
    thread&quot;, is an open TCP connection.</p>
   <p>On my system, running Windows 2000 with JDK v1.4.0, the TCP connection 
    eventually gets shut down after about 20 minutes.</p>
  <p>If you change line 17 in Tester to be a call to <code>getURL()</code> you 
    will still see an unnecessary HTTP request to &quot;verify&quot; the resource 
    exists. Once you actually use the URL to retrieve the resource (by calling 
    the <code>openStream()</code> method, for example) another HTTP request will 
    be made.</p>
  <p>Finally, if you change the code in <code>LittleServer</code> to use an <code>OutputStream</code> 
    rather than a <code>BufferedOutputStream</code> to write bytes to the client, 
    you will see that a &quot;socket write error&quot; occurs in the thread that 
    is sending bytes to the <code>sun.misc.URLClassPath</code> object. I believe 
    this simply has to do with the fact that a <code>BufferedOutputStream</code> 
    is buffering (i.e., holding back) bytes from being sent to the <code>Socket</code> 
    immediately. Changing <code>BufferedOutputStream</code> to <code>OutputStream</code> 
    results in this exception being thrown:</p>
</div>
<blockquote> 
  <pre>java.net.SocketException: Software caused connection abort: socket write error
        at java.net.SocketOutputStream.socketWrite0(Native Method)
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:105)
        at LittleServer$2.run(LittleServer.java:88)</pre>
</blockquote>

<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.io.*;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.net.*;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeKeyword'>throws</span> Exception <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      <span class='codeComment'>// Set up the server</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;      ServerSocket ss <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> ServerSocket<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>4444</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;      ss.setSoTimeout<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>3000</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;      LittleServer littleServer <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> LittleServer<span class='codeSeparator'>(</span>ss<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;      <span class='codeComment'>// Buffer to read in the response from the server.</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;      <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>10</span> <span class='codeOperatorLiteral'>*</span> <span class='codeIntegerLiteral'>1024</span><span class='codeSeparator'>]</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;      <span class='codeComment'>// Set up the URLClassLoader.</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;      URLClassLoader cl <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> URLClassLoader<span class='codeSeparator'>(</span><span class='codeOperatorLiteral'>new</span> URL<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> <span class='codeSeparator'>{</span><span class='codeOperatorLiteral'>new</span> URL<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"http://localhost:4444/"</span><span class='codeSeparator'>)</span><span class='codeSeparator'>}</span>, <span class='codeKeyword'>null</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;      InputStream is <span class='codeOperatorLiteral'>=</span> cl.getResourceAsStream<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"IgnoredByServerBlahBlahBlah"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;      <span class='codeComment'>// As a logging mechanism, write all the bytes received</span></td></tr><tr><td class='lineNumber'><pre>20</td><td><pre>&nbsp;      <span class='codeComment'>// from the server to a file.</span></td></tr><tr><td class='lineNumber'><pre>21</td><td><pre>&nbsp;      BufferedOutputStream bos <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> BufferedOutputStream<span class='codeSeparator'>(</span><span class='codeOperatorLiteral'>new</span> FileOutputStream<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"clientBytesReceived.bin"</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>22</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>23</td><td><pre>&nbsp;      <span class='codeComment'>// Total bytes read from the server.</span></td></tr><tr><td class='lineNumber'><pre>24</td><td><pre>&nbsp;      <span class='codeKeyword'>int</span> totalBytesRead <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>;</td></tr><tr><td class='lineNumber'><pre>25</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>26</td><td><pre>&nbsp;      <span class='codeComment'>// Bytes read during one read() call.</span></td></tr><tr><td class='lineNumber'><pre>27</td><td><pre>&nbsp;      <span class='codeKeyword'>int</span> bytesReadThisRead <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>;</td></tr><tr><td class='lineNumber'><pre>28</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>29</td><td><pre>&nbsp;      <span class='codeKeyword'>while</span><span class='codeSeparator'>(</span><span class='codeSeparator'>(</span>bytesReadThisRead <span class='codeOperatorLiteral'>=</span> is.read<span class='codeSeparator'>(</span>b<span class='codeSeparator'>)</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>!=</span> <span class='codeOperatorLiteral'>-</span><span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>30</td><td><pre>&nbsp;         totalBytesRead <span class='codeOperatorLiteral'>+=</span> bytesReadThisRead;</td></tr><tr><td class='lineNumber'><pre>31</td><td><pre>&nbsp;         bos.write<span class='codeSeparator'>(</span>b, <span class='codeIntegerLiteral'>0</span>, bytesReadThisRead<span class='codeSeparator'>)</span>; <span class='codeComment'>// write the bytes to the logging file.</span></td></tr><tr><td class='lineNumber'><pre>32</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>33</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>34</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"The total number of bytes read from the server was: "</span> <span class='codeOperatorLiteral'>+</span> totalBytesRead<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>35</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>36</td><td><pre>&nbsp;      is.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>37</td><td><pre>&nbsp;      bos.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>38</td><td><pre>&nbsp;      littleServer.keepRunning <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>false</span>;</td></tr><tr><td class='lineNumber'><pre>39</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>40</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"*** main() has ended...Let's see what threads are still hanging around...."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>41</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>42</td><td><pre>&nbsp;      <span class='codeKeyword'>while</span><span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>43</td><td><pre>&nbsp;         Thread<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> threads <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>100</span><span class='codeSeparator'>]</span>;</td></tr><tr><td class='lineNumber'><pre>44</td><td><pre>&nbsp;         <span class='codeKeyword'>int</span> totalThreads <span class='codeOperatorLiteral'>=</span> Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.getThreadGroup<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.enumerate<span class='codeSeparator'>(</span>threads<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>45</td><td><pre>&nbsp;         <span class='codeKeyword'>for</span><span class='codeSeparator'>(</span><span class='codeKeyword'>int</span> j <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>; j <span class='codeOperatorLiteral'>&lt;</span> totalThreads; <span class='codeOperatorLiteral'>++</span>j<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>46</td><td><pre>&nbsp;            System.out.println<span class='codeSeparator'>(</span>threads<span class='codeSeparator'>[</span>j<span class='codeSeparator'>]</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>47</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>48</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"\n\nPress CTRL-C to end...pausing 5 seconds...\n"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>49</td><td><pre>&nbsp;         <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span> Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.sleep<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>5000</span><span class='codeSeparator'>)</span>; <span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>Exception e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>50</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>51</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>52</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr><tr><td class='lineNumber'><pre>53</td><td><pre>&nbsp;&nbsp;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->




<div align="center" style="font-size:9pt; font-family:verdana,arial,helvetica; color: black">
<p>&nbsp;</p>
<p>Copyright &copy; 1999-2002, Tony LaPaso<br>
All Rights Reserved.
</p>
</div>
</body>
</html>

