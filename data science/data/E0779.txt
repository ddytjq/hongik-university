ID=E0779
URL=http://www.linuxdoc.org/HOWTO/C++Programming-HOWTO-16.html
SIZE=3442
DATE=12/07/02
TIME=19:24:22
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>C++ Programming HOW-TO: Templates</TITLE>
 <LINK HREF="C++Programming-HOWTO-17.html" REL=next>
 <LINK HREF="C++Programming-HOWTO-15.html" REL=previous>
 <LINK HREF="C++Programming-HOWTO.html#toc16" REL=contents>
</HEAD>
<BODY>
<A HREF="C++Programming-HOWTO-17.html">Next</A>
<A HREF="C++Programming-HOWTO-15.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc16">Contents</A>
<HR>
<H2><A NAME="s16">16. Templates</A></H2>

<P>Templates is a feature in C++ which enables generic programming, with
templates code-reuse becomes much easier.
<P>Consider this simple example:
<P>
<HR>
<PRE>
#include &lt;string>
#include &lt;iostream>

void printstring(const std::string&amp; str) {
    std::cout &lt;&lt; str &lt;&lt; std::endl;
}

int main()
{
    std::string str("Hello World");
    printstring(str);
}
</PRE>
<HR>
<P>Our <B>printstring()</B> takes a <B>std::string</B> as its first
argument, therefore it can only print strings. Therefore, to print a character
array, we would either overload the function or create a function with a new
name.
<P>This is bad, since the implementation of the function is now duplicated,
maintainability becomes harder.
<P>With templates, we can make this code re-usable, consider this function:
<P>
<HR>
<PRE>
template&lt;typename T> 
void print(const T&amp; var) {
    std::cout &lt;&lt; var &lt;&lt; std::endl;
}
</PRE>
<HR>
<P>The compiler will automatically generate the code for whatever type we pass
to the <B>print</B> function. This is the major advantage of templates.
Java doesn't have templates but Java uses inheritance to achieve generic programming.
For example in Java:
<P>
<HR>
<PRE>
public static void printstring( Object o ) {
  System.out.println( o );
}
You can pass in any object you want.
</PRE>
<HR>
<P>References:
<P>
<UL>
<LI> 
<A HREF="http://babbage.cs.qc.edu/STL_Docs/templates.htm">http://babbage.cs.qc.edu/STL_Docs/templates.htm</A>
Mirror at: 
<A HREF="http://www.mike95.com/c_plusplus/tutorial/templates">http://www.mike95.com/c_plusplus/tutorial/templates</A>
<P>
<P>
</LI>
<LI> This tells about #pragma template : -
<A HREF="http://www.dgp.toronto.edu/people/JamesStewart/270/9697f/notes/Nov25-tut.html">http://www.dgp.toronto.edu/people/JamesStewart/270/9697f/notes/Nov25-tut.html</A>
<P>
<P>
</LI>
<LI> Very GOOD site: 
<A HREF="http://www.cplusplus.com/doc/tutorial/tut5-1.html">http://www.cplusplus.com/doc/tutorial/tut5-1.html</A>
<A HREF="http://www.cplusplus.com/doc/tutorial">http://www.cplusplus.com/doc/tutorial</A>
<P>
<P>
</LI>
<LI> For certification of C++: go to 
<A HREF="http://examware.com">http://examware.com</A> and click on "Tutorials" and then C/C++ button
<P>
<P>
</LI>
<LI> C++ Open books: 
<A HREF="http://www.softpanorama.org/Lang/cpp.shtml">http://www.softpanorama.org/Lang/cpp.shtml</A>
and click on tutorials
<P>
<P>
</LI>
<LI> Templates tutorial : 
<A HREF="http://www.infosys.tuwien.ac.at/Research/Component/tutorial/prwmain.htm">http://www.infosys.tuwien.ac.at/Research/Component/tutorial/prwmain.htm</A></LI>
</UL>
<P>
<P>
<HR>
<A HREF="C++Programming-HOWTO-17.html">Next</A>
<A HREF="C++Programming-HOWTO-15.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc16">Contents</A>
</BODY>
</HTML>

