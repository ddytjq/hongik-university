ID=D0275
URL=http://www.absolutejava.com/articles/beware-the-daemons.html
SIZE=22730
DATE=16/07/02
TIME=14:41:46
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML>
<HEAD><TITLE>Absolute Java - Beware the Daemons</TITLE>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=ISO-8859-1">
<LINK REL="stylesheet" HREF="../styles.css" TYPE="text/css">
</HEAD>
<BODY>
<p class="subtitle" style="margin-top:0px">Beware the Daemons</p>
<div class="postSubtitle"><EM>This article is an updated and improved version of the article that I originally
wrote for the March, 2000 edition of <A HREF="http://www.sys-con.com/java/"
TARGET="_blank">Java Developer's Journal</A>.</EM>
</div>


<p>Have you ever wondered why it's necessary to call <CODE>System.exit()</CODE>
to force your Java UI application to exit? Have a look at the following code:
</p>

<p>
   <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
   <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
</p>
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.awt.*;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.awt.event.*;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Daemon1 <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      Frame f <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Frame<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;      f.addWindowListener<span class='codeSeparator'>(</span><span class='codeOperatorLiteral'>new</span> WindowAdapter<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;         <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> windowClosing<span class='codeSeparator'>(</span>WindowEvent evt<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;            System.exit<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>0</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;         <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;      f.setBounds<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>30</span>, <span class='codeIntegerLiteral'>30</span>, <span class='codeIntegerLiteral'>400</span>, <span class='codeIntegerLiteral'>400</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;      f.setVisible<span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Daemon1</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<p>After the <CODE>setVisible()</CODE> method has been called at line 15, the
<CODE>main()</CODE> method completes execution. Isn't a program supposed to end
when its <CODE>main()</CODE> method completes? The answer to this question
is rooted in a subtlety of Java's thread creation mechanism.<BR><BR>

Java makes a distinction between a <EM>user</EM> thread and another type of thread
known as a <EM>daemon</EM> thread. The difference between these two types of
threads is straightforward: If the Java runtime determines that the only threads
running in an application are daemon threads (i.e., there are no user threads in existence)
the Java runtime promptly closes down the application. In order for an application
to continue running, it must always have <i><b>at least one live user thread</b></i>. If this
requirement is not met the Java runtime will close down the application. In all
other respects the Java runtime treats daemon threads and user threads in exactly
the same manner.<BR>
	<BR>

When the <CODE>main()</CODE> method initially receives control from the Java
runtime it executes in the context of a user thread. For the sake of this discussion we'll call this thread
the <EM>main-method thread</EM>. As long as the main-method thread (or any other
user thread) remains alive your application will continue to execute. To see just
how a thread becomes a daemon thread, read on.<BR>
	<BR>

<STRONG><U>Going to the Devil</U></STRONG><BR>
There are two ways a thread can become a daemon thread (or a user thread, for
that matter) without putting your soul at risk. First, you can explicitly
specify a thread to be a daemon thread by calling <CODE>setDaemon(true)</CODE>
on a <CODE>Thread</CODE> object. Note that the <CODE>setDaemon()</CODE> method
must be called <EM>before</EM> the thread's <CODE>start()</CODE> method is invoked,
as the following snippet shows:</p>

<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;Thread t <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> run<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"I'm a man of wealth and taste..."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeSeparator'>}</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;t.setDaemon<span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;t.start<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<p>Once a thread has started executing (i.e., its <CODE>start()</CODE> method
has been called) its daemon status cannot be changed.</p>
<p>The second technique for creating a daemon thread is based on an often
overlooked feature of Java's threading behavior: If a thread creates a new
thread and does <EM>not</EM> call <CODE>setDaemon()</CODE> on the new thread before
it is started, the new thread will inherit the "daemon-status" of the creating
thread. For example, unless <CODE>setDaemon(false)</CODE> is called, all threads
created by daemon threads will also be daemon threads; likewise, all threads
created by user threads will be user threads.<BR>
	<BR>

Let's take a look at an example that illustrates this behavior:</p>

<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Daemon2 <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      Thread t1 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;         <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> run<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;            <span class='codeComment'>// Fire off a new thread.</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;            Thread t2 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;               <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> run<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;                  <span class='codeKeyword'>while</span><span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;                     System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Pleased to meet you."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;               <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;            <span class='codeSeparator'>}</span>; <span class='codeComment'>// end of t2</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;            t2.start<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;            System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"t1 is about to end."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;         <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span>; <span class='codeComment'>// end of t1</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;      <span class='codeComment'>// t1.setDaemon(true);</span></td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;      t1.start<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>20</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>21</td><td><pre>&nbsp;      <span class='codeKeyword'>for</span><span class='codeSeparator'>(</span><span class='codeKeyword'>int</span> i <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>; i <span class='codeOperatorLiteral'>&lt;</span> <span class='codeIntegerLiteral'>50</span>; <span class='codeOperatorLiteral'>++</span>i<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>22</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Hope you guess my name."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>23</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>24</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Main thread is about to end."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>25</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>26</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Daemon2</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->


<p>This program creates a thread, <EM>t1</EM>, whose only purpose in life is to create
a second thread, <EM>t2</EM>. <EM>t2</EM>'s destiny is to print the greeting,
"Pleased to meet you.", for all eternity. If you run this code you'll see that even
though the main-method thread and the <EM>t1</EM> thread have both ended, <EM>t2</EM>
goes on forever printing its message. This behavior is due to the fact that <EM>t2</EM>
inherited its status as a user thread from its creator, <EM>t1</EM>. <EM>t1</EM>, in turn,
inherited its status from <EM>its</EM> creator, the main-method thread which, as I said,
is always created by the Java runtime as a user thread.<BR>
	<BR>

By uncommenting line 18, <EM>t1</EM> becomes designated as a daemon. When <EM>t1</EM>
creates <EM>t2</EM>, it too becomes a daemon thread. As a result, when the main-method
thread exits the Java runtime will end the application since only remaining thread
(<EM>t2</EM>) is a daemon. This may or may not be the functionality you wanted or
expected.<BR><BR>

<STRONG><U>Exorcise the Daemons</U></STRONG><BR>
Now, applying what we've learned about daemon thread creation let's consider again why
it's usually necessary for a Java graphical application to call <CODE>System.exit()</CODE>
in order to end itself. As it turns out the <EM>first time</EM> an application creates
a <CODE>java.awt.Window</CODE> component (e.g., <CODE>Frame</CODE>, <CODE>JFrame</CODE>,
<CODE>JDialog</CODE>, etc.), Java's internal AWT plumbing creates several threads behind
the scenes. These AWT &quot;plumbing threads&quot; are responsible for handling event queue management and window
re-painting. Recall that a number of AWT and Swing components either extend <CODE>java.awt.Window</CODE> either directly or indirectly. If the creation of a <CODE>Window</CODE> occurs from
within a user thread (such as the main-method thread) these new AWT &quot;plumbing threads&quot; will <EM>also</EM>
be user threads and will therefore, not be shutdown simply because the main-method thread ends.
This explains why a user interface is visible even after the main-method thread ends.<BR>
	<BR>

As an aside you should note that the creation of a <CODE>java.awt.Window</CODE> is not
the only event that results in the creation of the aforementioned AWT &quot;plumbing threads&quot;. A simple
call to <CODE>java.awt.Toolkit.getDefaultToolkit()</CODE> will generate the creation of
the background AWT threads.

Let's put what we've learned to the test. The program below creates a <CODE>Frame</CODE>
from within a daemon thread. After the daemon thread is created the main thread goes
to sleep for 5 seconds and then ends. Once the main-method thread ends there are
no longer any user threads so the Java runtime shuts down the application.</p>

<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.awt.*;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Daemon3 <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;      Thread t1 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Thread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;         <span class='codeKeyword'>public</span> <span class='codeKeyword'>void</span> run<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;            Frame f <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Frame<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;            f.setBounds<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>30</span>, <span class='codeIntegerLiteral'>30</span>, <span class='codeIntegerLiteral'>400</span>, <span class='codeIntegerLiteral'>400</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;            f.setVisible<span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;         <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span>; <span class='codeComment'>// end of t1</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;      t1.setDaemon<span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;      t1.start<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;      <span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span> Thread.sleep<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>5000</span><span class='codeSeparator'>)</span>; <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;      <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>InterruptedException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Daemon3</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<p><STRONG><U>Don't Sell your Soul</U></STRONG><BR>
The moral of this story is that daemon threads should be used judiciously.
They were designed to be used as servants to their user thread
masters. When no more user threads exist daemon threads lose their reason for
living and the Java runtime steps in and mercifully ends their existence.<BR>
	<BR>

Because the life of a daemon thread can be a precarious one you should be
careful with the sort of tasks you assign to them. A somewhat contrived yet
illustrative example of their perils is a daemon thread dedicated to opening a
log file, appending to it, and then closing the log file on a predetermined, timed
interval. When the Java runtime determines that all user threads have ended it
will quickly kill the daemon logging thread, possibly resulting in an
inconsistent log file.  To avoid this it's best to structure your code so that
any work assigned to a daemon thread will be completed before all the user
threads complete.<BR>
	<BR>

At this point, you may be asking yourself, "So what good are these daemon threads?".
In fact their utility is extremely limited. The only advantage afforded by daemon threads
is that you can "create them and forget them"&#151;sometimes. Since daemon threads are
automatically stopped when no user threads exist you do not need to provide any
sort of signaling or flagging mechanism to tell a daemon thread to stop running.
Instead, you can rely on the Java runtime to stop them when all user threads end.
Of course, since daemon threads can be stopped abruptly by the Java runtime you should
not assign them any work that may result in data inconsistencies. When deciding whether
or not to use a daemon thread, continually ask yourself, "what if this daemon thread is stopped abruptly at this point in the code?". If you are sure there are no adverse repercussions, you
may want to consider a daemon thread, although as a rule, I would generally recommend against using them.</p>
<DIV ALIGN="center">
<P STYLE="font-size:9pt;font-family:verdana,arial,helvetica;color:black">
Copyright &copy; 1999-2001, Tony LaPaso<BR>All Rights Reserved.</P>
</DIV>

</BODY>
</HTML>
