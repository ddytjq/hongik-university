ID=D0241
URL=http://www.geocities.com/lkp550/java/lesson15.htm
SIZE=10459
DATE=16/07/02
TIME=14:41:03
DATASET=Java
HTML=<html>
<body background="notepad.gif">
<table width=90% align=right><tr><td>
<font face="arial">
<center><h2><u>Lesson Fifteen</u></h2></center>

<p>Now that we can create Frames and applets that use Frames, the other components that we can use in Frames and applets. One popular type of component is the <b>Checkbox</b>. Checkboxes are input boxes with labels. You can type the label as you create the checkbox (i.e. <i>Checkbox boxOne = new Checkbox("Click here to select");</i>), or you can add one later with <b>setLabel()</b> (i.e. <i>boxOne.setLabel("Select this box");</i>. Below is a program that shows how checkboxes work.<br>

<br>
<tt>
import java.awt.event.*;<br>
import java.awt.*;<br>
import java.applet.*;<br>
public class CarOptions extends Applet implements ItemListener<br>
{<br>
  String companyName = new String("North Star Ford");<br>
  Font bigFont = new Font("Arial", Font.PLAIN, 24);<br>
  Checkbox stereoBox = new Checkbox("AM/FM stereo");<br>
  Checkbox seatsBox = new Checkbox("bucket seats");<br>
  Checkbox acBox = new Checkbox("air conditioning");<br>
  Checkbox roofBox = new Checkbox("sun roof");<br>
  int stereoPrice = 200, seatsPrice = 300, acPrice = 600, roofPrice = 1000, totalPrice = 0;<br>
  public void init()<br>
  {<br>
    add(stereoBox);<br>
    stereoBox.addItemListener(this);<br>
    add(seatsBox);<br>
    seatsBox.addItemListener(this);<br>
    add(acBox);<br>
    acBox.addItemListener(this);<br>
    add(roofBox);<br>
    roofBox.addItemListener(this);<br>
  }<br>
  public void paint(Graphics gr)<br>
  {<br>
    gr.setFont(bigFont);<br>
    gr.setColor(Color.blue);<br>
    gr.drawString(companyName,10,100);<br>
    gr.drawString("Options price estimate",10,150);<br>
    gr.setColor(Color.black);<br>
    gr.drawString(Integer.toString(totalPrice),280,150);<br>
  }<br>
  public void itemStateChanged(ItemEvent check)<br>
  {<br>
    totalPrice = 0;<br>
    if(stereoBox.getState())<br>
    {<br>
      totalPrice += stereoPrice;<br>
    }<br>
    if(seatsBox.getState())<br>
    {<br>
      totalPrice += seatsPrice;<br>
    }<br>
    if(acBox.getState())<br>
    {<br>
      totalPrice += acPrice;<br>
    }<br>
    if(roofBox.getState())<br>
    {<br>
      totalPrice += roofPrice;<br>
    }<br>
    repaint();<br>
  }<br>
}
</tt>

<p>To see how this program works, <a href="Options.htm">click here</a> and try clicking each box on and off to see the cost of the options change as you select different options.

<p>Checkboxes are good for giving the user multiple options. However, in the previous program, you can see that you can select as many as you want. What if you only wanted the user to select one option? This is where the CheckboxGroup (also known as "radio buttons") come into play. Consider the program below:<br>

<br>
<tt>
import java.awt.event.*;<br>
import java.awt.*;<br>
import java.applet.*;<br>
public class DemoCheckBoxGroup extends Applet implements ItemListener<br>
{<br>
  String companyName = new String("Event Handlers Incorporated");<br>
  Font bigFont = new Font("Arial", Font.PLAIN, 24);<br>
  Checkbox cocktailBox = new Checkbox("Cocktails");<br>
  Checkbox dinnerBox = new Checkbox("Dinner");<br>
  int cocktailPrice = 300, dinnerPrice = 600, totalPrice = 200;<br>
  int beefPrice = 100, fishPrice = 75;<br>
  CheckboxGroup dinnerGrp = new CheckboxGroup();<br>
  Checkbox chickenBox = new Checkbox("Chicken", false, dinnerGrp);<br>
  Checkbox beefBox = new Checkbox("Beef", false, dinnerGrp);<br>
  Checkbox fishBox = new Checkbox("Fish", false, dinnerGrp);<br>
  public void init()<br>
  {<br>
    add(cocktailBox);<br>
    cocktailBox.addItemListener(this);<br>
    add(dinnerBox);<br>
    dinnerBox.addItemListener(this);<br>
    add(chickenBox);<br>
    chickenBox.addItemListener(this);<br>
    add(beefBox);<br>
    beefBox.addItemListener(this);<br>
    add(fishBox);<br>
    fishBox.addItemListener(this);<br>
  }<br>
  public void paint(Graphics gr)<br>
  {<br>
    gr.setFont(bigFont);<br>
    gr.setColor(Color.magenta);<br>
    gr.drawString(companyName,10,100);<br>
    gr.drawString("Event price estimate",10,150);<br>
    gr.setColor(Color.blue);<br>
    gr.drawString(Integer.toString(totalPrice),280,150);<br>
  }<br>
  public void itemStateChanged(ItemEvent check)<br>
  {<br>
    totalPrice = 200;<br>
    if(cocktailBox.getState())<br>
    {<br>
      totalPrice += cocktailPrice;<br>
    }<br>
    if(dinnerBox.getState())<br>
    {<br>
      totalPrice += dinnerPrice;<br>
      Checkbox dinnerSelection = dinnerGrp.getSelectedCheckbox();<br>
      if(dinnerSelection == beefBox)<br>
        totalPrice += beefPrice;<br>
      else if(dinnerSelection == fishBox)<br>
        totalPrice += fishPrice;<br>
      else<br>
        chickenBox.setState(true);<br>
    }<br>
    repaint();<br>
  }<br>
}
</tt>

<p>This program starts your party bill out at a base price of $200.00. If you click on "Cocktails", it adds $300.00 to the cost of the party. If you were to click on "Dinner", it adds $600.00 to the cost and the "Chicken" radio button is selected. To see how the whole program functions, <a href="Checkbox.htm">click here</a>. Sometimes radio buttons can be too many and clutter up the viewing area. This is where the <b>Choice object</b> would be an option. Like a "list box", the Choice object displays a list of options that the user can choose from. To allow for these options, the Choice object uses the same "get()" methods (i.e. getSelectedIndex()). With these methods, you can access arrays using variables created by the methods. To see how this is done, let's look at the following program:<br>

<br>
<tt>
import java.awt.event.*;<br>
import java.awt.*;<br>
import java.applet.*;<br>
public class DemoChoice extends Applet implements ItemListener<br>
{<br>
  String companyName = new String("Event Handlers Incorporated");<br>
  Font bigFont = new Font("Arial", Font.PLAIN, 24);<br>
  int totalPrice = 0;<br>
  Choice entertainmentChoice = new Choice();<br>
  int[] actPrice = {0,725,325,125};<br>
  public void init()<br>
  {<br>
    add(entertainmentChoice);<br>
    entertainmentChoice.addItemListener(this);<br>
    entertainmentChoice.add("No entertainment");<br>
    entertainmentChoice.add("Rock band");<br>
    entertainmentChoice.add("Pianist");<br>
    entertainmentChoice.add("Clown");<br>
  }<br>
  public void paint(Graphics gr)<br>
  {<br>
    gr.setFont(bigFont);<br>
    gr.setColor(Color.magenta);<br>
    gr.drawString(companyName,10,100);<br>
    gr.drawString("Price for entertainment",10,150);<br>
    gr.setColor(Color.blue);<br>
    gr.drawString(Integer.toString(totalPrice),280,150);<br>
  }<br>
  public void itemStateChanged(ItemEvent choice)<br>
  {<br>
    int actNum = entertainmentChoice.getSelectedIndex();<br>
    totalPrice = actPrice[actNum];<br>
    repaint();<br>
  }<br>
}
</tt>

<p>Now, instead of a clutter of radio buttons, you have one list. <a href="Choice.htm">Here's</a> how your program should look. If you'll notice, there's one minor problem, you can only choose one choice at a time. To remedy this, we can create a <b>List</b>. Similar to a Choice object, you can choose from an array. A List, however, displays all options at one time instead of a "drop-down" box. You can also choose multiple options from this List. To see how this is done, let's look at the program below:<br>

<br>
<tt>
import java.awt.event.*;<br>
import java.awt.*;<br>
import java.applet.*;<br>
public class DemoList extends Applet implements ItemListener<br>
{<br>
  String companyName = new String("Event Handlers Incorporated");<br>
  Font bigFont = new Font("Arial", Font.PLAIN, 24);<br>
  int totalPrice = 0;<br>
  List partyFavorList = new List();<br>
  int[] favorPrice = {8,10,25,35};<br>
  public void init()<br>
  {<br>
    add(partyFavorList);<br>
    partyFavorList.setMultipleMode(true);<br>
    partyFavorList.addItemListener(this);<br>
    partyFavorList.add("Hats");<br>
    partyFavorList.add("Streamers");<br>
    partyFavorList.add("Noise makers");<br>
    partyFavorList.add("Balloons");<br>
  }<br>
  public void paint(Graphics gr)<br>
  {<br>
    gr.setFont(bigFont);<br>
    gr.setColor(Color.magenta);<br>
    gr.drawString(companyName,10,100);<br>
    gr.drawString("Price for entertainment",10,150);<br>
    gr.setColor(Color.blue);<br>
    gr.drawString(Integer.toString(totalPrice),280,150);<br>
  }<br>
  public void itemStateChanged(ItemEvent check)<br>
  {<br>
    int[] favorNums = partyFavorList.getSelectedIndexes();<br>
    totalPrice = 0;<br>
    for(int x = 0; x < favorNums.length; ++x)<br>
      totalPrice += favorPrice[favorNums[x]];<br>
    repaint();<br>
  }<br>
}
</tt>

<p><a href="List.htm">Here's</a> the final product. Notice now that you select as many options as you want from a neat looking list.

<p><b><u>Question:</u></b> Ok, wait a minute! In HTML, I can create a form a lot easier and I can place things where I want. I can even do mouse events with JavaScript. How do you get the same outcome from Java?

<p><b><u>Answer:</u></b> True. You can do all of what you said with greater ease than with Java. But you are here to learn how you can do the SAME thing using Java. To show you how to make things look and work similar, let's look at the layout managers and the event model.
<br>
</font>
<hr>
<center><a href="lesson14.htm">Lesson Fourteen</a> | <a href="http://www.geocities.com/lkp550/JAVAHUT.htm">Home</a> | <a href="lesson16.htm">Lesson Sixteen</a><br>
<br>
If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.</center>

</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026499572" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026499572" ALT=1 WIDTH=1 HEIGHT=1>

