ID=D0666
URL=http://www.geocities.com/lkp550/java/lesson9.htm
SIZE=6155
DATE=16/07/02
TIME=14:54:34
DATASET=Java
HTML=<html>
<body background="notepad.gif">
<table width=90% align=right><tr><td>
<font face="arial">
<center><h2><u>Lesson Nine</u></h2></center>

<p>The new methods we'll be learning is the <b>paint()</b> and the <b>repaint()</b> methods. The header for the paint() method is <b>public void paint(Graphics g)</b>. This method runs when you start your applet. "repaint()" occurs when the window needs to be updated. The program below demonstrates how this works.

<br>
<br>
<tt>
import java.applet.*;<br>
import java.awt.*;<br>
import java.awt.event.*;<br>
public class DemoPaint extends Applet implements ActionListener<br>
{<br>
  Button pressMe = new Button("Press Me");<br>
  public void init()<br>
  {<br>
    add(pressMe);<br>
    pressMe.addActionListener(this);<br>
  }<br>
  public void paint(Graphics g)<br>
  {<br>
    System.out.println("in paint method");<br>
  }<br>
  public void actionPerformed(ActionEvent e)<br>
  {<br>
    repaint();<br>
  }<br>
}
</tt>

<p>Another helpful graphic method is the <b>drawString()</b> method. With drawString(), you need to send it thre agruments: a String (or group of text), an x-axis coordinate, and a y-axis coordinate. As with the program above, you need "public void paint(Graphics g)" to call drawString(). To use drawString() you'd type <b>g.drawString(myText, 50, 50);</b>, which would print whatever is in "myText" at the location of x=50, y=50. <a href="DemoGraphics.htm">Click here</a> to see how drawString() works.

<p>To further add to the appearance of your text, you can use the <b>setFont()</b> and <b>setColor()</b> methods. To create the font you want to use, you need to specify which font you want by typing "Font fontName = new Font("Helvetica", Font.ITALIC, 16)". Helvetica is the font we're using, we'll be printing it in ITALIC, and at 16 points in size. Then you need to call the setFont() method to add the changes. With setColor(), you can use any of the 13 constant Java colors <i>(i.e. black, blue, cyan, darkGray, gray, green, lightGray, magenta, orange, pink, red, white, or yellow)</i>, or you can create your own colors using the red, blue, and green color hues. You'd create your own colos by typing "Color colorName = new Color(125, 5, 255);". Then you can call setColor() to change the colors. Here's how you'd go about adding these changes:<br>

<br>
<tt>
  Font fontName = new Font("Helvetica", Font.ITALIC, 16);<br>
  public void paint(Graphics g)<br>
  {<br>
    g.setFont(fontName);<br>
    g.setColor(Color.blue);<br>
    g.drawString(firstSentence, 60, 100);<br>
    g.setColor(Color.green);<br>
    g.drawString(secondSentence, 90, 120);<br>
  }<br>
</tt>

<p>If you'd like to see how the changes affected the applet, <a href="DemoGraphics2.htm">click here</a>.

<p>You can also change the background color of you graphics by using the <b>setBackground()</b> method. To do this, you'd type <b>this.setBackground(Color.yellow);</b>. <a href="Background.htm">This link</a> will show you how the color has changed.

<p>The paint() method creates the Graphics objects for you, but there may be time that you want the graphics to respond to a mouse click or any other ActionPerformed() event. For this, you'd type <b>Graphics gr = getGraphics();</b> Here's how you can use your new object:<br>

<br>
<tt>
  public void actionPerformed(ActionEvent e)<br>
  {<br>
    Graphics gr = getGraphics();<br>
    gr.setColor(Color.blue);<br>
    gr.drawString(firstSentence, 60, 100);<br>
    gr.setColor(Color.green);<br>
    gr.drawString(secondSentence, 90, 120);<br>
  }<br>
</tt>

<p>The next few methods require very little explanation. The <b>drawLine()</b> method uses four coordinates to designate the start and end points. The same is similar with <b>drawRect()</b>, <b>fillRect()</b>, and <b>clearRect()</b> methods, only the four coordinates mark the upper-left corner and the width and height of the rectangles. <i>drawRect()</i> draws an open rectangle, <i>fillRect()</i> draws a solid rectangle, and <i>clearRect()</i> acts like fillRect(), only it uses the current background color. Here's how they work:<br>

<br>
<tt>
import java.applet.*;<br>
import java.awt.*;<br>
public class DemoRectangles extends Applet<br>
{<br>
  public void paint(Graphics gr)<br>
  {<br>
    gr.setColor(Color.red);<br>
    setBackground(Color.blue);<br>
    gr.fillRect(20,20,120,120);<br>
    gr.clearRect(40,40,50,50);<br>
  }<br>
}
</tt>

<p>Here's what the code above <a href="Rectangles.htm">produces</a>. You can also draw round rectangles with the <b>drawRoundRect()</b> method. As with the other rectangle method, this method requires the same coordinates plus two more arguments to represent the arc width and height of the rounded corners. Also, you can make solid rounded rectangles with the <b>fillRoundRect()</b>

<p><b><u>Question:</u></b> These are simple. Although they're neat graphics, I want to learn more advanced graphics. Can you do anything else with Java?

<p><b><u>Answer:</u></b> You act as if I was just going to leave you with what you've learned. Next, we'll look at more advanced graphic techniques.
<br>

<hr>
<center><a href="lesson8.htm">Lesson Eight</a> | <a href="http://www.geocities.com/lkp550/JAVAHUT.htm">Home</a> | <a href="lesson10.htm">Lesson Ten</a><br>
<br>
If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.</center>
</font>
</td></tr></table>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026500258" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026500258" ALT=1 WIDTH=1 HEIGHT=1>

