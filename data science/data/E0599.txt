ID=E0599
URL=http://www.rit.edu/~jpw9607/gne/html/classGNE_1_1Thread.html
SIZE=23256
DATE=12/07/02
TIME=19:22:34
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE::Thread class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE::Thread  Class Reference</h1>A class resembling a thread. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Thread_8h-source.html">Thread.h</a>&gt;</code>
<p>
<p>Inheritance diagram for GNE::Thread::
<p><center><img src="classGNE_1_1Thread.gif" usemap="#GNE::Thread_map" border="0"></center>
<map name="GNE::Thread_map">
<area href="classGNE_1_1ClientConnection.html" alt="GNE::ClientConnection" shape="rect" coords="0,56,197,80">
<area href="classGNE_1_1ConnectionEventGenerator.html" alt="GNE::ConnectionEventGenerator" shape="rect" coords="207,56,404,80">
<area href="classGNE_1_1EventThread.html" alt="GNE::EventThread" shape="rect" coords="414,56,611,80">
<area href="classGNE_1_1PacketStream.html" alt="GNE::PacketStream" shape="rect" coords="621,56,818,80">
<area href="classGNE_1_1ServerConnection.html" alt="GNE::ServerConnection" shape="rect" coords="828,56,1025,80">
<area href="classGNE_1_1Timer.html" alt="GNE::Timer" shape="rect" coords="1035,56,1232,80">
<area href="classGNE_1_1ListServerConnection.html" alt="GNE::ListServerConnection" shape="rect" coords="0,112,197,136">
</map>
<a href="classGNE_1_1Thread-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a0">Thread</a> (std::string name2=<a class="el" href="classGNE_1_1Thread.html#p1">DEF_NAME</a>, int priority2=<a class="el" href="classGNE_1_1Thread.html#p0">DEF_PRI</a>)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Creates a new thread, ready to run but not yet running.</em> <a href="#a0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a1" doxytag="GNE::Thread::~Thread"></a>
virtual&nbsp;</td><td valign=bottom><b>~Thread</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a2" doxytag="GNE::Thread::getName"></a>
std::string&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a2">getName</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the name of this thread.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a3">shutDown</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Tells this thread to shutdown, if it is in an infinite loop.</em> <a href="#a3">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a4">join</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A blocking call that returns when this thread terminates, or returns immediately if the thread has terminated.</em> <a href="#a4">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a5">detach</a> (bool delThis)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Detaches a running thread.</em> <a href="#a5">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a6" doxytag="GNE::Thread::isRunning"></a>
bool&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a6">isRunning</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Determine the running state of the thread.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a7">start</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Starts this thread running.</em> <a href="#a7">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a8" doxytag="GNE::Thread::getPriority"></a>
int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#a8">getPriority</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the priority of this class.</em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>Thread *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#d0">currentThread</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the <a class="el" href="classGNE_1_1Thread.html">Thread</a> object that represents this calling thread.</em> <a href="#d0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="d1" doxytag="GNE::Thread::sleep"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#d1">sleep</a> (int ms)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The currently running thread sleeps for the time given in milliseconds.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>bool&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#d2">waitForAllThreads</a> (int ms)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This method will wait for all threads that the user can control or see to end.</em> <a href="#d2">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="p0" doxytag="GNE::Thread::DEF_PRI"></a>
const int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#p0">DEF_PRI</a> = 0</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The default priority of a thread.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="p1" doxytag="GNE::Thread::DEF_NAME"></a>
const std::string&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#p1">DEF_NAME</a> = "Thread"</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The default name for a thread.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>const int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#p2">HIGH_PRI</a> = 1</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>A "boosted priority" for a thread.</em> <a href="#p2">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Protected Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#b0">run</a> ()=0</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This function is the starting point for this thread.</em> <a href="#b0">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Protected Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top>volatile bool&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Thread.html#n0">shutdown</a></td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This variable is set to true when this thread should exit.</em> <a href="#n0">More...</a><em></em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A class resembling a thread.
<p>
Derive your own classes from this class that implement the run function. Execution begins in the run method. All methods of this class are thread- safe.
<p>
This class is a wrapper for pthreads, so please read man pages or other documentation for the equivalent pthreads functions if you need to understand the specifics on the semantics of these functions.
<p>
NOTE: All threads must either be detached or joined. If you choose to detach a thread you may not access that <a class="el" href="classGNE_1_1Thread.html">Thread</a> object again. If you need to access it at a later time, keep a pointer, then at a later time call join on this pointer, then delete at some later time.
<p>
<dl compact><dt><b>
<a class="el" href="todo.html#_todo000006">Todo: </a></b><dd>
 Priorities are not yet implemented. </dl> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a name="a0" doxytag="GNE::Thread::Thread"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> GNE::Thread::Thread </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::string&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>name2</em> = <a class="el" href="classGNE_1_1Thread.html#p1">DEF_NAME</a>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>priority2</em> = <a class="el" href="classGNE_1_1Thread.html#p0">DEF_PRI</a></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates a new thread, ready to run but not yet running.
<p>
<dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>name2</em>&nbsp;</td><td>
the name of this thread </td></tr>
<tr><td valign=top><em>priority2</em>&nbsp;</td><td>
the priority this thread has </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a name="d0" doxytag="GNE::Thread::currentThread"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> Thread * GNE::Thread::currentThread </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the <a class="el" href="classGNE_1_1Thread.html">Thread</a> object that represents this calling thread.
<p>
<dl compact><dt><b>
Returns: </b><dd>
the currently running thread, or NULL if no <a class="el" href="classGNE_1_1Thread.html">Thread</a> object resembles this thread. </dl>    </td>
  </tr>
</table>
<a name="a5" doxytag="GNE::Thread::detach"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::Thread::detach </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">bool&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>delThis</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Detaches a running thread.
<p>
A thread must always either be joined or detached if system resources are to be recovered. A thread may not be joined after being detached. After detaching a thread, with delThis set to true, it is undefined to access it any longer outside of its own actual thread. In other words, at any moment after detach the <a class="el" href="classGNE_1_1Thread.html">Thread</a> instance could be be deleted because the thread terminated (or has already terminated). But, of course a running thread could still access itself as it clearly has not stopped and is still running.
<p>
If you care about reading the data from a thread after its completion, do not use detach and instead use join. It is useful to do this if you want to release OS thread resources and still keep the class running (as in the <a class="el" href="classGNE_1_1Connection.html">Connection</a> classes).
<p>
Pass false if the the thread should not auto-destruct when it ends -- this is useful when you declared a thread on the stack, or you want to poll for completion.<dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>delThis</em>&nbsp;</td><td>
true if the thread should delete itself when it finishes executing. </td></tr>
</table>
</dl><dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1Thread.html#a4">join</a> </dl>    </td>
  </tr>
</table>
<a name="a4" doxytag="GNE::Thread::join"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::Thread::join </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
A blocking call that returns when this thread terminates, or returns immediately if the thread has terminated.
<p>
A thread must always either be joined or detached if system resources are to be recovered. A thread may not be joined after being detached. <dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1Thread.html#a5">detach</a> </dl>    </td>
  </tr>
</table>
<a name="b0" doxytag="GNE::Thread::run"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> virtual void GNE::Thread::run </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [protected, pure virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is the starting point for this thread.
<p>
Derive your own class from <a class="el" href="classGNE_1_1Thread.html">Thread</a>, and implement this function. When this function returns, the thread ends. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1ClientConnection.html#b0">GNE::ClientConnection</a>, <a class="el" href="classGNE_1_1ConnectionEventGenerator.html#b0">GNE::ConnectionEventGenerator</a>, <a class="el" href="classGNE_1_1EventThread.html#b0">GNE::EventThread</a>, <a class="el" href="classGNE_1_1PacketStream.html#b0">GNE::PacketStream</a>, <a class="el" href="classGNE_1_1ServerConnection.html#b0">GNE::ServerConnection</a>, and <a class="el" href="classGNE_1_1Timer.html#b0">GNE::Timer</a>.    </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::Thread::shutDown"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::Thread::shutDown </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Tells this thread to shutdown, if it is in an infinite loop.
<p>
You will probably want to call join right after calling this to wait for the shutdown to complete which is dependant on the thread you are shutting down.
<p>
This function is virtual if the thread needs any additional actions to notify itself to shutdown, for example if it is waiting for some event on a <a class="el" href="classGNE_1_1ConditionVariable.html">ConditionVariable</a>.
<p>
You will want to call this function from the override to make sure that shutdown is set to true.
<p>
This function is safe to call multiple times, but you cannot undo a shutdown once it has been called. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1ConnectionEventGenerator.html#a4">GNE::ConnectionEventGenerator</a>, <a class="el" href="classGNE_1_1EventThread.html#a10">GNE::EventThread</a>, and <a class="el" href="classGNE_1_1PacketStream.html#a12">GNE::PacketStream</a>.    </td>
  </tr>
</table>
<a name="a7" doxytag="GNE::Thread::start"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::Thread::start </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Starts this thread running.
<p>
The thread will be marked as running before this function completes. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1EventThread.html#a12">GNE::EventThread</a>.    </td>
  </tr>
</table>
<a name="d2" doxytag="GNE::Thread::waitForAllThreads"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> bool GNE::Thread::waitForAllThreads </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>ms</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This method will wait for all threads that the user can control or see to end.
<p>
All of the threads created implicitly have a deterministic end so that when you destruct objects the threads associated with them are deleted. Therefore only threads that you have directly created and detached (rather than joined) might still be running. You can use this static method to wait for and therefore verify their completion, since when main exits, your threads will be terminated forcefully if they are running.
<p>
The implementation of this method is simple and therefore not intended to be used to create a program where you create detached threads and then use the main thread to sit in this function until the "real" program completes. It is meant solely as a method of definitvely verifying the completion of detached threads, and waiting short times for these threads to finish if needed. If you need to wait a long time, use join on the threads you've made, as this method is more efficient.<dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>ms</em>&nbsp;</td><td>
the amount of time to wait for the threads before giving up. This is used so a stalled or crashed thread will still allow you to terminate the program. </td></tr>
</table>
</dl><dl compact><dt><b>
Returns: </b><dd>
true if all threads have completed, or false if there are still some threads running and the method timed out. </dl>    </td>
  </tr>
</table>
<hr><h2>Member Data Documentation</h2>
<a name="p2" doxytag="GNE::Thread::HIGH_PRI"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const int GNE::Thread::HIGH_PRI = 1<code> [static]</code>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
A "boosted priority" for a thread.
<p>
This is optimized to give some extra priority for the network threads to reduce network latency in favor of a little in-game fps.     </td>
  </tr>
</table>
<a name="n0" doxytag="GNE::Thread::shutdown"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> volatile bool GNE::Thread::shutdown<code> [protected]</code>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This variable is set to true when this thread should exit.
<p>
Users that implement a <a class="el" href="classGNE_1_1Thread.html">Thread</a> class must respond to this if the thread wants to wait in an infinite loop. Threads that will eventually stop can respond only optionally to this, but if they last for a long time, shutting down all threads may take awhile. Responding to this flag usually takes nothing more than a while (!shutdown) {} loop.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Thread_8h-source.html">Thread.h</a><li>Thread.cpp</ul>
<hr><address><small>Generated on Fri Mar 8 03:03:23 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

