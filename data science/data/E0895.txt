ID=E0895
URL=http://www.linuxdoc.org/HOWTO/C++Programming-HOWTO-10.html
SIZE=2779
DATE=12/07/02
TIME=19:25:33
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>C++ Programming HOW-TO: Pointers are problems </TITLE>
 <LINK HREF="C++Programming-HOWTO-11.html" REL=next>
 <LINK HREF="C++Programming-HOWTO-9.html" REL=previous>
 <LINK HREF="C++Programming-HOWTO.html#toc10" REL=contents>
</HEAD>
<BODY>
<A HREF="C++Programming-HOWTO-11.html">Next</A>
<A HREF="C++Programming-HOWTO-9.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc10">Contents</A>
<HR>
<H2><A NAME="pointers"></A> <A NAME="s10">10. Pointers are problems </A></H2>

<P>Pointers are not required for general purpose programming. In modern
languages like Java there is no support for pointers (Java 
internally uses pointers). Pointers make
the programs messy and programs using pointers are very hard to read.
<P>Avoid using pointers as much as possible and use references. Pointers are really a
great pain. It is possible to write an application without using pointers.
<I>You should pointers only in those cases where references will not work.</I>
<P>A <B>reference</B> is an alias; when you create a reference, you initialize
it with the name of another object, the target. From the moment on, the reference
acts as an alternative name of the target, and anything you do to the reference
is really done to the target.
<P><B>Syntax of References:</B> Declare a reference by writing the type, followed by
the reference operator (&amp;), followed by the reference name. References
<B>MUST</B> be initialized at the time of creation.
For example -
<HR>
<PRE>
        int     weight;
        int     &amp; rweight = weight;

        DOG     aa;
        DOG     &amp; rDogRef = aa;
</PRE>
<HR>
<P><I>Do's</I> of references -
<UL>
<LI>Do use references to create an alias to an object</LI>
<LI>Do initialize all references</LI>
<LI>Do use references for high efficiency and performance of program.</LI>
<LI>Do use <B>const</B> to protect references and pointers whenever possible.</LI>
</UL>
<P><I>Do not's</I> of references -
<UL>
<LI><B>IMPORTANT: </B>Don't use references to NULL objects</LI>
<LI>Don't confuse the address of operator &amp; with reference operator. The references
are used in the declarations section (see Syntax of References above).</LI>
<LI>Don't try to reassign a reference</LI>
<LI>Don't use pointers if references will work</LI>
<LI>Don't return a reference to a local object</LI>
<LI>Don't pass by reference if the item referred to may go out of scope</LI>
</UL>
<P>
<P>
<P>
<HR>
<A HREF="C++Programming-HOWTO-11.html">Next</A>
<A HREF="C++Programming-HOWTO-9.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc10">Contents</A>
</BODY>
</HTML>

