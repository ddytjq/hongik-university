ID=E0421
URL=http://www.research.att.com/~bs/3rd_printing4.html
SIZE=17075
DATE=12/07/02
TIME=19:20:48
DATASET=C
HTML=<html>
<head>
<title>Stroustrup: Errata for 3rd printing of The C++ Programming Language</title>
</head>
<body bgcolor="FFFBFB">
<center>
<h1>Errata for 3rd printing of The C++ Programming Language</h1>
</center>
Errata for
<a href="homepage.html">
Bjarne Stroustrup</a>:
<a href="3rd.html">
The C++ Programming Language (3rd edition)</a>,
Addison-Wesley, 1997. ISBN0-201-88954-4.
Errata for the 3rd printing yielding the 4th.
<hr>
<h2>Errors and Clarifications</h2>
<p>
Preface:
<p>
Chapter 1:
<p>
pg 5	s/an insertion sort/a Shell sort/
<p>
Chapter 2:
<p>
pg 22	s/Fortran/Fortran77/
<p>
pg 30	s/push(stack/void push(stack/
<p>
pg 32	s/complex operator==/bool operator==/
<p>
pg 32	s/complex operator!=/bool operator!=/
<p>
pg 36	s/p.pop()/s_ref.pop()/
<p>
Chapter 3:
<p>
pg 65	s/template&lt;class C, class T>/template&lt;class C>/
<p>
Chapter 4:
<p>
pg 72	s/cin/std::cin/
<p>
pg 72	s/cout/std::cout/
<p>
pg 72	s/(secC.1)/(secC.1, C.3.4)/
<p>
Chapter 5:
<p>
pg 89	s/v2(10)/v2(i)/
<p>
pg 93	s/iostream.h/iostream/
<p>
pg 93	s/cout/std::cout/
<p>
pg 99	s/vec&lt;Pair>/vector&lt;Pair>/
<p>
pg 100	s/for (vector&lt;Pair>::const_iterator p = pairs.begin(), p!=pairs.end(), ++p)/for (vector&lt;Pair>::const_iterator p = pairs.begin(); p!=pairs.end(); ++p)/
<p>
Chapter 6:
<p>
pg 108	s/term+expression/expression+term/ same for -
<p>
pg 108	s/primary*term/term*primary/ same for /
<p>
pg 117	s/expr()/expr(false)/ twice
<p>
pg 118	add /if (input!=&cin) delete input;/ before the return
<p>
pg 121	s/(a=b&lt;c)?(d=e):(f=g)/a=((b&lt;c)?(d=e):(f=g))/
<p>
pg 133	s/String/string/ twice
<p>
pg 133	s/integer or pointer expression/arithmetic or pointer expression/
<p>
pg 134	s/only if p is./only if p is nonzero./
<p>
pg 135	s/The scope of d extends to/The scope of d extends from its point of declaration to/
<p>
pg 141	s/ccstring/cstring/
<p>
Chapter 7:
<p>
pg 148	Replace the first paragraph with
<pre>
A value must be returned from a function that is not declared void
(however, main() is special; see sec3.2). Conversely, a value cannot
be returned from a void function. For example:
<pre>
	int f1() { }			// error: no value returned
	void f2() { }			// ok

	int f3() { return 1; }	// ok
	void f4() { return 1; }	// error: return value in void function

	int f5() { return; }		// error: return value missing
	void f6() { return; }	// ok
</pre>
<p>
pg 148	Add at the end:
"A void function cannot return a value.However, a call of a void
function doesn't yield a value, so a voidfunction can use a call of a
void function as the expression in a return statement. For example:
<pre>
	void g(int* p);

	void h(int* p) { /* ... */ return g(p); }	// ok: return of ``no value''
</pre>
This form of return is important when writing template functions where the return type is a template parameter (see sec 18.4.4.2)."
(recent standards change)
<p>
pg 159	s/:0/:\n"/ twice
<p>
Chapter 8:
<p>
pg 191	s/(cin)/(*input)/
<p>
pg 191	Add /if (input!=&cin) delete input;/ before the return
<p>
pg 192	s/It is an obvious candidate/It, input, and no_of_errors are obvious candidates/
<p>
pg 192	s/using std::cin;//	s/(cin)/(*input)/
<p>
pg 193	s/(cin)/(*Driver::input)/ add statement deleting input and a return statement
<p>
Chapter 9:
<p>
pg 201	s/&lt;algo>/&lt;algorithm>/
<p>
pg 202	s/include guard (sec9.3.3)/for C++ compilers only (sec9.2.4)/
<p>
pg 209	s/	Token_value Lexer::curr_tok;/	Lexer::Token_value Lexer::curr_tok;/
<p>
pg 219	s/by returning 0./by returning a nonzero value./
<p>
pg 219	s/The order of invocation .../The destructor of an object created before
	a call of atexit(f) will be invoked after f is invoked.
	The destructor of an object created after a call of atexit(f)
	will be invoked before f is invoked./
<p>
Chapter 10:
<p>
pg 227	s/today.day/today.d/ s/today.month/today.m/ s/today.year/today.y/
<p>
pg 229	in set_default swap m and d twice
<p>
pg 243	s/otherwise, the compiler will try to generate one if needed./
	otherwise, the compiler will try to generate one if needed and
	if the user hasn't declared other constructors./
<p>
pg 245	s/Here, the Table constructor is/Here, the Table default constructor is/
<p>
pg 255	s/&lt;7/&lt;8/
<p>
pg 259	s/main()/int main()/
<p>
Chapter 11:
<p>
pg 275	s/-6/-4/
<p>
pg 276	s/X::operator(Z)/X::operator=(Z)/
<p>
pg 283	s/Matrix& operator+(const Matrix&, const Matrix&)/Matrix& operator+(const Matrix& arg1, const Matrix& arg2)/
<p>
Chapter 12:
<p>
pg 309	s/print()/print_employee()/
<p>
Chapter 13:
<p>
pg 333	s/cout <&lt;t/cout <&lt;p->val/
<p>
Chapter 14:
<p>
pg 373	s/Vector::Range/Vector::Size/
<p>
pg 379	s/PFV/unexpected_handler/ five times
<p>
pg 380	s/set_new_handler/set_unexpected/
<p>
pg 380	s/PFV/terminate_handler/ thrice
<p>
pg 382	s/an implementation knows that the standard C library doesn't
	throw exceptions,/an implementation knows that only a few
	standard C library functions (such as atexit() and sort())
	can throw exceptions,/
<p>
pg 385	s/ios_base::clear/ios_base::clear()/
<p>
Chapter 15:
<p>
pg 401	s/BB_slider/BBslider/
<p>
pg 409	s/BB_slider/BBslider/ four times
<p>
pg 411	s/p points to/r references/ (in comment)
<p>
pg 423	s/s*sizeof(Employee)/s*sizeof(Employee)+delta/
<p>
Chapter 16:
<p>
pg 443	add members:
<pre>
	typedef typename A::pointer pointer;			// pointer to element
	typedef typename A::const_pointer const_pointer;

</pre>
<p>
pg 447	s/T2/T/ thrice
<p>
pg 450	replace the last paragraph of sec16.3.4 with
	"A constructor given two arguments of the same type can lead to an
	apparent ambiguity. For example:
<pre>
	vector&lt;int> v(10,50);	// vector(size,value) or vector(iterator1,iterator2) ?
</pre>
	However, an int isn't an iterator and the implementation must
	ensure that this actually invokes
<pre>
	vector(vector&lt;int>::size_type, const int&, const vector&lt;int>::allocator_type&);
</pre>
	 rather than
<pre>
	vector(vector&lt;int>::iterator, vector&lt;int>::iterator, const vector&lt;int>::allocator_type&);
</pre>
	The library achieves this by suitable overloading of the
	constructors and handles the equivalent ambiguities for assign() and
	insert() (sec16.3.6) similarly." (recent standards resolution)

<p>
Chapter 17:
<p>
pg 478	s/operator&lt;(const Message& x) {/operator&lt;(const Message& x) const {/
<p>
pg 479	s/q.front()/q.top()/
<p>
pg 479	s/and then retrieving them using pq.pop()./and then retrieving
	them using pq.top() and pq.pop()./
<p>
pg 485	s/class value_compare : public binary_function&lt;T,T,bool> {/ class
	 value_compare : public binary_function&lt;value_type,value_type,bool> {/
<p>
pg 490	the function print_numbers() should look like this:
<pre>
	void print_numbers(const multimap&lt;string,int>& phone_book)
	{
		typedef multimap&lt;string,int>::const_iterator I;
		pair&lt;I,I> b = phone_book.equal_range("Stroustrup");
		for (I i = b.first; i != b.second; ++i) cout <<i->second <&lt;'\n';
	}
</pre>
<p>
pg 493	s/A basic_string (Chapter 20) argument does the same, except .../A basic_string
	(Chapter 20) argument does the same, except that the character '0' gives the
	bitvalue 0, the character '1' gives the bitvalue 1, and other
	characters cause an invalid_argument exception to be thrown.
<p>
pg 493	s/(non-'0' characters map to 1)/invalid_argument thrown/
<p>
pg 500	s/sec17.4.1.4/sec17.4.1.7/
<p>
pg 500	s/hash_map:://	within the declaration of hash_map
<p>
pg 501	s/&v.last()/&v.back()/
<p>
Chapter 18:
<p>
pg 513	s/c./ls./ twice in f()
<p>
pg 513	s/iseq(c)/iseq(ls)/ in f()
<p>
pg 524	s/ Extract_officers(list&lt;Person*> x)/Extract_officers(list&lt;Person*>& x)/
<p>
pg530	s/copy_backward(vc.begin(),vc.end(),v.begin());/copy_backward(vc.begin(),vc.end(),v.end());/
<p>
pg 536	s/Iter/In/ thrice
<p>
pg 536	s/operator()(const Club& c) {/operator()(const Club& c) const {/
<p>
pg 536	s/havn"));/havn")));/
<p>
pg 539	s/operator()(const Book& b1, const Book& b2)/operator()(const
	Book& b1, const Book& b2) const/
<p>
Chapter 19:
<p>
pg 556	s/vi.size()/vi+vi.size()/
<p>
pg 558	replace
<pre>
	ostream_iterator(ostream_type& s, const Ch* delimiter);
</pre>
by
<pre>
	ostream_iterator(ostream_type& s, const Ch* delim);	// write delim after each output value!
</pre>
<p>
pg 563	s/Iter pp =p;/Iter pp = c->begin();/
<p>
pg 565	terminate begin() and end() with a } each
<p>
pg 565	s/Checked_iter&lt;C> operator[]/typename C::reference_type operator[]/
<p>
pg 569 replace the definition of reserve by
<pre>
	void reserve(size_type n)
	{
		if (n<=capacity()) return;

		iterator p = alloc.allocate(n);
		iterator q = v;

		while (q&lt;v+size()) {				// copy existing elements
			alloc.construct(p++,*q);
			alloc.destroy(q++);
		}
		alloc.deallocate(v,capacity());		// free old space
		v = p;
		// ...	
	}
</pre>
<p>
pg 570	s/csize/size/
<p>
pg 576	s/delete[](void,/delete[](void*,/
<p>
Chapter 20:
<p>
pg 582	s/list-like/complete set of/
<p>
pg 582	s/(sec16.3.6)//
<p>
pg 583	s/find_first/find/ thrice
<p>
pg 585	s/Ch operator[]/const_reference operator[]/
<p>
pg 586	s/error: no string(const char*,int,int)/string(string(p),7,3), possibly expensive/
<p>
pg 586	s/fom p/from s/
<p>
pg 591	s/return s2.size()-s.size();/
	return (s2.size()==s.size()) ? 0 : (s.size()&lt;s2.size()) ? -1 : 1;/		(size is unsigned)
<p>
pg 591	/s/if (cmp_nocase(s,s2))/if (cmp_nocase(s,s2)== 0)/
<p>
pg 595	in f() s/int/string::size_type/ for each variable
<p>
pg 596	s/basic_string&lt;Ch>& s2/const basic_string&lt;Ch>& s2/
<p>
pg 596	s/Ch* p/const Ch* p/
<p>
pg 597	s/basic_string&lt;Ch>& s2/const basic_string&lt;Ch>& s2/
<p>
pg 599	s/19.4.4/19.4.6/
<p>
pg 601	s/ASCII characters/ASCII and similar character sets/
<p>
pg 601	s/'a'..'z' 'A'..'Z'/letter: 'a'..'z' 'A'..'Z' in C locale/
<p>
pg 601	s/'A'..'Z'/upper case letter: 'a'..'z' 'A'..'Z' in C locale/
<p>
pg 601	s/'a'..'z'/lower case letter: 'a'..'z' 'A'..'Z' in C locale/
<p>
pg 601	s/Use subscripting rather than iterators/Use at() rather than iterators and []/
<p>
pg 601	s/Use iterators rather than subscripting/Use iterators and [] rather than at()/
<p>
pg 603	s/20.3.10 and 20.3.10/20.3.9 and 20.3.10/
<p>
Chapter 21:
<p>
pg 616	s/>> (basic_istream&lt;Ch,Tr>&,/>> (basic_istream&lt;char,Tr>&,/ thrice
<p>
pg 616	s/If the state is good() or eof()/If the state is good()/
<p>
pg 617	s/When the state is fail()/When the state is fail() but not also bad()/
<p>
pg 620	s/from the usual char traits./from the usual char_traits for char./
<p>
pg 624	s/An ostream can be tied to at most one istream./A stream can have
	at most one ostream at a time tied to it./
<p>
pg 625	s/setstate(fail)/setstate(failbit)/
<p>
pg 629-630	Field width(n) applies to string and character <&lt;operations
	as well as numeric <&lt;operations. Thus, every example in sec21.4.4
	and sec21.4.5 must be modified so that they don't have a character
	output operation "cout <&lt;'('" before the numeric output operations
	for which the "width(4)" was intended. (recent standards clarification).
<p>
pg 633	s/and presented in &lt;iomanip>./. Manipulators taking
	io_base are presented in &lt;ios>. Manipulators taking
	istream and ostream are presented in &lt;istream>, and &lt;ostream>,
	respectively, and also in &lt;iostream>.
	The rest of the standard manipulators are presented in &lt;iomanip>./
<p>
pg 634	s/str.unsetf/s.unsetf/ twice
<p>
pg 634	s/cout <&lt;setw(4) <&lt;setfill('#') <&lt;'(' <&lt;12/cout <&lt;'(' << setw(4) << setfill('#') << 12/ (recent standards clarification)
<p>
pg 638	s/is_open();/is_open() const;/
<p>
pg 640	s/ios_Init/ios_base::Init/
<p>
pg 640	s/ios::Init/ios_base::Init/
<p>
pg 640	s/ios_base::count/ios_base::Init::count/
<p>
pg 645	s/mane char_type/make char_type/
<p>
pg 648	s/traits_type::eof/traits_type::eof()/
<p>
pg 655	13. s/sec21.10[8]/sec21.10[12]/
<p>
pg 655	14. s/sec21.10[9]/sec21.10[13]/
<p>
pg 656	26. s/display/a display() operation/
<p>
Chapter 22:
<p>
pg 669	s/23/32/
<p>
pg 671	change f() to
<pre>
	void f(valarray&lt;double>& d)
	{
		slice_array&lt;double>& v_even = d[slice(0,d.size()/2,2)];
		slice_array&lt;double>& v_odd = d[slice(1,d.size()/2,2)];
	
		v_odd *= 2;		// double every odd element of d
		v_even = 0;		// assign 0 to every even element of d
	}
</pre>
<p>
pg 677	s/23/32/
<p>
Chapter 23:
<p>
Chapter 24:
<p>
pg 751-754	The examples using an enabling condition are wrong. I forgot to apply DeMorgan's law when I transcribed the examples from an
<pre>
	if(A&&B) throw C();
</pre>
form to
<pre>
	Assert(!A || !B);
</pre>
erroneously and confusingly writing
<pre>
	Assert(A && B);
</pre>
For example, String::check() on pg 752 should be
<pre>
	inline void String::check()
	{
		Assert&lt;Invariant>(!string_check || (p && 0<=sz && sz&lt;TOO_LARGE && p[sz]==0));
	}
</pre>
and g() on pg 753 should be
<pre>
	void g(int* p, exception e)
	{	
		Assert(!g_check || p!=0, e);							// pointer is valid
		Assert(!g_check || (0<*p&&*p<=g_max),Bad_g_arg(p));	// value is plausible
		// ...
	}
</pre>
In places, the commentary reflects the confusion.
<p>
Chapter 25:
<p>
Appendix A:
<p>
pg 806	add "Declaring a valiable register is a hint to the compiler to
	optimize for frequent access; doing so is redundant with most
	modern compilers."
<p>
pg 813	s/A.10.1/A.11/
<p>
Appendix B:
<p>
pg 822	s/m1/m2/ for second occurrence of m1
<p>
pg 822	s/_basic suffix/basic_ prefix/
<p>
Appendix C:
<p>
pg 831	s/basic C++ basic source/C++ basic source/
<p>
pg 832	s/&us/&uc/
<p>
pg 832	s/pus =/puc =/
<p>
pg 840	s/22.4.7/22.4.6/
<p>
pg 842	s/use v.s if v.t==S; use v.i if v.t==I/use v.s if t==S; use v.i if t==I/
<p>
pg 855	s/Xrefd&lt;Record,map> x1/Xrefd&lt;Record,set> x2/
<p>
pg 856	s/TT&lt;i>/T&lt;I>/
<p>
pg 857	s/f1(/f2(/ for the second f1
<p>
pg 860	s/is Consider/Consider/
<p>
pg 861	s/f(T a)/T f(T a)/	s/g(1);/return g(1);/
<p>
pg 862	s/f(T a)/T f(T a)/	and add /return a;/ to f()
<p>
pg 866	s/List&lt;glob>::sort()/List&lt;Glob>::sort()/
<hr>
<h2>Typos</h2>
<p>
Chapter 1:
<p>
Chapter 2:
<p>
pg 31	s/rep stacks/Rep stacks/
<p>
pg 31	s/Stack::rep/Stack::Rep/
<p>
pg 33	s/p = new char[s];/v = new char[s];/
<p>
pg 33	s/delete[] p;/delete[] v;/
<p>
pg 35	s/Array_Stack/Array_stack/
<p>
pg 36	s/Array_Stack/Array_stack/ twice
<p>
pg 36	s/List_Stack/List_stack/ twice
<p>
pg 38	s/general type shape./general type Shape./
<p>
Chapter 3:
<p>
pg 46	s/is newline character/is the newline character/
<p>
pg 61	s/input_iterator/istream_iterator/ thrice
<p>
pg 61	s/output_iterator/ostream_iterator/
<p>
pg 63	s/shape/Shape/ six times
<p>
pg 65	s/int i =/double d =/
<p>
Chapter 4:
<p>
pg 71	s/implicitly converted bool/implicitly converted to bool/
<p>
pg 74	s/Chosing/Choosing/
<p>
pg 79	s/point;/Point;/
<p>
pg 81	s/one - 1)./one (1)./
<p>
pg 82	s/(sec8.2)/(sec8.2)./
<p>
Chapter 5:
<p>
pg 89	s/vector elements/array elements/
<p>
pg 97	s/i = 2;/i = 2/
<p>
Chapter 6:
<p>
pg 124	s/~ >>/~, >>/
<p>
pg 136	s/single variable./single variable or const./
<p>
pg136	s/unless the use explicitly/unless the user explicitly/
<p>
Chapter 7:
<p>
pg 147	s/};/}/ at the end of f()
<p>
Chapter 8:
<p>
pg 173	s/The arrows represents/The arrows represent/
<p>
pg 187	s/range_error/Range_error/
<p>
Chapter 9:
<p>
Chapter 10:
<p>
pg 223	s/tend to be easier/tends to be easier/
<p>
pg 226	s/};/}/ at the end of timewarp()
<p>
pg 230	s/m++/y++/
<p>
pg 239	s/fill2(/fill(/
<p>
pg 245	s/trice/thrice/
<p>
pg 258	s/intset/Intset/
<p>
pg 258	s/Expr::Eval/Expe::eval/
<p>
Chapter 11:
<p>
Chapter 12:
<p>
pg 321	s/Ival_islider/Ival_slider/
<p>
Chapter 13:
<p>
pg 328	s/so are the key operations/and so are the key operations/
<p>
pg 328	s/and that an argument C of type type will be used/and
	that a type argument C will be used/
<p>
Chapter 14:
<p>
Chapter 15:
<p>
Chapter 16:
<p>
pg 433	s/21.3.1/21.2.1/ for ostream
<p>
pg 433	s/character type/character classification/
<p>
pg 438	s/Link* put()/void put(Link*)/
<p>
pg 441	s/and code examples/and code examples,/
<p>
pg 433	s/Chapter 18/Chapter 19/
<p>
Chapter 17:
<p>
pg 463	resize() is for vector, list, and deque only
<p>
pg 469	s/!=, &lt;, etc./!=, >, etc/
<p>
pg 506	s/The hash functions/The hash function/
<p>
Chapter 18:
<p>
Chapter 19:
<p>
pg 577	[1] s/the algorithm the operators/the algorithm using the operators/
<p>
Chapter 20:
<p>
pg 582	s/16.3.1/16.3/
<p>
pg 591	s/(sec13.4)/sec13.4/
<p>
pg 596	s/size_type, i/size_type i/
<p>
pg 597	s/typeder/typedef/
<p>
pg 602	s/(20.3.13)/20.3.13/
<p>
Chapter 21:
<p>
pg 625	s/to prove/to provide/
<p>
pg 638 s/is like a ofstream/is like an ostream/
<p>
Chapter 22:
<p>
Chapter 23:
<p>
Chapter 24:
<p>
Chapter 25:
</body>
</html>


