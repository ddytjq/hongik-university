ID=E0280
URL=http://www.bcbdev.com/articles/vcdll.htm
SIZE=23822
DATE=12/07/02
TIME=19:19:29
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>BCBDEV.COM: Articles</TITLE>
   <META NAME="Author" CONTENT="Harold Howe">
</HEAD>
<BODY BGCOLOR="WHITE">

<CENTER>
<TABLE  BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="640">
<TR>
<TD WIDTH="240" NOWRAP ROWSPAN=2>
<IMG SRC="../images/articlebuilding.gif" BORDER=0 HSPACE="0">
</TD>
<TD WIDTH="400" NOWRAP COLSPAN=6 VALIGN="BOTTOM">
<IMG SRC="../images/bcbdev.gif" BORDER=0 HSPACE="0" >
</TD>
</TR>
<TR>
<TD WIDTH="7" VALIGN="TOP"><A href="http://www.bcbdev.com"> <IMG SRC="../images/home.gif"     ALT="Home"      BORDER=0 HSPACE="0" ></A></TD>
<TD WIDTH="75" VALIGN="TOP"><A href="../articles.htm">      <IMG SRC="../images/articles.gif" ALT="Articles"  BORDER=0 HSPACE="0" ></A></TD>
<TD WIDTH="55" VALIGN="TOP"><A href="../books.htm">         <IMG SRC="../images/books.gif"    ALT="Books"     BORDER=0 HSPACE="0" ></A></TD>
<TD WIDTH="90" VALIGN="TOP"><A href="../download.htm">      <IMG SRC="../images/download.gif" ALT="Downloads" BORDER=0 HSPACE="0" ></A></TD>
<TD WIDTH="55" VALIGN="TOP"><A href="../faqs.htm">          <IMG SRC="../images/faqs.gif"     ALT="FAQs"      BORDER=0 HSPACE="0" ></A></TD>
<TD WIDTH="55" VALIGN="TOP"><A href="../idetips.htm">       <IMG SRC="../images/tips.gif"     ALT="Tips"      BORDER=0 HSPACE="0" ></A></TD>
</TR>
<TR>
<TD COLSPAN=7>
<HR>



<H2>
Using Visual C++ DLLs in a C++Builder Project
</H2>

<P>
It is likely that one day your boss will ask you if you can create a GUI with C++Builder that interfaces to an existing
32 bit DLL compiled with Microsoft Visual C++. Often times, the original DLL source code won't be available to you,
either because the DLL comes from a third party vendor, or because the 22 year old intern just deleted the
<TT>\DLL\SRC</TT> directory from the network. Given a DLL and a header file, this article shows you how to call
the DLL from your C++Builder project.
</P>
<UL>
<LI><A HREF="#project"  >Calling DLL functions from a C++Builder project</A>
<LI><A HREF="#visualc"  >The problem with Visual C++ DLLs</A>
<LI><A HREF="#step1"    >Step 1: Identify calling conventions used by the Visual C++ DLL</A>
<LI><A HREF="#step2"    >Step 2: Examine the linker names in the DLL</A>
<LI><A HREF="#step3"    >Step 3: Generate an import library for the Visual C++ DLL</A>
<LI><A HREF="#step4"    >Step 4: Add the import library to your project</A>
<LI><A HREF="#conclusion" >Conclusion</A>
</UL>
</P>
<BR>
<H3>
<A NAME="project">Calling DLL functions from a C++Builder project</A>
</H3>
<P>
Calling a DLL that was created with Visual C++ presents C++Builder programmers with some unique challenges. Before we
attempt to tackle DLLs generated by Visual C++, it may be beneficial to review how you call a DLL that was created with
C++Builder. A DLL that was created with C++Builder presents fewer roadblocks than one that was made by Visual C++.
</P>
<P>
You need to gather three ingredients in order to call a DLL function from your C++Builder program: the DLL itself, a
header file with function prototypes, and an import library (you could load the library at runtime instead of using an
import library, but we will stick to the import library method for simplicity). To call a DLL function, add the import
library to your C++Builder project by selecting the <I>Project | Add To Project</I> menu option in C++Builder. Next,
insert a <TT>#include</TT> statement for the DLL header file in the C++ source file that needs to call one of the
DLL functions. The last step is to add the code that calls the DLL function.
</P>
<P>
Listings A and B contain source code for a DLL that can serve as a test DLL. Notice that the test code implements
two different calling conventions (<TT>__stdcall</TT> and <TT>__cdecl</TT>). This is for a very good reason. When
you try to call a DLL that was compiled with Visual C++, most of your headaches will result from disagreements due to
calling conventions. Also notice that one function does not explicitly list the calling convention that it uses. This
unknown function will act as a measuring stick for DLL functions that don't list their calling convention.
</P>
<pre>
<font color="navy">//------------------------------------------</font>
<font color="navy">// Listing A: DLL.H</font>

<font color="green">#ifdef __cplusplus</font>
<b>extern</b> <font color="blue">"C"</font> <b>{</b>
<font color="green">#endif</font>

<font color="green">#ifdef _BUILD_DLL_</font>
<font color="green">#define FUNCTION __declspec(dllexport)</font>
<font color="green">#else</font>
<font color="green">#define FUNCTION __declspec(dllimport)</font>
<font color="green">#endif</font>

FUNCTION <b>int</b> <b>__stdcall</b>   StdCallFunction<b>(</b><b>int</b> Value<b>)</b><b>;</b>
FUNCTION <b>int</b> <b>__cdecl</b>     CdeclFunction  <b>(</b><b>int</b> Value<b>)</b><b>;</b>
FUNCTION <b>int</b>             UnknownFunction<b>(</b><b>int</b> Value<b>)</b><b>;</b>

<font color="green">#ifdef __cplusplus</font>
<b>}</b>
<font color="green">#endif</font>


<font color="navy">//------------------------------------------</font>
<font color="navy">//Listing B: DLL.C</font>

<font color="green">#define _BUILD_DLL_</font>
<font color="green">#include "dll.h"</font>

FUNCTION <b>int</b> <b>__stdcall</b> StdCallFunction<b>(</b><b>int</b> Value<b>)</b>
<b>{</b>
    <b>return</b> Value <b>+</b> <font color="blue">1</font><b>;</b>
<b>}</b>

FUNCTION <b>int</b> <b>__cdecl</b>   CdeclFunction<b>(</b><b>int</b> Value<b>)</b>
<b>{</b>
    <b>return</b> Value <b>+</b> <font color="blue">2</font><b>;</b>
<b>}</b>

FUNCTION <b>int</b> UnknownFunction<b>(</b><b>int</b> Value<b>)</b>
<b>{</b>
    <b>return</b> Value<b>;</b>
<b>}</b>
</pre>
<P>
To create a test DLL from Listing A and Listing B, open up C++Builder and bring up the Object Repository by selecting
the <I>File | New</I> menu option. Select the DLL icon and click the OK button. C++Builder responds by creating a new project
with a single source file. That file will contain a DLL entry point function and some include statements. Now select
<I>File | New Unit</I>. Save the new unit as <TT>DLL.CPP</TT>. Cut and paste the text from Listing A and insert it into
the header file <TT>DLL.H</TT>. Then copy the code from Listing B and insert it into <TT>DLL.CPP</TT>. Make sure that
the <TT>#define</TT> for <TT>_BUILD_DLL_</TT> is placed above the include statement for <TT>DLL.H</TT>.
</P>
<P>
Save the project as <TT>BCBDLL.BPR</TT>. Next, compile the project and take a look at the files produced. C++Builder
generates both a DLL and an import library with a <TT>.LIB</TT> extension.
</P>
<P>
At this point, you have the three ingredients needed to call a DLL from a C++Builder project: the DLL itself, a header
file for function prototypes, and an import library to link with. Now we need a C++Builder project that will try to call
the DLL functions. Create a new project in C++Builder and save it to your hard drive. Copy the DLL, the import library,
and the <TT>DLL.H</TT> header file from DLL project to this new project. Select the <I>Project | Add To Project</I> menu
option and add the LIB file to the project. Next, add a <TT>#include</TT> statement in the main unit that includes
<TT>DLL.H</TT>. Finally, add code that calls the DLL functions. Listing C shows code that calls each the DLL functions
from Listing A and B.
</P>
<pre>
<font color="navy">//------------------------------------------</font>
<font color="navy">// Listing C: MAINFORM.CPP - DLLTest program</font>
<font color="green">#include &lt;vcl\vcl.h></font>
<font color="green">#pragma hdrstop</font>

<font color="green">#include "MAINFORM.h"</font>
<font color="green">#include "dll.h"</font>
<font color="navy">//---------------------------------------------------------</font>
<font color="green">#pragma resource "*.dfm"</font>
TForm1 <b>*</b>Form1<b>;</b>
<font color="navy">//---------------------------------------------------------</font>
<b>__fastcall</b> TForm1<b>:</b><b>:</b>TForm1<b>(</b>TComponent<b>*</b> Owner<b>)</b>
  <b>:</b> TForm<b>(</b>Owner<b>)</b>
<b>{</b>
<b>}</b>
<font color="navy">//---------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>Button1Click<b>(</b>TObject <b>*</b>Sender<b>)</b>
<b>{</b>
    <b>int</b> Value <b>=</b> StrToInt<b>(</b>Edit1<b>-></b>Text<b>)</b><b>;</b>
    <b>int</b> Result<b>=</b> StdCallFunction<b>(</b>Value<b>)</b><b>;</b>
    ResultLabel<b>-></b>Caption <b>=</b> IntToStr<b>(</b>Result<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//---------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>Button2Click<b>(</b>TObject <b>*</b>Sender<b>)</b>
<b>{</b>
    <b>int</b> Value <b>=</b> StrToInt<b>(</b>Edit1<b>-></b>Text<b>)</b><b>;</b>
    <b>int</b> Result<b>=</b> CdeclFunction<b>(</b>Value<b>)</b><b>;</b>
    ResultLabel<b>-></b>Caption <b>=</b> IntToStr<b>(</b>Result<b>)</b><b>;</b>
<b>}</b>
<font color="navy">//---------------------------------------------------------</font>
<b>void</b> <b>__fastcall</b> TForm1<b>:</b><b>:</b>Button3Click<b>(</b>TObject <b>*</b>Sender<b>)</b>
<b>{</b>
    <b>int</b> Value <b>=</b> StrToInt<b>(</b>Edit1<b>-></b>Text<b>)</b><b>;</b>
    <b>int</b> Result<b>=</b> UnknownFunction<b>(</b>Value<b>)</b><b>;</b>
    ResultLabel<b>-></b>Caption <b>=</b> IntToStr<b>(</b>Result<b>)</b><b>;</b>
<b>}</b>
</pre>
<BR>
<H3>
<A NAME="visualc">The problem with Visual C++ DLLs</A>
</H3>
<P>
In an ideal world, calling a DLL created with Visual C++ would be no more difficult than calling a DLL built with
C++Builder. Unfortunately, Borland and Microsoft disagree on several points. For starters, Borland and Microsoft
disagree on file formats for OBJs and import library files (Visual C++ uses the COFF library format while Borland uses
OMF). This means that you can't add a Microsoft generated import library to a C++Builder project. Thanks to the Borland
<TT>IMPLIB</TT> utility, the file format differences are surmountable.
</P>
<P>
The two products also disagree on linker naming conventions. This turns out to be the primary hurdle when trying to
call a Visual C++ DLL from C++Builder. Every function in a DLL or OBJ has a linker name. The linker uses the linker
name to resolve functions that were protoyped during compile time. The linker will generate an unresolved external error
if it can't find a function with a linker name that it thinks is needed by the program.
</P>
<P>
With regard to linker function names, Borland and Microsoft disagree on these points:
<UL>
<LI>1- Visual C++ sometimes decorates exported <TT>__stdcall</TT> functions.
<LI>2- Borland C++Builder expects imported <TT>__cdecl</TT> functions to be decorated.
</UL>
</P>
<P>
So why is this such a big deal? Take disagreement #1 regarding the <TT>__stdcall</TT> calling convention. If you create a DLL
with Visual C++ that contains a <TT>__stdcall</TT> function called <TT>MyFunction()</TT>, Visual C++ will give the
function a linker name that looks like <TT>_MyFunction@4</TT>. When the Borland linker tries to resolve calls made to
this function, it expects to find a function with the name <TT>MyFunction</TT>. Since the import library for the Visual
C++ DLL doesn't contain a function called <TT>MyFunction</TT>, the Borland linker reports an unresolved external, which
means it couldn't find the function.
</P>
<P>
Your attack strategy for overcoming these three problems will depend on how the Visual C++ DLL was compiled. I have
broken the process into four steps.
</P>

<BR>
<H3>
<A NAME="step1">Step 1: Identify calling conventions used by the Visual C++ DLL</A>
</H3>
<P>
In order to combat the naming convention entanglements, you must first determine what calling conventions are
used by functions in the DLL. You can determine this by investigating the header file for the DLL. The function
prototypes in the DLL header should look something like this:
</P>
<PRE>
    __declspec(dllimport) void <I>CALLING_CONVENTION</I> MyFunction(int nArg);
</PRE>
<P>
<TT>CALLING_CONVENTION</TT> should be <TT>__stdcall</TT> or <TT>__cdecl</TT> (see Listing A for
concrete examples). In many cases, the calling convention won't be specified, in which case it defaults to <TT>__cdecl</TT>.
</P>
<BR>
<H3>
<A NAME="step2">Step 2: Examine the linker names in the DLL</A>
</H3>
<P>
If step 1 reveals that the DLL utilizes the <TT>__stdcall</TT> calling convention, you will need
to examine the DLL to determine the naming convention that Visual C++ followed when it created the DLL. Visual C++
decorates <TT>__stdcall</TT> functions by default, but the DLL programmer can prohibit name
decorations if they add a DEF file to their project. Your work will be slightly more tedious if the DLL supplier did not
use a DEF file.
</P>
<P>
The command line <TT>TDUMP</TT> utility allows you to examine the linker names of functions exported by the DLL. The following
command invokes <TT>TDUMP</TT> on a DLL.
</P>
<PRE>
    TDUMP -ee -m MYDLL.DLL &gt; MYDLL.LST
</PRE>
<P>
<TT>TDUMP</TT> can report a ton of information about the DLL. We're only interested in functions exported by the DLL. The
<TT>-ee</TT> command option instructs <TT>TDUMP</TT> to list only export information. The <TT>-m</TT> switch tells <TT>TDUMP</TT>
to show the DLL functions in their raw format. Without the <TT>-m</TT> switch, <TT>TDUMP</TT> would attempt to de-mangle decorated
functions into a human readable format.  
If the DLL is large, you may want to redirect the output of <TT>TDUMP</TT> to a file (via the <TT>&gt; MYDLL.LST</TT> appendage).
</P>
<P>
The <TT>TDUMP</TT> output for the test DLL in Listing A and B looks like this:
</P>
<PRE>
    Turbo Dump  Version 5.0.16.4 Copyright (c) 1988, 1998 Borland International
                          Display of File DLL.DLL

    EXPORT ord:0000='CdeclFunction'
    EXPORT ord:0002='UnknownFunction'
    EXPORT ord:0001='_StdCallFunction@4'
</PRE>
<P>
Notice the leading underscore and the trailing <TT>@4</TT> on the <TT>__stdcall</TT> function. The <TT>__cdecl</TT> and
the unknown function don't contain any decorations. If the Visual C++ DLL had been compiled with a DEF file, the
decorations on the <TT>__stdcall</TT> function would not be present.
</P>
<BR>
<H3>
<A NAME="step3">Step 3: Generate an import library for the Visual C++ DLL</A>
</H3>
<P>
Here comes the hard part. Due to the library file format differences between C++Builder and Visual C++, you cannot
add an import library created with Visual C++ to your C++Builder project. You must create an OMF import library using
the command line tools that come with C++Builder. Depending out what you found in the first two steps, this step will
either go smoothly, or it could take some time.
</P>
<P>
As stated earlier, C++Builder and Visual C++ don't agree on how functions should be named in a DLL. Due to naming
convention differences, you will need to create an aliased import library if the DLL implements calling conventions
where C++Builder and Visual C++ disagree. Table A lists the areas of disagreement.
</P>
<PRE>
<B>Table A: Visual C++ and C++Builder naming conventions</B>

Calling convention  VC++ name       VC++ (DEF used)     C++Builder Name
-----------------------------------------------------------------------
__stdcall           _MyFunction@4   MyFunction          MyFunction
__cdecl             MyFunction      MyFunction          _MyFunction
</PRE>
<BR>
<P>
The C++Builder column lists function names that the Borland linker expects to see. The first Visual C++ column
lists the linker names that Visual C++ generates when the Visual C++ project does not utilize a DEF file. The
second Visual C++ column contains linker names that Visual C++ creates when a DEF file is used. For things to go
smoothly, the C++Builder name should agree with the Visual C++ name. Notice that the two products agree in only one
place: <TT>__stdcall</TT> functions where the Visual C++ project contained a DEF file. For the remaining scenarios,
you will need to create an import library that aliases the Visual C++ name to a C++Builder compatible name.
</P>
<P>
Table A shows that there are several combinations that you may need to deal with when creating the import
library. I have separated the combinations into two cases.
</P>
<H4>Case 1: The DLL contains only <TT>__stdcall</TT> functions and the DLL vendor utilized a DEF file.</H4>
<P>
Table A reveals that VC++ and C++Builder agree only when the DLL uses <TT>__stdcall</TT> functions. Furthermore, the DLL
must be compiled with a DEF file to prevent VC++ from decorating the linker names. The header file will tell you if the
<TT>__stdcall</TT> calling convention was used (Step 1), and <TT>TDUMP</TT> will reveal whether or not the functions
are decorated (Step 2). If the DLL contains <TT>__stdcall</TT> functions that are not decorated, then Visual C++ and
C++Builder agree on how the functions should be named. You can create an import library by running <TT>IMPLIB</TT> on
the DLL. No aliases are needed.
</P>
<P><TT>IMPLIB</TT> works like this:
</P>
<PRE>
    IMPLIB (destination lib name) (source dll)
</PRE>
<P> For example,</P>
<PRE>
    IMPLIB mydll.lib mydll.dll
</PRE>

Create the import library and move on to step 4.

<H4>Case 2: The DLL contains <TT>__cdecl</TT> functions or decorated <TT>__stdcall</TT> functions.</H4>
<P>
If your DLL vendor is adamant about creating DLLs that are compiler independent, then you have a good chance of falling
into the Case 1 category. Unfortunately, odds are you won't fall into the Case 1 group for several reasons. For one, the
calling convention defaults to <TT>__cdecl</TT> if the DLL vendor omits a calling convention when prototyping the functions,
and <TT>__cdecl</TT> forces you into Case 2. Secondly, even if your vendor has utilized the <TT>__stdcall</TT> calling
convention, they probably neglected to utilize a DEF file to strip the Visual C++ decorartions.
</P>
<P>
However you got here, Good Day, and welcome to Case 2. You're stuck with a DLL whose function names don't agree with
C++Builder. Your only way out of this mess is to create an import library that aliases the Visual C++ function names
into a format compatible with C++Builder. Fortunately, the C++Builder command line tools allow you to create an aliased
import library.
</P>
<P>
The first step is to create a DEF file from the Visual C++ DLL by using the <TT>IMPDEF</TT> program that comes with
C++Builder. <TT>IMPDEF</TT> creates a DEF file that lists all of the functions exported by the DLL.
You invoke <TT>IMPDEF</TT> like this:
</P>
<PRE>
    IMPDEF (Destination DEF file) (source DLL file).
</PRE>
<P>For example</P>
<PRE>
    IMPDEF mydll.def mydll.dll
</PRE>
<P>
After running <TT>IMPDEF</TT>, open the resulting DEF file using the editor of your choice. When the DLL source in
Listing A and B is compiled with Visual C++, the DEF file created by <TT>IMPDEF</TT> looks like this:
<P>
<PRE>
    LIBRARY     DLL.DLL

    EXPORTS
        CdeclFunction        @1
        UnknownFunction      @3
        _StdCallFunction@4   =_StdCallFunction      @2
</PRE>
<P>
The next step is to alter the DEF file so it aliases the DLL functions into names that C++Builder will like. You
can alias a function by listing a C++Builder compatible name followed by the original Visual C++ linker name.  For the
test DLL in Listing A and B, the aliased DEF looks like this:
</P>
<PRE>
    EXPORTS
      ; use this type of aliasing
      ; (Borland name)   = (Name exported by Visual C++)
        _CdeclFunction   = CdeclFunction
        _UnknownFunction = UnknownFunction
        StdCallFunction  = _StdCallFunction@4
</PRE>
<P>
Notice that the function names on the left match the Borland compatible names from Table A. The function names on the
right are the actual linker names of the functions in the Visual C++ DLL.
</P>
<P>
The final step is to create an aliased import library from the aliased DEF file. Once again, you rely on the <TT>IMPLIB</TT>
utility, except that this time, you pass <TT>IMPLIB</TT> the aliased DEF file as its source file instead of the original
DLL. The format is
</P>
<PRE>
    IMPLIB (dest lib file) (source def file)
</PRE>
<P>For example</P>
<PRE>
    IMPLIB mydll.lib mydll.def
</PRE>
<P>
Create the import library and move on to step 4. You may want to examine the import library first to ensure that
each DLL function appears in a naming format that C++Builder agrees with. You can use the <TT>TLIB</TT> utility to
inspect the import library.
</P>
<PRE>
    TLIB mydll.lib, mydll.lst
</PRE>
<P>
The list file for the test DLL looks like this:
</P>
<PRE>
    Publics by module

    StdCallFunction size = 0
            StdCallFunction

    _CdeclFunction  size = 0
            _CdeclFunction

    _UnknownFunction size = 0
            _UnknownFunction
</PRE>
<BR>
<H3>
<A NAME="step4">Step 4: Add the import library to your project</A>
</H3>
<P>
Once you create an import library for the Visual C++ DLL, you can add the import library to your C++Builder project
using the <I>Project | Add to Project</I> menu option. You use the import library without regard to whether the import
library contains aliases or not. After adding the import library to your project, build your project and see if you can
successfully link.
</P>

<BR>
<H3>
<A NAME="conclusion">Conclusion:</A>
</H3>
<P>
This article demonstrated how you can call functions in a Visual C++ DLL from a C++Builder project.
The techniques work with C++Builder 1 and C++Builder 3, and DLLs built with Visual C++ 4.X or Visual C++ 5
(I haven't tested Visual C++ 6 yet).
</P>
<P>
You may have noticed that this article only discusses how to call C style functions in a DLL. No attempt is made to
call methods of an object where the code for the class resides in a Visual C++ DLL. C++ DLLs present an even greater
array of problems because linker names for member functions are mangled. The compiler employs a name mangling scheme
in order to support function overloading. Unfortunately, the C++ standard does not specify how a compiler should mangle
class methods. Without a strict standard in place, Borland and Microsoft have each developed their own techniques for
name mangling, and the two conventions are not compatible. In theory, you could use the same aliasing technique to call
member functions of a class that resides in a DLL. However, you may want to consider creating a COM object instead.
COM introduces many of its own problems, but it does enforce a standard way of calling methods of an object.
A COM object created by Visual C++ can be called from any development environment, including both Delphi and C++Builder.
</P>
<P>
C++Builder 3.0 introduced a new command line utility called <TT>COFFtoOMF.EXE</TT>. This utility can convert a Visual
C++ import library to a C++Builder import library. Furthermore, the program will automatically alias <TT>__cdecl</TT>
functions from the Visual C++ format to the C++Builder format. The automatic aliasing can simplify Step 3 if the DLL
exclusively uses the <TT>__cdecl</TT> calling convention.
</P>


</TD> </TR>
<TR>  <TD COLSPAN=7>
<BR><HR>
<CENTER>
<FONT size="-1">
<I>
Copyright &copy; 1997-2002 by <A HREF="mailto:hhowe@bcbdev.com">Harold Howe</A>.<BR>
All rights reserved.
</I>
</FONT>
</CENTER>
</TD> </TR>
</TABLE>
</CENTER>
</BODY>
</HTML>

