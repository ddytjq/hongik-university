ID=E0740
URL=http://www.cprogramming.com/codej/issue1.html
SIZE=21862
DATE=12/07/02
TIME=19:23:55
DATASET=C
HTML=<html>

<HEAD>

<meta http-equiv="name" content="C and C++ game programming">

<meta name="keywords"

content="C++ programming, programmers, C++ tutorial, C, source code, tutorials, C++ compiler, binary tree">

<meta name="description"

content="Cprogramming.com is a combination of C++ tutorials, compiler information, programming links, a VERY ACTIVE programming message board, and C and C++ source code .">

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

<TITLE>Cprogramming.com: Code Journal</TITLE>
</head>



<body bgcolor=white link="#ff0008" vlink="#ff0008">

  


<table cellspacing=0 cellpadding=0 border=0><tr><td valign=top width=1 bgcolor=black>
<img src="line.gif" width=1 height=62>




</td><td valign=top width=92>


<img src="one.gif" width=92 height=63><br><br>

<table><tr><td width=3></td><td>
<font size=2 face="arial" color="#b4b4b4">
<li><a href="/index.html">Home</a></li>
</font>

</td></tr></table>


<img src="learn.gif" width=92 height=30 alt="Learn"><br>


<table><tr><td width=3></td><td>
<font size=2 face="arial" color="#b4b4b4">
<li><a href="/tutorial.html">Tutorials</a></li>

<li><a href="/source.html">Source</a></li>
<li><a href="/books.html">Books</a></li>
<li><a href="http://www.cprogramming.com/cgi-bin/cdir/Cdirectory.cgi">Directory</a></li>
<li><A href="http://www.cprogramming.com/cgi-bin/quiz.cgi">Quiz</A></li>

</font>
</td></tr></table>


<img src="comp.gif" width=92 height=30 alt="Learn"><br>

<table><tr><td width=3></td><td>

<font size=2 face="arial" color="#b4b4b4">
<li><a href="/borland.html">Borland</a></li>

<li><a href="/djgpp.html">DJGPP</a></li>
<li><a href="/other.html">Other</a></li>
</font>
</td></tr></table>

<img src="q.gif" width=92 height=30 alt="Learn"><br>

<table><tr><td width=3></td><td>

<font size=2 face="arial" color="#b4b4b4">
<li><a href="http://www.cprogramming.com/board.html">C board</a></li>
<li><A href="/function.html">Functions</a></li>
<li><a href="/email.html">Email</a></li>
</font>
</td></tr></table>

 
 
</td><td valign=top width=1 bgcolor="#dfdfdf"><img src="dot.gif" width=1 height=1></td><td valign=top>



<A href="http://www.cprogramming.com/"><img src="cprog.gif" width=497 height=111 alt="Cprogramming.com - your resource for C/C++" border=0><center></A>
<table border=0 cellspacing=0 cellpadding=0 width=470 height=84><tr><td align=center> 
 <iframe src="http://a.tribalfusion.com/f.ad?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" width=470 height=84 marginwidth=0 marginheight=0 hspace=0 vspace=0 frameborder=0 scrolling=no>
         <script language=javascript>
           randNum = ((new Date()).getTime() % 2147483648) + Math.random();
           document.write(
             "<a href='http://a.tribalfusion.com/i.click?site=Cprogrammingcom&adSpace=ROS&requestID=" + randNum + "' target=_blank >" +
             "<img src='http://a.tribalfusion.com/i.ad?site=Cprogrammingcom&adSpace=ROS&requestID=" + randNum + "'" +
               "width=468 height=60 border=0 alt='Click Here'><br><b>Click Here!</b></a>");
         </script>
         <noscript>
             <a href="http://a.tribalfusion.com/i.click?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" target=_blank >
             <img src="http://a.tribalfusion.com/i.ad?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" 
                  width=468 height=60 border=0 alt="Click Here"><br><b>Click Here!</b></a>
         </noscript>
 </iframe></td></tr></table>
</center>
<table><tr><td width=20></td><td><font size=3 face="arial">
 <h3>Code Journal</h3>
 <P><B>Code Journal</B> is a free, biweekly newsletter on programming 
              and computer science provided jointly by <A HREF="http://www.cprogramming.com/">Cprogramming.com</A> 
              and AI Horizon. There is also an <A HREF="archive/index.htm">archive</A> 
              of all past issues on both websites. </P>
            <P>This is the January 8th Issue</p>
            <FONT SIZE="2" FACE="Courier New, Courier, mono"><B>CODE JOURNAL: 
            Your Guide to Programming</B><BR>
            <BR>
            January 8, 2001<BR>
            <BR>
            In This Edition:<BR>
            - <A HREF="#welcome">Welcome to the Code Journal</A><BR>
            - <A HREF="#article1">XOR Encryption</A><BR>
            - <A HREF="#article2">Hashed Browns and Smiths (On a Table, Of Course)</A><BR>
            - <A HREF="#qa">Questions and Answers</A><BR>
            - <A HREF="#challenge">Programming Challenge</A><BR>
            <BR>
            <A NAME="welcome">Welcome</A> to the <B>Code Journal</B>, a joint 
            venture between <A HREF="http://www.cprogramming.com/">Cprogramming.com</A> 
            and <A HREF="http://www.aihorizon.com/">AI Horizon</A> that aims to 
            provide insightful articles on both C++ and algorithmic programming. 
            Code Journal is helpware: in return for reading it, you are asked 
            to help someone else out with their own programming problems. Good 
            luck, and quick compiling.<BR>
            <BR>
            <A NAME="article1">---------------------------------------------------------</A><BR>
            <B>C/C++ Programming by Alex Allain</B><BR>
            ---------------------------------------------------------<BR>
            <B>XOR Encryption</B><BR>
            <BR>
            This is my first article for Code Journal, so I should introduce myself. 
            I am the webmaster and content editor for <A HREF="http://www.cprogramming.com/">Cprogramming.com</A>; 
            I've been writing tutorials and book reviews for Cprogramming.com 
            for over four years.<BR>
            <BR>
            <FONT COLOR="#009900">Exclusive-OR Encryption</FONT>, while not a 
            public-key system such as RSA, is almost unbreakable through brute 
            force methods. It is susceptible to patterns, but this weakness can 
            be avoided through first compressing the file (so as to remove patterns). 
            Exclusive-OR Encrytion requires that both encryptor and decryptor 
            have access to the encryption key, but the encryption algorithm, while 
            extremely simple, is nearly unbreakable.<BR>
            <BR>
            Exclusive-OR Encrytion works by using the boolean algebra function 
            <FONT COLOR="#009900">Exclusive-OR (XOR)</FONT>. XOR is a binary operator 
            (meaning that it takes two arguments - similar to the addition sign, 
            for example). By its name, Exclusive-OR, it is easy to infer (correctly, 
            no less) that it will return true if one, and only one, of the two 
            operators is true. The truth table is as follows:<BR>
            <BR>
            <SPAN CLASS="code">A &nbsp; B | A XOR B<BR>
            --------------- <BR>
            T &nbsp; T | &nbsp;&nbsp;F<BR>
            T &nbsp; F | &nbsp;&nbsp;T<BR>
            F &nbsp; T | &nbsp;&nbsp;T<BR>
            F &nbsp; F | &nbsp;&nbsp;F</SPAN><BR>
            <BR>
            (A <FONT COLOR="#009900">truth table</FONT> works like a multiplication 
            or addition table: the top row is one list of possible inputs, the 
            side column is one list of possible inputs. The intersection of the 
            rows and columns contains the result of the operation when done performed 
            with the inputs from each row and column.)<BR>
            <BR>
            The idea behind Exclusive-OR Encryption is that it is impossible to 
            reverse the operation without knowing the initial value of one of 
            the two arguments. For example, if you XOR two variables of unknown 
            values, you cannot tell from the output what the values of those variables 
            are. For example, if you take the operation A XOR B, and it returns 
            TRUE, you cannot know whether A is FALSE and B is TRUE, or whether 
            B is FALSE and A is TRUE. Furthermore, even if it returns FALSE, you 
            cannot be certain if both were TRUE or if both were FALSE.<BR>
            <BR>
            If, however, you know either A or B it is entirely reversible, unlike 
            Logical-AND and Logical-OR. For Exclusive-OR, if you perform the operation 
            A XOR TRUE and it returns a value of TRUE you know A is FALSE, and 
            if it returns FALSE, you know A is true. Exclusive-OR Encryption works 
            on the principle that if you have the encrypted string and the encryption 
            key you can always decrypt correctly. If you don't have the key, it 
            is impossible to decrypt it without making entirely random keys and 
            attempting each one of them until the decryption program's output 
            is something akin to readable text. The longer you make the encryption 
            key, the more difficult it becomes to break it.<BR>
            <BR>
            The actual way Exclusive-OR Encryption is used is to take the key 
            and encrypt a file by repeatedly applying the key to successive segments 
            of the file and storing the output. The output will be the equivalent 
            of an entirely random program, as the key is generated randomly. Once 
            a second person has access to the key, that person is able to decrypt 
            the files, but without it, decryption is almost impossible. For every 
            bit added to the length of the key, you double the number of tries 
            it will take to break the encryption through brute force.<BR>
            <BR>
            C++ does not have a built-in Exclusive-OR function, however. It is 
            necessary to write your own. Fortunately, it is not difficult. XOR 
            is the equivalent of <SPAN CLASS="code">(A OR B) AND NOT(A AND B)</SPAN> 
            (Try using the truth table's values to test this expression), so a 
            function that will quickly act as an Exclusive-OR need only test that 
            condition. <BR>
            For example:<BR>
            <BR>
            <SPAN CLASS="code">int XOR(int a, int b)<BR>
            {<BR>
            &nbsp;&nbsp;return (A || B) && !(A && B);<BR>
            }</SPAN><BR>
            <BR>
            Writing a program to encrypt a file using this scheme is relatively 
            simple, and it is the programming challenge for you over the next 
            two weeks. The winners will be selected based on efficiency, elegance, 
            and rapidity of response. For the specific requirements take a look 
            at the programming contest section of this email.<BR>
            <BR>
            <A NAME="article2">---------------------------------------------------------</A><BR>
            <B>Algorithms and Programming by Eric Suh</B><BR>
            ---------------------------------------------------------<BR>
            <B>Hashed Browns and Smiths (On a Table, Of Course)</B><BR>
            <BR>
            Keyed Arrays vs. Indexed Arrays<BR>
            ------------------------------------<BR>
            One of the biggest drawbacks to a language like C++ is that there 
            are no <FONT COLOR="#009900">KEYED-ARRAYS</FONT>. In a normal C++ 
            array (also called an <FONT COLOR="#009900">INDEXED ARRAY</FONT>), 
            the only way to access an element would be through its index number. 
            To find element 50 of an array named "employees" you have to access 
            it like this:<BR>
            <BR>
            <SPAN CLASS="code">employees[50];</SPAN><BR>
            <BR>
            In a keyed-array, however, you would be able to associate each element 
            with a "key," which can be anything from a name to a product model 
            number. So, if you have a keyed-array of employee records, you could 
            access the record of employee "John Brown" like this:<BR>
            <BR>
            <SPAN CLASS="code">employees["Brown, John"];</SPAN><BR>
            <BR>
            One basic form of a keyed-array is called the <FONT COLOR="#009900">HASH 
            TABLE</FONT>. In a hash table, a key is used to find an element instead 
            of an index number. Since the hash table has to be coded using an 
            indexed array, there has to be some way of transforming a key to an 
            index number. That way is called the <FONT COLOR="#009900">HASHING 
            FUNCTION</FONT>.<BR>
            <BR>
            Hashing Functions<BR>
            ------------------------------------<BR>
            A hashing function can be just about anything. How the hashing function 
            is actually coded depends on the situation, but generally the hashing 
            function should return a value based on a key and the size of the 
            array the hashing table is built on. Also, one important thing that 
            is sometimes overlooked is that a hashing function has to return the 
            same value every time it is given the same key!!! (This is really 
            important...)<BR>
            <BR>
            Let's say you wanted to organize a list of about 200 addresses by 
            people's last names. A hash table would be ideal for this sort of 
            thing, so that you can access the records with the people's last names 
            as the keys.<BR>
            <BR>
            First, we have to determine the size of the array we're using. Let's 
            use a 260 element array so that there can be an average of about 10 
            element spaces per letter of the alphabet.<BR>
            <BR>
            Now, we have to make a hashing function. First, let's create a relationship 
            between letters and numbers:<BR>
            <BR>
            <SPAN CLASS="code">A --> 0<BR>
            B --> 1<BR>
            C --> 2<BR>
            D --> 3<BR>
            ...<BR>
            and so on until Z --> 25.</SPAN><BR>
            <BR>
            The easiest way to organize the hash table would be based on the first 
            letter of the last name.<BR>
            <BR>
            Since we have 260 elements, we can multiply the first letter of the 
            last name by 10. So, when a key like "Smith" is given, the key would 
            be transformed to the index 180 (S is the 19 letter of the alphabet, 
            so S --> 18, and 18 * 10 = 180).<BR>
            <BR>
            Since we use a simple function to generate an index number quickly, 
            and we use the fact that the index number can be used to access an 
            element directly, a hash table's access time is quite small. A linked 
            list of keys and elements wouldn't be nearly as fast, since you would 
            have to search through every single key-element pair.<BR>
            <BR>
            Collisions and Collision Handling<BR>
            ------------------------------------<BR>
            Problems, of course, arise when we have last names with the same first 
            letter. So "Webster" and "Whitney" would correspond to the same index 
            number, 22. A situation like this when two keys get sent to the same 
            location in the array is called a <FONT COLOR="#009900">COLLISION</FONT>. 
            If you're trying to insert an element, you might find that the space 
            is already filled by a different one.<BR>
            <BR>
            Of course, you might try to just make a huge array and thus make it 
            almost impossible for collisions to happen, but then that defeats 
            the purpose of using a hash table. One of the advantages of the hash 
            table is that it is both fast AND small.<BR>
            <BR>
            There are many algorithms to handle collisions, but I will cover only 
            the simplest.<BR>
            <BR>
            The simplest algorithm is called the <FONT COLOR="#009900">LINEAR</FONT> 
            handling method. When you are adding an element, say "Whitney," and 
            you find that another element is already there ("Webster," for instance) 
            then you would just proceed to the next element space (the one after 
            "Webster"). If that is filled, you go on to the next one, and so on, 
            until you find an empty space to insert the new element (all those 
            extra elements came in handy after all!!).<BR>
            <BR>
            <SPAN CLASS="code">...</SPAN><BR>
            <SPAN CLASS="code">220 "White" &nbsp;&nbsp;|</SPAN> <-- <FONT COLOR="#FF0000">### 
            COLLISION ###</FONT> : <I>Gotta move on to the next.</I><BR>
            <SPAN CLASS="code">221 "Webster" |</SPAN> <-- <FONT COLOR="#FF0000">### 
            COLLISION ###</FONT> : <I>Next one.</I><BR>
            <SPAN CLASS="code">222 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</SPAN> 
            <-- <I>Ahhh, perfect. Insert Here.</I><BR>
            <SPAN CLASS="code">223 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</SPAN><BR>
            <SPAN CLASS="code">...</SPAN><BR>
            <BR>
            Since we modified the insertion algorithm, we also have to change 
            the function that finds the element. You have to have some way of 
            verifying that you've found the element you want, and not some other 
            element. The simplest way is to just compare keys. (Does this record 
            have the last name "Whitney"? Does this one?) If the element you find 
            is not one of them, just move on to the next element until you reach 
            the one you want or you find an empty space (which means the element 
            is not in the table).<BR>
            <BR>
            Sounds simple, right? Well, it gets more complicated. What if you 
            have so many collisions that you run off the end of the array?<BR>
            <BR>
            If you're trying to insert "Zorba" and all the elements are filled 
            because of the collision handling, then what? Look at the example:<BR>
            <BR>
            <SPAN CLASS="code">...</SPAN><BR>
            <SPAN CLASS="code">258 "Whitney" &nbsp;&nbsp;|</SPAN> <-- <I>Nope, 
            not Empty</I><BR>
            <SPAN CLASS="code">259 "Zeno"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</SPAN> 
            <-- <I>Nope, not Empty</I><BR>
            <SPAN CLASS="code">---------------- </SPAN>&nbsp;<-- <I>Ummm, what 
            now?</I><BR>
            <BR>
            The easiest thing to do is to just wrap around to the beginning again. 
            If there are still no empty spaces, then we have to issue an error, 
            since there isn't enough space in the Hash table for all of the elements.<BR>
            <BR>
            Now you're ready to implement your first hash table! Give it a try. 
            It isn't too hard, but the end result is quite useful!!<BR>
            <BR>
            <A NAME="qa">---------------------------------------------------------</A><BR>
            <B>Questions and Answers on Programming</B><BR>
            ---------------------------------------------------------<BR>
            In future newsletters, we will answer several programming questions 
            emailed to Cprogramming.com and AI Horizon. <BR>
            <BR>
            If you have a question on programming, send it in to either <A HREF="questions@cprogramming.com">Cprogramming.com</A> 
            or <A HREF="questions@aihorizon.com">AI Horizon</A> and your question 
            may be answered here.<BR>
            <BR>
            <A NAME="challenge">---------------------------------------------------------</A><BR>
            <B>Code Challenge</B><BR>
            ---------------------------------------------------------<BR>
            Every issue, we will issue a programming challenge and ask people 
            to submit their solutions within two weeks. A few of the best solutions 
            will be published the next issue, along with a new challenge.<BR>
            <BR>
            Write an Exclusive-OR encryption program. The program should take 
            as input a filename that is then encrypted by the program. The program 
            should ask the user to input an encryption key, which should be used 
            to encrypt the file. The output of the program should go into a file 
            with the same filename but a .ENC extension (for simplicity sake). 
            All programs should run under DOS.<BR>
            <BR>
            Send your solutions to <A HREF="mailto:codejournal@cprogramming.com">solutions@cprogramming.com</A> 
            as source code files, and you may find it published. Please include 
            either your name or an identifying username so that we may attribute 
            the solution to you in the next newsletter. If you wish, you may ask 
            us to withhold your name.<BR>
            <BR>
            ---------------------------------------------------------<BR>
            Suggestions and comments on this newsletter should be sent to <A HREF="mailto:codejournal@cprogramming.com">codejournal@cprogramming.com</A> 
            or <A HREF="mailto:codejournal@aihorizon.com">codejournal@aihorizon.com</A>.<BR>
            <BR>
            <B>Editors:</B><BR>
            Eric Suh, <A HREF="mailto:webmaster@aihorizon.com">webmaster@aihorizon.com<BR>
            </A> Alexander Allain, <A HREF="mailto:webmaster@cprogramming.com">webmaster@cprogramming.com</A><BR>
            <BR>
            To unsubscribe from this journal, send a blank email to <A HREF="mailto:codejournal-unsubscribe@mlm.cprogramming.com">codejournal-unsubscribe@mlm.cprogramming.com</A>. 
 

</font>
</td></tr></table>
</td></tr></table>









 
</body>



<SCRIPT LANGUAGE="JavaScript">
	<!--
		document.write("<IMG SRC=\"/cgi-bin/axs/ax.pl?trans.gif&ref=");
		document.write(document.referrer);
		document.write("\" HEIGHT=1 WIDTH=1>");
	// -->
	</SCRIPT><NOSCRIPT>
		<IMG SRC="/cgi-bin/axs/ax.pl?trans.gif" HEIGHT="1" WIDTH="1">
	</NOSCRIPT>
</html>
