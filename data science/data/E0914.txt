ID=E0914
URL=http://www.cprogramming.com/codej/issue5.html
SIZE=17768
DATE=12/07/02
TIME=19:25:44
DATASET=C
HTML=<html>

<HEAD>

<meta http-equiv="name" content="C and C++ game programming">

<meta name="keywords"

content="C++ programming, programmers, C++ tutorial, C, source code, tutorials, C++ compiler, binary tree">

<meta name="description"

content="Cprogramming.com is a combination of C++ tutorials, compiler information, programming links, a VERY ACTIVE programming message board, and C and C++ source code .">

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

<TITLE>Cprogramming.com: Code Journal Issue 2</TITLE>
</head>



<body bgcolor=white link="#ff0008" vlink="#ff0008">

  


<table cellspacing=0 cellpadding=0 border=0><tr><td valign=top width=1 bgcolor=black>
<img src="line.gif" width=1 height=62>




</td><td valign=top width=92>


<img src="one.gif" width=92 height=63><br><br>

<table><tr><td width=3></td><td>
<font size=2 face="arial" color="#b4b4b4">
<li><a href="/index.html">Home</a></li>
</font>

</td></tr></table>


<img src="learn.gif" width=92 height=30 alt="Learn"><br>


<table><tr><td width=3></td><td>
<font size=2 face="arial" color="#b4b4b4">
<li><a href="/tutorial.html">Tutorials</a></li>

<li><a href="/source.html">Source</a></li>
<li><a href="/books.html">Books</a></li>
<li><a href="http://www.cprogramming.com/cgi-bin/cdir/Cdirectory.cgi">Directory</a></li>
<li><A href="http://www.cprogramming.com/cgi-bin/quiz.cgi">Quiz</A></li>

</font>
</td></tr></table>


<img src="comp.gif" width=92 height=30 alt="Learn"><br>

<table><tr><td width=3></td><td>

<font size=2 face="arial" color="#b4b4b4">
<li><a href="/borland.html">Borland</a></li>

<li><a href="/djgpp.html">DJGPP</a></li>
<li><a href="/other.html">Other</a></li>
</font>
</td></tr></table>

<img src="q.gif" width=92 height=30 alt="Learn"><br>

<table><tr><td width=3></td><td>

<font size=2 face="arial" color="#b4b4b4">
<li><a href="http://www.cprogramming.com/board.html">C board</a></li>
<li><A href="/function.html">Functions</a></li>
<li><a href="/email.html">Email</a></li>
</font>
</td></tr></table>

 
 
</td><td valign=top width=1 bgcolor="#dfdfdf"><img src="dot.gif" width=1 height=1></td><td valign=top>



<A href="http://www.cprogramming.com/"><img src="cprog.gif" width=497 height=111 alt="Cprogramming.com - your resource for C/C++" border=0></A><center><A href="http://www.cprogramming.com/"></a>
<table border=0 cellspacing=0 cellpadding=0 width=470 height=84><tr><td align=center> 
 <iframe src="http://a.tribalfusion.com/f.ad?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" width=470 height=84 marginwidth=0 marginheight=0 hspace=0 vspace=0 frameborder=0 scrolling=no>
         <script language=javascript>
           randNum = ((new Date()).getTime() % 2147483648) + Math.random();
           document.write(
             "<a href='http://a.tribalfusion.com/i.click?site=Cprogrammingcom&adSpace=ROS&requestID=" + randNum + "' target=_blank >" +
             "<img src='http://a.tribalfusion.com/i.ad?site=Cprogrammingcom&adSpace=ROS&requestID=" + randNum + "'" +
               "width=468 height=60 border=0 alt='Click Here'><br><b>Click Here!</b></a>");
         </script>
         <noscript>
             <a href="http://a.tribalfusion.com/i.click?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" target=_blank >
             <img src="http://a.tribalfusion.com/i.ad?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" 
                  width=468 height=60 border=0 alt="Click Here"><br><b>Click Here!</b></a>
         </noscript>
 </iframe></td></tr></table>
</center>
      <table>
        <tr> 
          <td width=20></td>
          <td> 
   <FONT SIZE="3" FACE="Times New Roman, Times, serif"> 
            <!-- #BeginEditable "maintext" --> 
            <FONT SIZE="1" FACE="Arial, Helvetica, sans-serif">(Back to <A HREF="/codejournal/index.htm">Code 
              Journal Main</A>)</FONT></P>
            <P><B>Code Journal</B> is a free, biweekly newsletter on programming 
              and computer science provided jointly by <A HREF="http://www.cprogramming.com/">Cprogramming.com</A> 
              and AI Horizon.             <P>This is the March 11th Issue. 
            <FONT SIZE="2" FACE="Courier New, Courier, mono"><B><A NAME="top">CODE 
            JOURNAL: Your Guide to Programming</A></B><BR>
            <BR>
            February 20, 2002<BR>
            <BR>
            In This Edition:<BR>
            - <A HREF="#welcome">Welcome to the Code Journal</A><BR>
            - <A HREF="#article1">Handling Errors Exceptionally Well in C++</A><BR>
            - <A HREF="#article2">Time Flies Like an Arrow, but Time Algorithms with Big-O</A><BR>
            <!-- - <A HREF="#qa">Questions and Answers</A><BR>--> - <A HREF="#challenge">Programming 
            Challenge</A><BR>
    
            <A NAME="welcome">Welcome</A> to the <B>Code Journal</B>, a joint 
            venture between <A HREF="http://www.cprogramming.com/">Cprogramming.com</A> 
            and <A HREF="http://www.aihorizon.com/">AI Horizon</A> that aims to 
            provide insightful articles on both C++ and algorithmic programming. 
            Code Journal is helpware: in return for reading it, you are asked 
            to help someone else out with their own programming problems. Good 
            luck, and quick compiling.<BR>
            <BR>
            <A NAME="article1">---------------------------------------------------------</A><BR>
            <B>C/C++ Programming by Alex Allain</B><BR>
            ---------------------------------------------------------<BR>
<font face = arial>
            Handling Errors Exceptionally Well in C++<br><br>

One handy feature of C++ is its exception handling system.  An exception is a 
situation in which a program has an unexpected circumstance that the section 
of code containing the problem is nor explicitly designed to handle.  In C++,
 exception handling is useful bcause it makes it easy to separate the program 
design between code written to handle the chores of the program and code 
written to handle errors; doing so makes reading the code much easier.  
Furthermore, exception handling in C++ propagates the exceptions up the stack; 
therefore, if there are several functions called, but only one function that 
needs to reliably deal with errors, the method C++ uses to handle exceptions 
means that it can easily handle those exceptions without any code in the 
intermediate functions.
<br><br>
When errors occur, the function generating the error can 'throw' an exception.  
For example, take a sample function that does division:
<pre>
const int DivideByZero = 10;
//....
double divide(double x, double y)
{
  if(y==0)
    throw DivideByZero;
  return x/y;
}
</pre>
The function will throw DivideByZero as an exception that can then be caught 
by an exception-handling catch statement that catches exceptions of type int.
  The necessary construction for catching exceptions is a try catch system.  
If you wish to have your program check for exceptions, you must enclose the
 code that may have exceptions thrown in a try block.  For example:
<pre>
try
{
  divide(10, 0);
}
catch(int i)
{
  if(i==DivideByZero)
    cerr&lt;&lt;"Divide by zero error";
}
</pre>
The catch statement catches exceptions that are of the proper type.  You can,
 for example, throw objects of a class to differentiate between several 
different exceptions.  As well, once a catch statement is executed, the program
 continues to run from the end of the catch.
<br><br>
It is often more useful for you to create a class that stores information on 
exceptions as they occur.  For example, it would be more useful if you had a 
class to handle exceptions.
<pre>
class DivideByZero
{
  public:
  double divisor;
  DivideByZero(double x);
};
DivideByZero::DivideByZero(double x) : divisor(x)
{}

int divide(int x, int y)
{
  if(y==0)
    throw DivideByZero(x);
}

try
{
  divide(12, 0);
}
catch (DivideByZero divZero)
{
  cerr&lt;&lt;"Attempted to divide "&lt;&lt;divZero.divisor&lt;&lt;" by zero";
}
</pre>
Of course, it's also possible to have a general exception handler that will 
respond to any thrown exception.  To use it, simply use catch(...) for the 
catch statement.
<br><br>
The handy thing about exception handling is that the errors can be handled 
outside of the regular code.  This means that it is easier to structure the
 program code, and it makes dealing with errors more centralized.  Finally,
 because the exception is passed back up the stack of calling functions, you 
can handle errors at any place you choose.<br><br> 
           ************************************<BR>
            Alexander Allain is the webmaster of <A HREF="http://www.cprogramming.com/">Cprogramming.com</A>.<BR>
            Contact him at <A HREF="mailto:webmaster@cprogramming.com">webmaster@cprogramming.com</A> 
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <BR>
            <A NAME="article2">---------------------------------------------------------</A><BR>
            <B>Algorithms and Programming by Eric Suh</B><BR>
            ---------------------------------------------------------<BR>
            Time Flies Like an Arrow, but Time Algorithms with Big-O<br><br>

In Computer Science, there is often a need to measure the speed of an 
algorithm.  In this way, we can compare the efficiency of different algorithms,
 and so make better and better ones.
<br><br>
How, then, does one go about finding the speed of an algorithm?  Maybe an 
experimental method would work.  Implement the algorithms on one computer, and
 then run all of them and time them.  The one with the smallest running time 
would be the most efficient.
<br><br>
This method seems great and pretty simple, but there are several flaws with it.
  First, the performance of the machine can vary greatly from trial to trial, 
because it is very difficult to create an identical, clean environment for 
every run.  Secondly, algorithms can be slower or faster depending on the 
architecture of the operating system, the hardware, and even the compiler or 
interpreter.  Some systems can simply handle certain operations better than 
others, while hardware and software often make optimizations to code that can 
really affect performance.  Third, what would the size of the testing data set 
be?  Often, the "faster" algorithms will be about the same or even worse than 
the "slower" algorithms for small data sets.  However, if a large data set is 
used, then testing will take a very long time, and small independent factors 
can have a much greater effect on the computational speed.
<br><br>
All in all, it is better to get a theoretical, abstract way of defining the 
efficiency of an algorithm.  Let us define the number 'n' to be a designation 
for the "size" of the problem.  In sorting, this might be the number of 
elements to be sorted.  In searching, this would be the number of items to be 
searched through.  It could be the number of bits in number, or just about 
anything that determines how long the algorithm will take.
<br><br>
The theoretical abstract way of defining efficiency is called Big-O notation. 
 This notation is written as O(f(n)), where f(n) is some function of the 
variable 'n' which we defined above.
<br><br>
The notation O(f(n)) means that for large enough values of 'n', the exact 
number of theoretical operations (be it comparisons or data writing or 
something else entirely) the algorithm must do (designated T(n)) is less than 
f(n) multiplied by some constant multiplier. That is,
<pre>
   T(n) &lt;= k x f(n), where k is some constant.
</pre>
The algorithm with T(n) operations would then be considered O(f(n)).  The Big-O
 stands for "order of magnitude", a mathematical concept of how "fast" 
something changes for very large values.
<br><br>
Of course, if you think about it, you could say that all algorithms are then 
O(infinity).  This is true, of course, but it doesn't help us in our analyzing
 an algorithm.  So, by convention, f(n) is usually made as small and as simple
 as possible, so that we can quickly get much information about the speed of an
 algorithm out of the notation.
<br><br>
For instance, some of the most common values for f(n) are: 1, n, n^2, n^3, 
n*log2(n), log2(n), e^n, 2^n. (The caret '^' sign means "to the power of".  So,
 n^2 is "n squared."  The log2(n) means "Logarithm to the Base 2 of n").  For 
sufficiently large n, those functions can be ordered from fastest to slowest.
<pre>
O(1)
O(log2(n))
O(n)
O(n*log2(n))
O(n^2)
O(n^3)
O(2^n)
O(e^n)
</pre>
When Computer Scientists began to use this notation and analysis often, they 
began to encounter some problems for which algorithms were always O(2^n) or 
something large like that.  They found that these problems all seemed to have 
similar situations appearing.  Thus, Computer Scientists began to distinguish 
between "Polynomial Time" problems and "Non-deterministic Polynomial Time" 
problems (or in short, P and NP problems).
<br><br>
P problems are those problems for which a solution can be found that is O(n^x)
 or faster, where x is some integer.  n^x is a polynomial function, so these 
problems are called "Polynomial Time" problems.
<br><br>
In NP problems, the solution to a problem can be checked in Polynomial time.
  That is, if you have a possible solution to an NP, checking to see if the
 solution is correct is a P problem.  So, all P problems are a subset of NP.  
Sorting an array is a P-problem, and checking to see if an array is sorted is 
also a P-problem: you just see if the elements are in order.
<br><br>
Not all NP problems are necessarily P problems, however.  Think about factoring
 a number: the best algorithm anyone can think of right now involves simply 
checking all of the numbers from 2 onwards and dividing.  That algorithm is an 
exponential time solution, but checking to see if the solution is correct is 
easy: you just multiply the factors and check if you get the correct number. 
 No one knows, however, whether this problem can be done in polynomial time or
 not; maybe we just haven't gotten a smart enough programmer.  Or maybe it just
 isn't possible to do it in polynomial time.  The big question of this century
 and the next for Computer Science is, "Is NP = P?"  It has not been proven 
either right or wrong, even though there is a million dollar prize waiting for
 anyone who proves it one way or the other.
<br><br>
Who knows, maybe you will be the one to prove it.<br><br>
            ************************************<BR>
            Eric Suh is the webmaster of <A HREF="http://www.aihorizon.com/">AI 
            Horizon</A>, a site devoted to Artificial Intelligence and Computer 
            Science programming.<BR>
            Contact him at <A HREF="mailto:webmaster@aihorizon.com">webmaster@aihorizon.com</A>.<BR>
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <BR>
            <!--
            
            <BR> --> <A NAME="challenge">---------------------------------------------------------</A><BR>
            <B>Code Challenge</B><BR>
            ---------------------------------------------------------<BR>
            Every issue, we will issue a programming challenge and ask people 
            to submit their solutions within two weeks. A few of the best solutions 
            will be published the next issue, along with a new challenge.<BR>
            <BR>
            This Week's Challenge<BR>
            ------------------------------------<BR>
            <BR>
            We only received one response to last weeks challenge.  Mike McInnis 
submitted a standard knight's tour program rather than the modified 
version; but given the dearth of responses we are publishing his response:<a href="http://www.cprogramming.com/source/mm-knight.cpp">http://www.cprogramming.com/source/mm-knight.cpp</a>
<br><br>
This week's challenge:<br>
Write the shortest quicksort algorithm you can.  It's possible to do it,
minus recursion and variable declarations, in roughly four lines.  Winners
will be selected based on length of code.<br><br>
            Send your solutions to <A HREF="mailto:codejournal@cprogramming.com">solutions@cprogramming.com</A> 
            as source code files, and you may find it published. Please include 
            either your name or an identifying username so that we may attribute 
            the solution to you in the next newsletter. If you wish, you may ask 
            us to withhold your name.<BR>
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <!-- <BR>
            
            ---------------------------------------------------------<BR>
            Suggestions and comments on this newsletter should be sent to <A HREF="mailto:codejournal@cprogramming.com">codejournal@cprogramming.com</A> 
            or <A HREF="mailto:codejournal@aihorizon.com">codejournal@aihorizon.com</A>.<BR>
            <BR>
            <B>Editors:</B><BR>
            Eric Suh, <A HREF="mailto:webmaster@aihorizon.com">webmaster@aihorizon.com<BR>
            </A> Alexander Allain, <A HREF="mailto:webmaster@cprogramming.com">webmaster@cprogramming.com</A><BR>
            <BR>
            To unsubscribe from this journal, send a blank email to <A HREF="mailto:codejournal-unsubscribe@mlm.cprogramming.com">codejournal-unsubscribe@mlm.cprogramming.com</A>. 
            </FONT> <!-- #EndEditable --></FONT>          </td>
        </tr>
        <tr>
          <td width=20></td>
          <td>&nbsp;</td>
        </tr>
      </table>
</td></tr></table>








	
</body>



<SCRIPT LANGUAGE="JavaScript">
	<!--
		document.write("<IMG SRC=\"/cgi-bin/axs/ax.pl?trans.gif&ref=");
		document.write(document.referrer);
		document.write("\" HEIGHT=1 WIDTH=1>");
	// -->
	</SCRIPT><NOSCRIPT>
		</NOSCRIPT></html>
