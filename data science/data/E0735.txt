ID=E0735
URL=http://www.rit.edu/~jpw9607/ooptut/addendum.htm
SIZE=18919
DATE=12/07/02
TIME=19:23:54
DATASET=C
HTML=<html><!-- #BeginTemplate "/Templates/main.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>OOP Tutorial Addendum</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../style.css" type="text/css">
<meta name="keywords" content="DJGPP, Allegro, programming, JetFight, Project V2143, C++, tutorials, linklist, MSVC, Microsoft Visual C++, Itana, GNE, Deathworms, MUUDPIC, Java, links, games, libraries, source, code, C, network, multiplayer">
<meta name="description" content="Gillius's Programming.  C/C++ tutorials, games, java, allegro, and libraries.">
</head>
<body bgcolor="#000000" text="#FFFFFF" link="#FFFF00" vlink="#008080" alink="#990099">
<table width="100%" border="0" cellpadding="0" cellspacing="5">
  <tr> 
    <td colspan="2" class="titleBar">Gillius's Programming</td>
  </tr>
  <tr> 
    <td width="130" height="621" valign="top"> 
      <table border="0" cellpadding="3" cellspacing="0" name="NavBar" width="130">
        <tr> 
          <td valign="top" class="leftTitle">Sections</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../index.htm">Home / News</a><br>
            <a href="../tutorial.htm">Tutorials</a><br>
            <a href="../games.htm">Games Corner</a><br>
            <a href="../java/index.htm">Java</a><br>
            <a href="../filesandprog.htm">The Archive</a><br>
            <a href="../links.htm">Links</a> </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="http://boards.eesite.com/board.cgi?boardset=60999">Fourms</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Current Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"> 
            <p><a href="../gne/index.htm">GNE</a> v.49a<br>
              <span class="leftDesc">--Game Networking Engine</span></p>
            <p><a href="../itana/index.htm">Itana</a> v.71a<br>
              <span class="leftDesc">--2D multiplayer space game</span></p>
          </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Complete Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../bgui2/index.htm">BGui2</a> 
            v.2.0.2<br>
            <a href="../deathworms/index.htm">Deathworms</a><br>
            <a href="../muudpic/index.htm">MUUDPIC</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../contact.htm">Contact 
            Gillius</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../resume.htm">Gillius's 
            Resum&eacute;</a></td>
        </tr>
        <tr> 
          <td valign="top">&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td> 
            <form action="http://pub.alxnet.com/poll" METHOD="POST" >
              <input type="hidden" name="id" value="2061268">
              <input type="hidden" name="q" value="submit">
              <table border="1" bgcolor="#AAAAAA" cellpadding="3" cellspacing="0">
                <tr> 
                  <td bgcolor="#202020" align="middle" class="pollTitle"> Location</td>
                </tr>
                <tr> 
                  <td> 
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                      <tr> 
                        <td class="pollQuestion">What part of the world do you 
                          live in?</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="1">
                          North America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="2">
                          South America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="3">
                          Europe</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="4">
                          Africa</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="5">
                          West/North Asia (like Russia)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="6">
                          East/South Asia (like India and Japan)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="7">
                          Australia / Indonesia</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="8">
                          Middle East</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="9">
                          Other</td>
                      </tr>
                      <tr> 
                        <td align="middle">
<input type="submit" value="Vote">
                        </td>
                      </tr>
                      <tr> 
                        <td align="middle"><a href="http://pub.alxnet.com/poll?id=2061268&q=view" class="pollLink" >Current 
                          results</a></td>
                      </tr>
                    </table>
                  </td>
                </tr>
                <tr> 
                  <td align="middle"><a href="http://www.alxnet.com/services/poll/" class="pollLink">Alxnet 
                    Free Web Tools</a></td>
                </tr>
              </table>
            </form>
            <a href="../poll.htm">View old poll results</a></td>
        </tr>
        <tr> 
          <td>&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td valign="middle" align="center" height="64"> 
            <!-- Start of TheCounter.com Code -->
            <script type="text/javascript" language="javascript">
s="na";c="na";j="na";f=""+escape(document.referrer)
</script>
            <script type="text/javascript" language="javascript1.2">
s=screen.width;v=navigator.appName
if (v != "Netscape") {c=screen.colorDepth}
else {c=screen.pixelDepth}
j=navigator.javaEnabled()
</script>
            <script type="text/javascript" language="javascript">
function pr(n) {document.write(n,"\n");}
NS2Ch=0
if (navigator.appName == "Netscape" &&
navigator.appVersion.charAt(0) == "2") {NS2Ch=1}
if (NS2Ch == 0) {
r="&size="+s+"&colors="+c+"&referer="+f+"&java="+j+""
pr("<A HREF=\"http://www.TheCounter.com\" TARGET=\"_top\"><IMG"+
" BORDER=0 SRC=\"http://c2.thecounter.com/id=1557583"+r+"\"><\/A>")}
</script>
            <noscript><a href="http://www.TheCounter.com" target="_top"><img
src="http://c2.thecounter.com/id=1557583" alt="TC" border=0></a> </noscript> 
            <!-- End of TheCounter.com Code -->
            <br>
            since 5/14/01</td>
        </tr>
      </table>
    </td>
    <td valign="top" align="left"><!-- #BeginEditable "content" --> 
      <h1 align="center">Addendum to Learning OOP in C++</h1>
      <p>I wrote most of my tutorials around 3 years ago I did not know as much 
        as I know now, and some of the more experienced programmers may have noticed 
        some areas of my tutorials that are now out-of-date or aren't quite 100% 
        correct.</p>
      <p>Unfortunately I have not had the interest needed to go through and rewrite 
        the tutorials -- I enjoy working on GNE and Itana and my other projects 
        much more than writing tutorials now. When chances arise I will attempt 
        to correct problems as I see them.</p>
      <p>But I write this addendum to the OOP tutorial to clear up the largest 
        hole in that tutorial. Technically most of the code there is not valid 
        C++ code anymore, now that the new (well... new since I wrote the tutorials) 
        ISO C++ 98 standard has been implemented in all of the current major compilers. 
        I have personally used GCC 3.x, MSVC6, and the Sun CC compilers that comply 
        with the new standard, and I would be surprised if Borland's latest compiler 
        does not support it now.</p>
      <h2><a name="toc"></a>The ISO C++ 98 Standard -- What's 
        Different?</h2>
      <p>There are a few major things the new standard does:</p>
      <ul>
        <li>Clarify small differences between the various C++ compilers.</li>
        <li><a href="#namespaces">Introduce namespaces and the std namespace</a> 
          (<a href="#headers">and the new include files</a>).</li>
        <li><a href="#iostreams">Introduce the new templated iostreams library</a>.</li>
        <li><a href="#STL">Bring the STL (Standard Template Library) into part 
          of the official Standard C++ Library</a>.</li>
      </ul>
      <p align="center"><a href="../tutorial.htm">Back to Tutorials Page</a></p>
      <h2><a name="namespaces"></a>Namespaces</h2>
      <p>New C++ programs now all use the concept of namespaces. In C and old 
        C++, there were potential issues with <span class="keyTerm">namespace 
        collisions</span>. For example many functions, classes, and variables 
        are declared in C++, and these could cause namespace collisions.</p>
      <p>With just the old C++ library, it was difficult to create a new variable 
        called cout and then try to use that with the cout iostream. What if you 
        wanted to create a class called ios, but forgot ios already was a class 
        in the standard C++ library?</p>
      <p>Also, if you wanted to use other add-on libraries -- they define their 
        own functions, classes, and variables, and these names might conflict 
        with yours, with no easy way to distinguish between the two competing 
        definitions. C programs with macros espically had this nasty problem and 
        thus many libraries have prefixed their function and variable names with 
        a consistant prefix (for example, a function from a networking library 
        might be called net_connect). This solution isn't the best.</p>
      <p>Namespaces are a way for telling the compiler which &quot;context&quot; 
        you want to evaluate the name in. In a way they almost act like C++ classes 
        with all static members. For example you create a new class:</p>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td align="center"> 
            <table border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td> 
                  <pre>class MyClass {
  static int myVar;
  static void myFunc() {
    myVar = 5;
  }
};

void main() {
  MyClass::myVar = 10;
  MyClass::myFunc();
}</pre>
                </td>
              </tr>
            </table>
          </td>
          <td align="center"> 
            <table border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td> 
                  <pre>namespace MyNamespace {
  int myVar;
  void myFunc() {
    myVar = 5;
  }
};

void main() {
  MyNamespace::myVar = 10;
  MyNamespace::myFunc();
}</pre>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      <p>As you can see, in order to use myVar and myFunc outside of MyClass, 
        you needed to qualify them using the <span class="keyTerm">scope operator</span>, 
        ::. For those with strange fonts, the scope operator is two colons. An 
        equivalent example using namespaces:</p>
      <p>The static qualifiers are not needed, and the namespace keyword is used 
        instead of class. There are two very important points not illustrated 
        here that warrant the use of a namespace over a class with only static 
        members:</p>
      <ul>
        <li>The first version is is valid to create a MyClass object, and there 
          is no reason to do this. In the second version, you cannot create a 
          variable of type MyNamespace since MyNamespace is not a class.</li>
        <li>Namespaces are &quot;importable,&quot; similar to the import command 
          in Java and somewhat similar to the uses command in Pascal:</li>
      </ul>
      <pre>//An example given the code above:
using namespace MyNamespace;

void myFunc();

void func();
  myVar = 10;
  MyNamespace::myFunc();
  ::myFunc();
}</pre>
      <p>When you import a namespace, you don't need to use the scope qualifier 
        to qualify the name, unless there is a ambiguity. Since myFunc is defined 
        in both the global namespace and in MyNamespace, when we use myFunc we 
        must explicitly pick which one we want to call, but since we didn't define 
        myVar, there is no need to qualify it. Since this is usually the case, 
        using namespaces can save a lot of typing while removing namespace collisions.</p>
      <p align="center"><a href="#toc">Back to top</a></p>
      <h2><a name="Headers"></a>The New Headers</h2>
      <p>All of the original C functions and C++ classes are now in the std (short 
        for standard) namespace. The new include files do not have an .h on the 
        end, for example &lt;iostream.h&gt; becomes &lt;iostream&gt;. The include 
        files that are part of the Standard C library also do not have a .h on 
        the end and start with c, for example &lt;string.h&gt; becomes &lt;cstring&gt;. 
        The old header names are deprecated and should not be used anymore, but 
        most compilers keep them for backwards compatability.</p>
      <p>Note that your header files could be named anything. They could be with 
        or without the .h, or with any extension you want, but .h and .hpp are 
        the most common.</p>
      <p>Compare a pre ISO C++ 98 program to one compling with the latest standard:</p>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td align="center"> 
            <table border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td> 
                  <pre>#include &lt;iostream.h&gt;
#include &lt;string.h&gt;

void main() {
  cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;
  int x = strlen(&quot;Hello World!&quot;);
}</pre>
                </td>
              </tr>
            </table>
          </td>
          <td align="center"> 
            <table border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td> 
                  <pre>#include &lt;iostream&gt;
#include &lt;cstring&gt;

void main() {
  std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;
  int x = std::strlen(&quot;Hello World!&quot;);
}</pre>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      <p>Note that we could have added the statement &quot;using namespace std;&quot; 
        and then we would not have to qualify cout or endl. So your old programs 
        can be converted to the new standard simply by changing the include names 
        and adding in &quot;using namespace std;&quot;.</p>
      <p align="center"><a href="#toc">Back to top</a></p>
      <h2><a name="iostreams"></a>Templated iostreams</h2>
      <p>There have been many changes to the iostreams library. On the basic level 
        like the examples using cout and cin, no changes have been made that are 
        directly visible to the coder, but in fact the iostream classes have greatly 
        changed underneath.</p>
      <p>My new tutorial I will be writing shortly uses the new iostream classes 
        and will not work on older compilers like GCC 2.9x. Here is a partial 
        list of changes:</p>
      <ul>
        <li>iostream classes now are templates, and the default classes like ostream 
          and cout are versions of these templates that support char. The templated 
          versions have the advantage of being able to support other character 
          types becides ASCII, like unicode. I guess you could make an iostream 
          class that takes something besides characters, like pictures or a custom 
          character type.</li>
        <li>The class strstring and related classes have been replaced by stringstream 
          and related classes. strstring only worked with char* types, but stringstream 
          works with the std::string class, another templated class.</li>
        <li>The functions and their actions have changed in classes like streambuf 
          and the basic_ostream and basic_istream classes.</li>
      </ul>
      <p>An entire book could be written on using iostreams and what you can do 
        with the new iostreams, so it is best to consult your documentation or 
        <a href="../links.htm#help">freely available online documentation</a>.</p>
      <p align="center"><a href="#toc">Back to top</a></p>
      <h2><a name="STL"></a>The Standard Template Library</h2>
      <p>The Standard Template Library used to be standalone from C++, but it 
        became a de facto standard of doing many operations in C++, and has become 
        part of the Standard C++ Library. Although not offically called the STL 
        anymore, most programmers still reference to it by this name as it is 
        familar to them and it specifically refers to this portion of the Standard 
        C++ Library.</p>
      <p>The STL consists of two main parts. A part for storing and manipulating 
        data structures which is similar in functionality to the Java Collections 
        API. The second part consists of very commonly used algoritms such as 
        iteration, sorting, and performing operations on data. There are a few 
        other cool things in the STL such as functors, but I won't get into all 
        of the concepts here. (as for the iostreams library, you could write a 
        whole book just on the STL). </p>
      <p>I learned the STL mainly from SGI's site. A view at the table contents 
        gives you a good look at all of the capabilities of this library. I've 
        seen coders do things easily with the STL that I've not seen done in any 
        other language, including Java. It certainly is one VERY impressive set 
        of code. SGI's site is linked from my <a href="../links.htm#help">links 
        page</a>.</p>
      <p align="center"><a href="#toc">Back to top</a></p>
      <!-- #EndEditable --></td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>

