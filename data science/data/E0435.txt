ID=E0435
URL=http://www.le.ac.uk/cc/iss/tutorials/cprog/ccccapp.html
SIZE=7078
DATE=12/07/02
TIME=19:20:52
DATASET=C
HTML=<!-- Filename: ccccapp.html -->
<!-- Author: mc39/rjm1 -->
<!-- Supplied by: Richard Mobbs -->
<!-- Created: 12-07-95 -->
<!-- Expires: 12-07-96 -->
<HTML>

<HEAD>
<TITLE>Computer Centre: Introduction to C Programming</TITLE>
</HEAD> 

<BODY>
<H1><IMG ALT="[CWC logo]" ALIGN=middle SRC="http:/images/compcen.gif" >  C's Standard Libraries</H1>

<P>
<HR>

<H2>Objectives</H2>
<P>This section is only for reference! It contains the following information:
<OL>
<LI>Names of all C's Standard Libraries
<LI>The functions they contain
</OL>
<HR>
<P>

<H3>Input and Output: <TT>&lt;stdio.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>FILE *fopen(const char *filename, const char *mode)</TT>
<DT><TT>FILE *freopen(const char *filename, const char *mode, FILE *stream)</TT>
<DT><TT>int fflush(FILE *stream)</TT>
<DT><TT>int fclose(FILE *stream)</TT>
<DT><TT>int remove(const char *filename)</TT>
<DT><TT>int rename(const char *oldname, const char *newname)</TT>
<DT><TT>FILE *tmpfile(void)</TT>
<DT><TT>char *tmpnam(char s[L_tmpnam])</TT>
<DT><TT>int setvbuf(FILE *stream, char *buf, int mode, size_t size)</TT>
<DT><TT>void setbuf(FILE *stream, char *buf)</TT>
<DT><TT>int fprint(FILE *stream, const char *format, ...)</TT>
<DT><TT>int sprintf(char *s, const char *format, ...)</TT>
<DT><TT>vprintf(const char *format, va_list arg)</TT>
<DT><TT>vfprintf(FILE *stream, const char *format, va_list arg)</TT>
<DT><TT>vsprintf(char *s, const char *format, va_list arg)</TT>
<DT><TT>int fscanf(FILE *stream, const char *format, ...)</TT>
<DT><TT>int scanf(const char *format, ...)</TT>
<DT><TT>int sscanf(char *s, const char *format, ...)</TT>
<DT><TT>int fgetc(FILE *stream)</TT>
<DT><TT>char *fgets(char *s, int n, FILE *stream)</TT>
<DT><TT>int fputc(int c, FILE *stream)</TT>
<DT><TT>int fputs(const char *s, FILE *stream)</TT>
<DT><TT>int getc(FILE *stream)</TT>
<DT><TT>int getchar(void)</TT>
<DT><TT>char *gets(char *s)</TT>
<DT><TT>int putc(int c, FILE *stream)</TT>
<DT><TT>int putchar(int c)</TT>
<DT><TT>int ungetc(int c, FILE *stream)</TT>
<DT><TT>size_t fread(void *ptr, size_t size, size_t nobj, FILE *stream)</TT>
<DT><TT>size_t fwrite(const void *ptr, size_t size, size_t nobj, FILE *stream)</TT>
<DT><TT>int fseek(FILE *stream, long offset, int orogin)</TT>
<DT><TT>long ftell(FILE *stream)</TT>
<DT><TT>void rewind(FILE *stream)</TT>
<DT><TT>int fgetpos(FILE *stream, fpos_t *ptr)</TT>
<DT><TT>int fsetpos(FILE *stream, const fpos_t *ptr)</TT>
<DT><TT>void clearerr(FILE *stream)</TT>
<DT><TT>int feof(FILE *stream)</TT>
<DT><TT>int ferror(FILE *stream)</TT>
<DT><TT>void perror(const char *s)</TT>
<DT>
</DL>
<HR>

<H3>Character Class Tests: <TT>&lt;ctype.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>isalnum(c)</TT>
<DT><TT>isalpha(c)</TT>
<DT><TT>iscntrl(c)</TT>
<DT><TT>isdigit(c)</TT>
<DT><TT>isgraph(c)</TT>
<DT><TT>islower(c)</TT>
<DT><TT>isprint(c)</TT>
<DT><TT>ispunct(c)</TT>
<DT><TT>isspace(c)</TT>
<DT><TT>isupper(c)</TT>
<DT><TT>isxdigit(c)</TT>
</DL>
<HR>

<H3>String Functions: <TT>&lt;string.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>char *strcpy(s , ct)</TT>
<DT><TT>char *strncpy(s , ct , n)</TT>
<DT><TT>char *strcat(s , ct)</TT>
<DT><TT>char *strncat(s , ct , n)</TT>
<DT><TT>int strcmp(cs , ct)</TT>
<DT><TT>int strncmp(cs , ct ,n)</TT>
<DT><TT>char *strchr(cs , c)</TT>
<DT><TT>char *strrchr(cs , c)</TT>
<DT><TT>size_t strspn(cs , ct)</TT>
<DT><TT>size_t strcspn(cs , ct)</TT>
<DT><TT>char *strstr(cs , ct)</TT>
<DT><TT>size_t strlen(cs)</TT>
<DT><TT>char *strerror(n)</TT>
<DT><TT>char *strtok(s , ct)</TT>
</DL>
<HR>

<H3>Mathematical Functions: <TT>&lt;math.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>sin(x)</TT>
<DT><TT>cos(x)</TT>
<DT><TT>tan(x)</TT>
<DT><TT>asin(x)</TT>
<DT><TT>acos(x)</TT>
<DT><TT>atan(x)</TT>
<DT><TT>atan2(x)</TT>
<DT><TT>sinh(x)</TT>
<DT><TT>cosh(x)</TT>
<DT><TT>tanh(x)</TT>
<DT><TT>exp(x)</TT>
<DT><TT>log(x)</TT>
<DT><TT>log10(x)</TT>
<DT><TT>pow(x,y)</TT>
<DT><TT>sqrt(x)</TT>
<DT><TT>ceil(x)</TT>
<DT><TT>floor(x)</TT>
<DT><TT>fabs(x)</TT>
<DT><TT>ldexp(x)</TT>
<DT><TT>frexp(x,double *ip)</TT>
<DT><TT>modf(x,double *ip)</TT>
<DT><TT>fmod(x,y)</TT>
</DL>
<HR>

<H3>Utility Functions: <TT>&lt;stdlib.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>double atof(const char *s)</TT>
<DT><TT>int atoi(const char *s</TT>
<DT><TT>long atol(const char *s)</TT>
<DT><TT>double strrod(const char *s, char **endp)</TT>
<DT><TT>long strtol(const char *s, char **endp, int base)</TT>
<DT><TT>unsigned long strtoul(const char *s, char **endp, int base)</TT>
<DT><TT>int rand(void)</TT>
<DT><TT>void srand(unsigned int seed)</TT>
<DT><TT>void *calloc(size_t nobj, size_t size)</TT>
<DT><TT>void *malloc(size_t size)</TT>
<DT><TT>void *realloc(void *p, size_t size)</TT>
<DT><TT>void free(void *p)</TT>
<DT><TT>void abort(void)</TT>
<DT><TT>void exit(int status)</TT>
<DT><TT>int atexit(void (*fcn)(void))</TT>
<DT><TT>int system(const char *s)</TT>
<DT><TT>char *getenv(const char *name)</TT>
<DT><TT>void *bsearch(const void *key, const void *base, size_t n, size_t size, int (*cmp)(const void *keyval, const void *datum))</TT>
<DT><TT>void qsort(void *base, size_t n, size_t size, int (*cmp)(const void *, const void *))</TT>
<DT><TT>int abs(int n)</TT>
<DT><TT>long labs(long n)</TT>
<DT><TT>div_t div(int num, int denom)</TT>
<DT><TT>ldiv_t ldiv(long num , long denom)</TT>
</DL>
<HR>

<H3>Diagnostics: <TT>&lt;assert.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>void assert(int <I>expression</I>)</TT>
</DL>
<HR>

<H3>Non-local Jumps: <TT>&lt;setjmp.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>int setjmp(jmp_buf env)</TT>
<DT><TT>void longjmp(jmp_buf env, int val)</TT>
</DL>
<HR>

<H3>Signals: <TT>&lt;signal.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>void (*signal(int sig, void (*handler)(int)))(int)</TT>
</DL>
<HR>

<H3>Data and Time Functions: <TT>&lt;time.h&gt;</TT></H3>
<P>
<DL>
<DT><TT>clock_t clock(void)</TT>
<DT><TT>time_t time(time_t , *tp</TT>
<DT><TT>double difftime(time_t time2 , time_t time1)</TT>
<DT><TT>time_t mktime(struct tm *tp)</TT>
<DT><TT>char *asctime(const time_t *tp)</TT>
<DT><TT>char *ctime(const time_t *tp)</TT>
<DT><TT>struct tm *gmtime(const time_t *tp)</TT>
<DT><TT>struct tm *localtime(const time_t *tp)</TT>
<DT><TT>size_t strftime(char *s, size_t smax, const char *fmt, const struct tm *tp)</TT>
</DL>
<HR>

<P>
<HR>

<A HREF="http:/">
<IMG ALT="[Leicester University]" ALIGN=middle SRC="http:/buttons/lhomebut.gif"></A>


<A HREF="http:/CWIS/AS/CC/cc.html">
<IMG ALT="[]" ALIGN=middle SRC="http:/buttons/ccbut.gif">
 Computer Centre</A>

<A HREF="cccc.html">
<IMG ALT="[]" ALIGN=middle SRC="http:/buttons/backbut.gif">
Introduction C Programming</A>

<HR>
<ADDRESS>Information Suppliers: <A HREF="http:/rjm1.html">Richard Mobbs</A>, Head of Information Services, Leicester University Computer
 Centre and Marina Carter, Postgraduate Student, Loughborough University.
</ADDRESS>

<ADDRESS>Last Updated: September 1995</ADDRESS>

</BODY>

</HTML>


