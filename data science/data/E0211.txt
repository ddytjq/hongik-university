ID=E0211
URL=http://www.intap.net/~drw/cpp/cpp02_03.htm
SIZE=8224
DATE=12/07/02
TIME=19:18:40
DATASET=C
HTML=
<html>
<head> 
<title>
online C++ tutorial: Brief Explanation of "Hello, Dave"
</title>
</head>

<body bgcolor="#ffffff"
       link = "#ff0000"
      alink = "#00ff00"
      vlink = "#660000" >


<table width="100%" border=0>
<tr>
<td align=left>
<a href="cpp02_01.htm"><img border=0 src="pictures/buttons/prevs.gif" width=51 height=34 alt="&lt;&lt;=="></a>
<a href="cpp02_02.htm"><img border=0 src="pictures/buttons/prevp.gif" width=37 height=34 alt="&lt;="></a>
</td>
<td align=center>
<a href="index.htm">
<img border=0 width=122 height=34 src="pictures/buttons/toc.gif"
    alt="[table of contents]"></a>
<a href="/cgi-bin/drw/cpp/search.cgi">
<img border=0 width=46 height=34 src="pictures/buttons/search.gif"
    alt="[search]"></a>
<a href="glossary.htm">
<img border=0 width=61 height=34 src="pictures/buttons/glossary.gif"
    alt="[glossary]"></a>
<a href="feedback.htm">
<img border=0 width=65 height=34 src="pictures/buttons/feedback.gif"
    alt="[feedback]"></a>
</td>
<td align=right>

<a href="cpp03_01.htm"><img border=0 src="pictures/buttons/nextp.gif" width=37 height=34 alt="=&gt;"></a>
<a href="cpp03_01.htm"><img border=0 src="pictures/buttons/nexts.gif" width=51 height=34 alt="==&gt;&gt;"></a>
</td>
</tr>
</table>
<hr>
<table width="100%"><tr><td align=left><img src="pictures/buttons/cppsm.gif" width=143 height=37 alt="[online C++ tutorial]"></td><td align=right><b>Section 2: A First Program </b></td></tr></table>
<center><h2>Section 2.3: Brief Explanation of "Hello, Dave"</h2></center>

<p>
Now that you've successfully compiled your program, let's take
a look at each line of code so that you have a general
understanding of how the program works.  It will probably
look confusing if you've never seen C++ syntax before, but
that's completely natural.
</p>

<p>
Here's the program again:

<pre>
//include this file for cout
#include &lt;iostream.h&gt;

int main() {

  //print out the text string, "Hello, World!"
  cout &lt;&lt; "Hello, World!" &lt;&lt; endl;

  return 0;

}
</pre>
</p>

<p>
Let's take a look at each line of code that makes up <code>hello.C</code>.
</p>

<p>
<b><code>//include this file for cout</code></b>
<blockquote>
This line is a <a href="glossary.htm#comment">comment</a> line.
The <code>//</code> indicates that everything following it
should be ignored by the compiler.  This allows you to add
English explanations to what might otherwise be confusing code.
You have the freedom to comment your code as much as you like --
some programmers write code with no comments at all; others
write several lines of comments for each line of C++ code.
It's all up to you.  Keep in mind, though, that if anyone
else will ever read your code, you'll probably want to add
comments.  Even if you are the only one who will ever read
your code, you should add comments.  It sounds implausible,
but programmers often don't understand code they've written
weeks ago!

<h5><a href="comments.htm">more on comments</a></h5>

</blockquote>
</p>


<p>
<b><code>#include &lt;iostream.h&gt;</code></b>
<blockquote>
This line is read "pound include i-o-stream dot h".  The
effect of this line is to essentially "copy and paste"
the entire file <code>iostream.h</code> into your own
file at this line.  So you can think of this syntax
as replacing the line <code>#include &lt;iostream.h&gt;</code>
with the contents of the file <code>iostream.h</code>.
<code>#include</code> is known as a
<a href="glossary.htm#preprocesor_directive">preprocessor
directive</a>, which will be covered much later.
</blockquote>

<blockquote>
<b>Where is the file <code>iostream.h</code>?</b><br>
This file is located somewhere in your include 
<a href="glossary.htm#path">path</a>.  The include path
indicates the directories on your computer in which to search
for a file, if the file is not located in the current directory.
</blockquote>

<blockquote>
<b>Why do I need to include <code>iostream.h</code>?</b><br>
In this case, <code>iostream.h</code> is a file containing
code for input/output operations.  You need to include
<code>iostream.h</code> so that the compiler knows about
the word <code>cout</code>, which appears a couple of
lines below.

<h5><a href="preprocessor.htm">more on preprocessor directives</a></h5>
</blockquote>

</p>


<p>
<b><code>int main() {</code></b>
<blockquote>
Every C++ program must have what is known as a
<code><a href="glossary.htm#main">main</a></code> function.  
When you run the program, the program will go through every
line of code in the
<code>main</code> function and execute it.  If your 
<code>main</code> is empty, then your program will do
nothing.
</blockquote>
<blockquote>
There are essentially four parts to a function definition.
They are the <a href="glossary.htm#return_type">return type</a>,
the function name, the <a href="glossary.htm#parameter">parameter</a>
list, and the function body, in that order.  In this case:
<ul>
<li>return type: <code>int</code></li>
<li>function name: <code>main</code></li>
<li>parameter list: <code>()</code></li>
<li>function body: <code>{ ... }</code></li>
</ul>

For now, the important thing to remember is that the function body
is the part enclosed in <code>{ ... }</code> ("curly braces").
The <code>{</code> indicates the beginning of the function,
and the <code>}</code> indicates the end of the function.  The
function body is the stuff in between. 

<h5><a href="functions.htm">more on functions</a></h5>
</blockquote>
</p>


<p>
<b><code>//print out the text string, "Hello, World!"</code></b>
<blockquote>
Another comment line.  Remember, the compiler ignores anything
following <code>//</code> (up until the end of the line), so you can
say whatever you want on these lines.
</blockquote>
</p>


<p>
<b><code>cout &lt;&lt; "Hello, World!" &lt;&lt; endl;</code></b>
<blockquote>
This is the line that prints out the text string, "Hello, World!".
For now, don't worry about how <code><a
href="glossary.htm#cout">cout</a></code> works, just know how to use
it.  You can print out any series of text strings by separating them
with <code>&lt;&lt;</code>.  So, instead of saying <code>cout &lt;&lt; "Hello,
World!" &lt;&lt; endl;</code>, you could say <code>cout &lt;&lt; "Hello, " &lt;&lt;
"World" &lt;&lt; "!" &lt;&lt; endl;</code>.  The <code>endl</code> simply adds a
carriage return (stands for "end-line").

<h5><a href="streams.htm">more on streams</a></h5>

</blockquote>
</p>


<p>
<b><code>return 0;</code></b>
<blockquote>
This line is necessary because the return type of <code>main</code> is
<code>int</code> (see above).  We'll talk more about functions and
return types later, but for now understand that because the function's
return type is <code>int</code>, the function must return an
<code>int</code> (integer).  To return 0 (which is an integer, we
simply write <code>return 0;</code>.

<h5><a href="return_values.htm">more on return values</a></h5>

</blockquote>
</p>



<hr>
<table width="100%" border=0>
<tr>
<td align=left>
<a href="cpp02_01.htm"><img border=0 src="pictures/buttons/prevs.gif" width=51 height=34 alt="&lt;&lt;=="></a>
<a href="cpp02_02.htm"><img border=0 src="pictures/buttons/prevp.gif" width=37 height=34 alt="&lt;="></a>
</td>
<td align=center>
<a href="index.htm">
<img border=0 width=122 height=34 src="pictures/buttons/toc.gif"
    alt="[table of contents]"></a>
<a href="/cgi-bin/drw/cpp/search.cgi">
<img border=0 width=46 height=34 src="pictures/buttons/search.gif"
    alt="[search]"></a>
<a href="glossary.htm">
<img border=0 width=61 height=34 src="pictures/buttons/glossary.gif"
    alt="[glossary]"></a>
<a href="feedback.htm">
<img border=0 width=65 height=34 src="pictures/buttons/feedback.gif"
    alt="[feedback]"></a>
</td>
<td align=right>

<a href="cpp03_01.htm"><img border=0 src="pictures/buttons/nextp.gif" width=37 height=34 alt="=&gt;"></a>
<a href="cpp03_01.htm"><img border=0 src="pictures/buttons/nexts.gif" width=51 height=34 alt="==&gt;&gt;"></a>
</td>
</tr>
</table>
</body>
</html>

