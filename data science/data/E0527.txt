ID=E0527
URL=http://www.rit.edu/~jpw9607/gne/html/classGNE_1_1RawPacket.html
SIZE=24108
DATE=12/07/02
TIME=19:21:54
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE::RawPacket class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE::RawPacket  Class Reference</h1>A utility class for creating a raw block of data that is used to directly send data through the socket, and on the other side, parse it into system-dependant data. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RawPacket_8h-source.html">RawPacket.h</a>&gt;</code>
<p>
<a href="classGNE_1_1RawPacket-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a0">RawPacket</a> (gbyte *buffer=NULL)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Create a new <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>, optionally with a buffer.</em> <a href="#a0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a1">~RawPacket</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Destroys this object.</em> <a href="#a1">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>const gbyte *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a2">getData</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Gets the raw block of data.</em> <a href="#a2">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a3">getPosition</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the position in the buffer from 0.</em> <a href="#a3">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a4">reset</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Resets the reading/writing position back to 0.</em> <a href="#a4">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a5">writeRaw</a> (const gbyte *block, int length)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Writes raw data starting at the current position.</em> <a href="#a5">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a6">readRaw</a> (gbyte *block, int length)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Like writeRaw, but just the other way around now :).</em> <a href="#a6">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>RawPacket &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a7">operator&lt;&lt;</a> (<a class="el" href="namespaceGNE.html#a20">gint8</a> x)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Stream operators for writing to this <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a7">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a8" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a8">operator&lt;&lt;</a> (guint8 x)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This operator also works for gbool and gbyte.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a9" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (gint16 x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a10" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (guint16 x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a11" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (gint32 x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a12" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (guint32 x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a13" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (<a class="el" href="namespaceGNE.html#a30">gsingle</a> x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a14" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (<a class="el" href="namespaceGNE.html#a31">gdouble</a> x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a15" doxytag="GNE::RawPacket::operator<<"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&lt;&lt;</b> (const std::string &amp;x)</td></tr>
<tr><td nowrap align=right valign=top>RawPacket &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a16">operator&lt;&lt;</a> (const <a class="el" href="classGNE_1_1Packet.html">Packet</a> &amp;packet)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Writes a packet to the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a16">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>RawPacket &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a17">operator&gt;&gt;</a> (<a class="el" href="namespaceGNE.html#a20">gint8</a> &amp;x)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Stream operators for reading from this <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a17">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a18" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a18">operator&gt;&gt;</a> (guint8 &amp;x)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This operator also works for gbool and gbyte.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a19" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (gint16 &amp;x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a20" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (guint16 &amp;x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a21" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (gint32 &amp;x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a22" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (guint32 &amp;x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a23" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (<a class="el" href="namespaceGNE.html#a30">gsingle</a> &amp;x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a24" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (<a class="el" href="namespaceGNE.html#a31">gdouble</a> &amp;x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a25" doxytag="GNE::RawPacket::operator>>"></a>
RawPacket &amp;&nbsp;</td><td valign=bottom><b>operator&gt;&gt;</b> (std::string &amp;x)</td></tr>
<tr><td nowrap align=right valign=top>RawPacket &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#a26">operator&gt;&gt;</a> (<a class="el" href="classGNE_1_1Packet.html">Packet</a> &amp;packet)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This function calls the packet's readPacket function.</em> <a href="#a26">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top>const int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1RawPacket.html#p0">RAW_PACKET_LEN</a> = 512</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The max length of a <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#p0">More...</a><em></em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A utility class for creating a raw block of data that is used to directly send data through the socket, and on the other side, parse it into system-dependant data.
<p>
Users of <a class="el" href="namespaceGNE.html">GNE</a> can also use this class to serialize packets into a form suitable to be sent over their own types of network connections or saved/loaded from a file. A neat trick might be implemented where a file can "mimic" a server to provide the necessary packets to restore the game state.
<p>
The name of this class has confused a few. <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> is not derived from <a class="el" href="classGNE_1_1Packet.html">GNE::Packet</a>, so it is not an actual <a class="el" href="namespaceGNE.html">GNE</a> packet. This class represents the raw block of memory that will be sent over the network. There is a class called <a class="el" href="classGNE_1_1CustomPacket.html">CustomPacket</a> which will allow you to send RawPackets directly across the network.
<p>
See the example "expacket" for an example of the usage of this class. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a name="a0" doxytag="GNE::RawPacket::RawPacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> GNE::RawPacket::RawPacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">gbyte *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>buffer</em> = NULL          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Create a new <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>, optionally with a buffer.
<p>
If you pass NULL to this constructor, a new internal buffer will be created, and this <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> will then be meant for writing to only. If you pass a buffer to this constructor, this object will be meant from reading from only. If you pass a buffer into <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>, you should delete it yourself later. <dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>buffer</em>&nbsp;</td><td>
NULL for a writable object, or your own buffer for a readable object, which you will destroy after this object has been destroyed. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<a name="a1" doxytag="GNE::RawPacket::~RawPacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> GNE::RawPacket::~RawPacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Destroys this object.
<p>
The data buffer will be destroyed at this point, so you cannot use any pointers you got back from <a class="el" href="classGNE_1_1RawPacket.html#a2">getData</a>() after this point.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a name="a2" doxytag="GNE::RawPacket::getData"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const gbyte * GNE::RawPacket::getData </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Gets the raw block of data.
<p>
This will be used by the library to get the data that will actually be sent out to the socket.     </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::RawPacket::getPosition"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::RawPacket::getPosition </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the position in the buffer from 0.
<p>
If you are writing to this <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>, this will give the next writing position -- which will also be the length of the data written thus far. If you are reading, this will be the position of the next byte to be read -- the amount of data read thus far. This way you can tell how much was written or how much was read back in bytes.     </td>
  </tr>
</table>
<a name="a16" doxytag="GNE::RawPacket::operator<<"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> RawPacket &amp; GNE::RawPacket::operator&lt;&lt; </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classGNE_1_1Packet.html">Packet</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>x</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Writes a packet to the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
This function will simply call the packet's writePacket function. <dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1Packet.html#a5">Packet::writePacket</a> </dl>    </td>
  </tr>
</table>
<a name="a7" doxytag="GNE::RawPacket::operator<<"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> RawPacket &amp; GNE::RawPacket::operator&lt;&lt; </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="namespaceGNE.html#a20">gint8</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>x</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Stream operators for writing to this <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
All data is converted when appropriate into little endian format.     </td>
  </tr>
</table>
<a name="a26" doxytag="GNE::RawPacket::operator>>"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> RawPacket &amp; GNE::RawPacket::operator&gt;&gt; </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1Packet.html">Packet</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>x</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function calls the packet's readPacket function.
<p>
You will already need to know what kind of packet is next. If you don't, use PacketPaser::parseNextPacket. <dl compact><dt><b>
See also: </b><dd>
<a class="el" href="namespaceGNE_1_1PacketParser.html#a7">PacketParser::parseNextPacket</a> , <a class="el" href="classGNE_1_1Packet.html#a6">Packet::readPacket</a> </dl>    </td>
  </tr>
</table>
<a name="a17" doxytag="GNE::RawPacket::operator>>"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> RawPacket &amp; GNE::RawPacket::operator&gt;&gt; </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="namespaceGNE.html#a20">gint8</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>x</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Stream operators for reading from this <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
All data is converted when appropriate from big endian format.     </td>
  </tr>
</table>
<a name="a6" doxytag="GNE::RawPacket::readRaw"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::RawPacket::readRaw </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">gbyte *&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>block</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>length</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Like writeRaw, but just the other way around now :).
<p>
<dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1RawPacket.html#a5">writeRaw</a> </dl>    </td>
  </tr>
</table>
<a name="a4" doxytag="GNE::RawPacket::reset"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::RawPacket::reset </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Resets the reading/writing position back to 0.
<p>
When writing, this essentially "erases" all data, and when reading this starts reading from the beginning again.     </td>
  </tr>
</table>
<a name="a5" doxytag="GNE::RawPacket::writeRaw"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::RawPacket::writeRaw </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const gbyte *&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>block</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap>&nbsp; <em>length</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Writes raw data starting at the current position.
<p>
This acts similar to the memcpy function.     </td>
  </tr>
</table>
<hr><h2>Member Data Documentation</h2>
<a name="p0" doxytag="GNE::RawPacket::RAW_PACKET_LEN"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> const int GNE::RawPacket::RAW_PACKET_LEN = 512<code> [static]</code>
      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The max length of a <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
The internal buffer for a <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> used for writing will always have a buffer of this size.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="RawPacket_8h-source.html">RawPacket.h</a><li>RawPacket.cpp</ul>
<hr><address><small>Generated on Fri Mar 8 03:03:23 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

