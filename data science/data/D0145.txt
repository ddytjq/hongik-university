ID=D0145
URL=http://www-2.cs.cmu.edu/~jch/java/benchmarks.html
SIZE=10791
DATE=16/07/02
TIME=14:38:03
DATASET=Java
HTML=<html>
<head>
<title>Java Microbenchmarks</title>
<base href="http://www.cs.cmu.edu/~jch/java/benchmarks.html">
<meta name="author" content="Jonathan Hardwick">
<meta name="description" content="Results and analysis for Java microbenchmarks on the same platform.">
<meta name="keywords" content="speed, comparison, benchmark, JIT compiler">
</head>

<body>
<h1 align=center>Java Microbenchmarks</h1>
<p align=center><font face="Helvetica" size=-1>
[ <b><a href="optimization.html">index</a></b> ]
[ <a href="compilers.html">compilers</a>
 | <a href="maintainability.html">maintainability</a>
 | <a href="resources.html">resources</a>
 | <a href="rules.html">rules</a>
 | <a href="size.html">size</a>
 | <a href="speed.html">speed</a>
 | <a href="tools.html">tools</a> ]
</font></p>
<hr size=1 noshade>

<blockquote>

<b>Note:</b> for a more comprehensive set of benchmarks, I recommend Doug
Bell's 
<a href="http://www.javaworld.com/javaworld/jw-04-1997/jw-04-optimize.html">Benchmark
applet</a>.  I'm no longer actively maintaining these microbenchmarks.

<p>
I've created a set of microbenchmarks to test the performance of Java
operations on different platforms.  These can be used to guide optimization
decisions and to compare different Java implementations.  This page describes
the microbenchmarks and analyses the results for several different Java
implementations on a low-end PC.  The applet and results submitted by readers
for different platforms, together with the industry-standard Linpack
benchmark, are on separate pages:

<ul>
  <li><a href="microbench.html">Java Microbenchmark</a>: applet and results
  <li><a href="linpack.html">Java Linpack</a>: applet and results
</ul>

<h2>Description</h2>

The table below shows the time in microseconds to execute various Java
operations on a 486 PC (AMD DX4-120 with 24MB RAM and 256kB L2 cache, running
Windows 95).  The Java implementations tested are:

<ul>
  <li>Sun <a href="http://java.sun.com/products/JDK/">JDK</a> 1.0.2.
  <li>Symantec <a href="http://cafe.symantec.com/cafe/">Caf&eacute;</a> 1.51.
  <li>Symantec <a href="http://cafe.symantec.com/vcafe/">Visual
      Caf&eacute;</a> PR 2.
  <li>Microsoft <a href="http://www.microsoft.com/ie/">Internet Explorer</a>
      3.0 (<a href="http://www.microsoft.com/visualj/">Visual J++</a> uses the
      same VM).
  <li>Netscape <a href="http://www.netscape.com/comprod/products/navigator/">Navigator</a>
      3.0.
  <li>Asymetrix <a href="http://www.asymetrix.com/">SuperCede</a>
      beta.
</ul>
      
The Sun JDK uses an interpreter, while all the rest use just-in-time
compilers.  Times are only quoted to two significant figures because the
variance between runs is typically on the order of 5-10%.

<p>
<div align=center>
<table border=1 cellpadding=2>
<tr>
  <th>Description</th>
  <th>JDK</th>
  <th>Caf&eacute;</th>
  <th>VCaf&eacute;</th>
  <th>IE</th>
  <th>NN</th>
  <th>SC</th>
</tr>
<tr align=right>
  <td align=left>Loop overhead: <tt>while (Go) n++</tt></td>
  <td><tt>1.1&nbsp;&nbsp;</tt></td>
  <td><tt>0.052</tt></td>
  <td><tt>0.050</tt></td>
  <td><tt>0.066</tt></td>
  <td><tt>0.067</tt></td>
  <td><tt>0.065</tt></td>
</tr>
<tr align=right>
  <td align=left>Local variable assignment: <tt>i = n</tt></td>
  <td><tt>0.48&nbsp;</tt></td>
  <td><tt>0.037</tt></td>
  <td><tt>0.027</tt></td>
  <td><tt>0.009</tt></td>
  <td><tt>0.006</tt></td>
  <td><tt>0.006</tt></td>
</tr>
<tr align=right>
  <td align=left>Instance var. assign.: <tt>this.i = n</tt></td>
  <td><tt>1.0&nbsp;&nbsp;</tt></td>
  <td><tt>0.043</tt></td>
  <td><tt>0.041</tt></td>
  <td><tt>0.035</tt></td>
  <td><tt>0.034</tt></td>
  <td><tt>0.034</tt></td>
</tr>
<tr align=right>
  <td align=left>Array element assign.: <tt>a[0] = n</tt></td>
  <td><tt>1.2&nbsp;&nbsp;</tt></td>
  <td><tt>0.11&nbsp;</tt></td>
  <td><tt>0.066</tt></td>
  <td><tt>0.043</tt></td>
  <td><tt>0.087</tt></td>
  <td><tt>0.033</tt></td>
</tr>
<tr align=right>
  <td align=left>Byte increment: <tt>b++</tt></td>
  <td><tt>1.3&nbsp;&nbsp;</tt></td>
  <td><tt>0.068</tt></td>
  <td><tt>0.055</tt></td>
  <td><tt>0.048</tt></td>
  <td><tt>0.053</tt></td>
  <td><tt>0.007</tt></td>
</tr>
<tr align=right>
  <td align=left>Short increment: <tt>s++</tt></td>
  <td><tt>1.3&nbsp;&nbsp;</tt></td>
  <td><tt>0.067</tt></td>
  <td><tt>0.054</tt></td>
  <td><tt>0.048</tt></td>
  <td><tt>0.053</tt></td>
  <td><tt>0.014</tt></td>
</tr>
<tr align=right>
  <td align=left>Int increment: <tt>i++</tt></td>
  <td><tt>0.31&nbsp;</tt></td>
  <td><tt>0.030</tt></td>
  <td><tt>0.022</tt></td>
  <td><tt>0.006</tt></td>
  <td><tt>0.011</tt></td>
  <td><tt>0.006</tt></td>
</tr>
<tr align=right>
  <td align=left>Long increment: <tt>l++</tt></td>
  <td><tt>1.2&nbsp;&nbsp;</tt></td>
  <td><tt>0.071</tt></td>
  <td><tt>0.044</tt></td>
  <td><tt>0.049</tt></td>
  <td><tt>0.038</tt></td>
  <td><tt>0.007</tt></td>
</tr>
<tr align=right>
  <td align=left>Float increment: <tt>f++</tt></td>
  <td><tt>1.3&nbsp;&nbsp;</tt></td>
  <td><tt>0.25&nbsp;</tt></td>
  <td><tt>0.18&nbsp;</tt></td>
  <td><tt>0.17&nbsp;</tt></td>
  <td><tt>0.18&nbsp;</tt></td>
  <td><tt>0.18&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Double increment: <tt>d++</tt></td>
  <td><tt>1.2&nbsp;&nbsp;</tt></td>
  <td><tt>0.32&nbsp;</tt></td>
  <td><tt>0.20&nbsp;</tt></td>
  <td><tt>0.23&nbsp;</tt></td>
  <td><tt>0.19&nbsp;</tt></td>
  <td><tt>0.18&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Object creation: <tt>new Object()</tt></td>
  <td><tt>13.0&nbsp;&nbsp;</tt></td>
  <td><tt>9.5&nbsp;&nbsp;</tt></td>
  <td><tt>8.2&nbsp;&nbsp;</tt></td>
  <td><tt>13.0&nbsp;&nbsp;</tt></td>
  <td><tt>26.0&nbsp;&nbsp;</tt></td>
  <td><tt>5.9&nbsp;&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Array creation: <tt>new int[10]</tt></td>
  <td><tt>13.0&nbsp;&nbsp;</tt></td>
  <td><tt>11.0&nbsp;&nbsp;</tt></td>
  <td><tt>9.2&nbsp;&nbsp;</tt></td>
  <td><tt>13.0&nbsp;&nbsp;</tt></td>
  <td><tt>42.0&nbsp;&nbsp;</tt></td>
  <td><tt>39.0&nbsp;&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Method call: <tt>null_func()</tt></td>
  <td><tt>2.2&nbsp;&nbsp;</tt></td>
  <td><tt>0.22&nbsp;</tt></td>
  <td><tt>0.12&nbsp;</tt></td>
  <td><tt>0.13&nbsp;</tt></td>
  <td><tt>0.16&nbsp;</tt></td>
  <td><tt>0.13&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Synchronous call: <tt>sync_func()</tt></td>
  <td><tt>19.0&nbsp;&nbsp;</tt></td>
  <td><tt>13.0&nbsp;&nbsp;</tt></td>
  <td><tt>3.6&nbsp;&nbsp;</tt></td>
  <td><tt>4.1&nbsp;&nbsp;</tt></td>
  <td><tt>16.0&nbsp;&nbsp;</tt></td>
  <td><tt>5.1&nbsp;&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Math function: <tt>abs()</tt></td>
  <td><tt>4.9&nbsp;&nbsp;</tt></td>
  <td><tt>0.68&nbsp;</tt></td>
  <td><tt>0.13&nbsp;</tt></td>
  <td><tt>0.55&nbsp;</tt></td>
  <td><tt>0.59&nbsp;</tt></td>
  <td><tt>0.68&nbsp;</tt></td>
</tr>
<tr align=right>
  <td align=left>Inline code: <tt>(x &lt; 0) ? -x : x</tt></td>
  <td><tt>0.55&nbsp;</tt></td>
  <td><tt>0.087</tt></td>
  <td><tt>0.09&nbsp;</tt></td>
  <td><tt>0.084</tt></td>
  <td><tt>0.19&nbsp;</tt></td>
  <td><tt>0.61&nbsp;</tt></td>
</tr>
</table>
</div>

<h2><a name="analysis">Analysis</a></h2>
<dl>
  <dt><b>Variable accesses:</b>
  <dd>The first benchmark times a null loop (this time has been subtracted
      from all the other results).  The next three benchmarks time how long it
      takes to store an integer in a local variable, in an instance variable,
      and in an array.  As might be expected, local variables are fastest.
      Instance variables are slower because there's an extra
      <!-- "http://www.javasoft.com/doc/vmspec/html/vmspec-26.html" -->
      field operation involved (tip from KB Sriram), and array
      accesses are slower still, due to the bounds checking that Java
      performs.  Note that most JIT compilers store
      local variables in registers, resulting in an additional speedup.
      <p>
      
  <dt><b>Data types:</b>
  <dd>The next six benchmarks time how long it takes to increment the
      <tt>byte</tt>, <tt>short</tt>, <tt>int</tt>, <tt>long</tt>,
      <tt>float</tt>, and <tt>double</tt> data types.  <tt>int</tt>s are
      consistently fastest, especially when using
      JIT compilers.  For floating-point code, <tt>double</tt> is
      typically only slightly slower than <tt>float</tt>.
      <p>

  <dt><b>Objects and methods</b>

  <dd>Finally we time creating objects and integer arrays, calling normal and
      synchronized methods, and calling a predefined math function versus
      inlining a simple version of the same function.  Creating an object is
      slow, and current JIT compilers haven't improved things much.  It's
      typically about the same cost as creating an integer array of length 10.
      Synchronized method calls are 10-100 times slower than the normal
      variety.  Finally, replacing a system function such as <tt>Math.abs</tt>
      with simplified inlined code (<tt>(x &lt; 0.0) ? -x : x;</tt>) can
      significantly improve performance for interpreters and older JIT
      compilers.  However, Visual Caf&eacute; represents the newer wave of JIT
      compilers with specialized native code for some built-in functions --
      you're unlikely to be able to do better than these!
      <p>

  <dt><b>Just-in-time <i>vs</i> interpreted:</b>
  <dd>Comparing the results for Sun's JDK interpreter with a JIT compiler
      (e.g. VJ++), we can see that just-in-time compilers improve the
      performance of most operations by 5-30 times.  However, the time to
      create an object hasn't improved at all, and the time to call a
      synchronized method has only improved by a factor of four, so reducing
      the number of objects created (see the <a href="speed.html">speed
      page</a>) and minimizing the amount of synchronization in your code have
      both become even <b>more</b> important.
      <p>
      
</dl>
</blockquote>

<hr size=1 noshade>
<center><table width="100%" cellspacing=0 cellpadding=0 border=0>
  <tr>
    <td align=left><font size=-1>http://www.cs.cmu.edu/~jch/java/benchmarks.html</font></td>
    <td align=right><font size=-1>Java Microbenchmarks</font></td>
  </tr>
  <tr>
    <td align=left><font size=-1><!-- hhmts start -->Last modified: Wed 18 Mar 1998<!-- hhmts end --></font></td>
    <td align=right><font size=-1>Copyright &#169 1996, 1997 <a
    href="http://www.cs.cmu.edu/~jch/">Jonathan Hardwick</a></font></td>
  </tr>
</table></center>
</body>
</html>

