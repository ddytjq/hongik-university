ID=D0512
URL=http://www.geocities.com/lkp550/java/lesson3.htm
SIZE=6895
DATE=16/07/02
TIME=14:50:02
DATASET=Java
HTML=<html>
<body background="notepad.gif">
<table width=90% align=right><tr><td>
<font face="arial">
<center><h2><u>Lesson Three</u></h2></center>

<p><b>Methods</b> are statements that do what you ask them to. An example of a method would be inserting an address. You'd call the method "anAddress();" from the main(), then create the method "public static void anAddress()" with the address inside this method. You can use the same method in many different programs as long as you provide the class it's coming from. If you had a method named "anAddress();", and it was in a class called "Different" instead of "First", but you wanted to use it in First, you would have to type it as <b>First.anAddress();</b>. You can also create methods that require single or multiple arguments. For instance, say you wanted to create a class that holds two integer variables with values assigned. You would create two methods that compute the sum of and the difference between those values by calling the values from the main. Then, say you wanted to add a method that computes the product of the values, but instead of printing the values, you wanted to send the values to the main() for printing. You would end up with a program that looks something like this:<br>
<br>
<tt>
public class Numbers<br>
{<br>
  public static void main(String[] args)<br>
  {<br>
    int value1 = 40, value2 = 30;<br>
    sum(value1, value2);<br>
    difference(value1, value2);<br>
    int prod;<br>
    prod = product(value1, value2);<br>
      System.out.println("The product is " + prod);<br>
  }<br>
  public static void sum(int num1, int num2)<br>
  {<br>
    int add;<br>
    add = num1 + num2;<br>
      System.out.println("The sum is " + add);<br>
  }<br>
  public static void difference(int dif1, int dif2)<br>
  {<br>
    int minus;<br>
    minus = dif1 - dif2;<br>
      System.out.println("The difference is " + minus);<br>
  }<br>
  public static int product(int mult1, int mult2)<br>
  {<br>
    int times;<br>
    times = mult1 * mult2;<br>
    return times;<br>
  }<br>
}<br>
</tt>
If you compiled this program and ran it, you would get:<br>
<br>
<b>The sum is 70<br>
The difference is 10<br>
The product is 1200<br>
</b>
<br>
This is called <b>information hiding</b>, where you don't know how the program is executed, you just know it works. Notice the word <b>return</b> at the end of this program. This statement tells the program what value to return to the main(). For methods that return a value, you need to omit the <b>void</b> identifier.

<p><b>Classes</b>, on the other hand, are more like the make of a car, bodies of water, yogurt, etc. An <i>Escort</i> is a part of the <i>Ford</i> class. <i>Pacific</i> is a part of the <i>Ocean</i> class. <i>Yogurt</i> is a part of the <i>dairy</i> class, and so on. Classes are created when you type <b>public class NameOfTheClass</b>. The types of accesses that are allowed are <b>private, public, friendly, protected, private protected, static, and final</b>. For a more detail explaination of these access modifiers, check out <a href="http://www.geocities.com/RainForest/Canopy/4774/Java">The Java Resource Dump</a>. Objects are instantiations of a class, which means they inherit their attributes from classes. 

<p>Here is a class that contains multiple methods to manipulate the given data:<br>
<br>
<tt>
public class Student<br>
{<br>
  private int idNumber;<br>
  private int hoursEarned;<br>
  private double pointsEarned;<br>
  private double pointAverage;<br>
  Student()<br>
  {<br>
    idNumber = 42;<br>
    hoursEarned = 3;<br>
    pointsEarned = 3.5 * hoursEarned;<br>
    pointAverage = pointsEarned / hoursEarned;<br>
  }<br>
  public int getIdNumber()<br>
  {<br>
    return idNumber;<br>
  }<br>
  public int getHoursEarned()<br>
  {<br>
    return hoursEarned;<br>
  }<br>
  public double getPointsEarned()<br>
  {<br>
    return pointsEarned;<br>
  }<br>
  public double getPointAverage()<br>
  {<br>
    return pointAverage;<br>
  }<br>
  public void setIdNumber(int n)<br>
  {<br>
    idNumber = n;<br>
  }<br>
  public void setHoursEarned(int hrs)<br>
  {<br>
    hoursEarned = hrs;<br>
  }<br>
  public void setPointsEarned(double pts)<br>
  {<br>
    pointsEarned = pts;<br>
  }<br>
  public void setPointAverage(double ave)<br>
  {<br>
    pointAverage = ave;<br>
  }<br>
}<br>
</tt>

<p>Statements like <b>public int getIdNumber()</b> and <b>public void setIdNumber(int n)</b> configure the data so it can be used by the methods in the program. Notice the <b>Student()</b> method. This is what we call a <b>constructor method</b>. A constructor method establishes an object for the class to perform properly. In a sense, it allows the instantiations to instantiate the objects. In this next program, you'll see how objects are instantiated:<br>
<br>
<tt>
public class ShowStudent<br>
{<br>
  public static void main(String[] args)<br>
  {<br>
    Student oneStudent = new Student();<br>
    System.out.println("Student id number is " + oneStudent.getIdNumber());<br>
    System.out.println("Number of hours earned " + oneStudent.getHoursEarned());<br>
    System.out.println("Points earned " + oneStudent.getPointsEarned());<br>
    System.out.println("Grade point average is " + oneStudent.getPointAverage());<br>
  }<br>
}<br>
</tt>

<P>The line <b>Student oneStudent = new Student();</b> instantiates the objects so that instantiations like <b>oneStudent.getPointAverage()</b> can receive and send their data.


<p><b><u>Question:</u></b> You mean I have to create every line I want to use in my programs? Java's been out for a while. Hasn't someone already created objects that I can use?

<p><b><u>Answer:</u></b> Yes, and we will be getting to that in the next few lessons. Relax. Next, you'll be learning about blocks, scopes, and overloading.<br>

<hr>
<center><a href="lesson2.htm">Lesson Two</a> | <a href="http://www.geocities.com/lkp550/JAVAHUT.htm">Home</a> | <a href="lesson4.htm">Lesson Four</a><br>
<br>
If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.</center>
</font>
</td></tr></table>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026500004" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026500004" ALT=1 WIDTH=1 HEIGHT=1>

