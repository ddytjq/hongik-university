ID=D0059
URL=http://www.geocities.com/SiliconValley/Horizon/6481/AltUI10.html
SIZE=25662
DATE=16/07/02
TIME=14:36:01
DATASET=Java
HTML=<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Making your own UI Components</title>
</head>

<body bgcolor="#C0C0C0" text="#000000" link="#FF0000"
vlink="#800080" alink="#0000FF">

<p align="center"><a href="index.html#top" name="top"><img
src="JavaDevPage.gif" alt="Java Developer's Page" align="middle"
border="0" width="461" height="118"></a></p>

<p>&nbsp;</p>

<h1 align="center">Making your own UI Components</h1>

<p>&nbsp;</p>

<p>At the beginning of PC era, the screens were monochrome and
the applications ran in text mode. Then the color monitors and
the user interfaces based on menus and windows showed up. Each
programmer wrote his own library. Borland created Turbo Vision.
In those days, Microsoft was working at Windows. The programmers
had to learn the Windows API. After that MFC and OWL appeared.
Today if you want to make a Windows application that looks like
those made by Microsoft you must use MFC. If you want to build it
easy and quickly, you should use one of the many existing RAD
tools. However, if you need a simple interface that anybody can
use and the speed of the application is not critical, you should
chose Java. In addition, your program will run into a browser and
anyone who has access to Internet will be able to use it.</p>

<p>Java's solution named <b>AWT</b> is object oriented and maps a
collection of easy-to-use classes on the API of different
operating systems. The user who is familiarized with one
operating system will be able to distinguish a Java application
from a native one (because of the simplicity of the former), but
this will not look alien to him.</p>

<p>Sometimes, the same application must look identical no matter
the running platform is. In such a situation, you can use a
framework that exploits the graphics primitives of AWT
(rectangles, lines, text, etc) to create user interface
components that are platform independent. One of these frameworks
is IFC from Netscape. Another is Sun's Swing, which is a part of
JFC. If these solutions aren't good for you, then you can make
your own components. You might be forced to do this thing if the
components you need are not &quot;standard&quot;.</p>

<p>&nbsp;</p>

<h3><b>Push buttons</b></h3>

<p>The interface elements of AWT that have a graphics
representation derive from java.awt.Component class. Although
this class have a few tens of methods, only three of them can
modify the look of a component: setFont(), setBackground() and
setForeground(). Even more, there is no guaranty that the
properties of the graphics object will change in case AWT created
this object by calling APIs of the operating system. For example,
I succeeded to modify the font of an AWT 1.0 button
(java.awt.Button), but I could not change its colors. In such a
situation, the only solution is to write your own class. This
class must implement the same functions as java.awt.Button does,
but it paints itself on screen by using the methods of
java.awt.Graphics.</p>

<p>The <a href="#AltButton_java" name="AltButton_back">AltButton</a>
class is a subclass of java.awt.Canvas (which derives from
java.awt.Component). The methods AltButton inherits indirectly
from Component will handle the fonts and the colors. Hence, the
member variables, which describe the state of an AltButton, are
simply <b>label</b> and <b>pressed.</b></p>

<p>The <b>minimumSize() </b>and<b> preferredSize()</b> methods
return the preferred dimension of a button. The real size of an
AltButton's area depends on the type of the LayoutManager used by
the Container of the AltButton object.</p>

<p>The <b>paint()</b> method paints the button. Because AWT 1.0
doesn't offer a method for centered drawing of strings, before
drawString(), it calls getFontMetrics() method to obtain the font
characteristics. Depending on these, it computes the (x,y)
coordinates at which it prints the button label. Then it draws a
rectangle that indicates the button's state (pressed or not). For
this purpose, it uses the draw3DRect() method.</p>

<p>The <b>mouseXXX() </b>methods are called by handleEvent()
(inherited from java.awt.Component), depending on the events
generated by the user with the mouse. When a button is pushed,
mouseDown() method is called and when the button is released
mouseUp() method is called. This latter one calls <b>fireActionEvent()</b>,
which fires an ACTION_EVENT, with the help of postEvent(). The
postEvent() is inherited from java.awt.Component and calls
handleEvent(). If this method returns false, the event is posted
to button's parent. In this way, the event may traverse the
entire hierarchy of containers on whose bottom the button is.</p>

<p>&nbsp;</p>

<h3><b>Checkbox buttons</b></h3>

<p>Probably, you are wondering why I need to color the buttons.
The <a href="#AltCheckbox_java" name="AltCheckbox_back">AltCheckbox</a>
class, which is an AltButton subclass, needs this because it
offers a new type of checkbox buttons. The state of such a
checkbox is indicated to the user by its color. If the button
wasn't selected, it uses its parent's colors (the parent of the
button is a container). Otherwise, it uses the colors that are
stored in <b>selBackColor</b> and <b>selForeColor</b> public
class variables. The state of a button is given by the <b>state</b>
member variable and the affiliation to a group is given by the <b>group</b>
variable.</p>

<p>The AltCheckbox methods have the same names and functionality
as the java.awt.Checkbox methods have.</p>

<p>The <b>setState()</b> method sets the button's state and
changes its color to indicate to the user the current state.</p>

<p>The <b>setCheckboxGroup()</b> method changes the button's
group. It takes into account that only one button of the group
may be selected at a given time.</p>

<p>The <b>action()</b> method will intercept the ACTION_EVENT
events fired when the button is pushed. If the button isn't
member of a group then its state is inverted. Otherwise, it
becomes the current button of its group. The false value returned
from the function makes the event to be transmitted up to the
component containment hierarchy. Therefore, it can be caught by
the button's container, eventually by the container's container,
and so on.</p>

<p>&nbsp;</p>

<h3><b>Radio buttons</b></h3>

<p>The <a href="#AltCheckboxGroup_java"
name="AltCheckboxGroup_back">AltCheckboxGroup</a> class does the
same thing as java.awt.CheckboxGroup does - it groups a few
checkbox buttons and it takes care that only one of them to be
selected at a given moment. It has only one member variable named
<b>currentChoice</b>, in which it keeps a reference to the
current AltCheckbox object of the group. </p>

<p>It isn't necessary to create a list that contains all the
buttons of the group. </p>

<p>The <b>setCurrent()</b> method sets the current checkbox of
the group.</p>

<p>&nbsp;</p>

<h3><b>Test applet</b></h3>

<p><applet code="InsideAWT" align="baseline" width="200"
height="200"></applet></p>

<p>The <a href="#Test_java" name="Test_back">Test</a> class is an
applet that uses GridLayout manager to group five Panels that use
GridLayout manager too. Each of these contains three or two
buttons. The buttons from east are AltButton instances. The rest
of them are AltCheckbox objects. The buttons from north and those
from south are grouped with the help of two objects whose type is
AltCheckboxGroup.</p>

<p>The <b>action()</b> method of the applet handle some of the
events fired when the buttons are activated. In case of those
from east, the state of the western buttons is changed, and in
case of those from south, the northern group is synchronized with
that from south.</p>

<p>&nbsp;</p>

<h3><b>Converting your Components to AWT 1.1</b></h3>

<p>The sources presented in this article are based on Java 1.0. I
used this version because there are many users whose browsers and
development tools were released before <b>Java 1.1</b>.
Nevertheless, the classes can be converted easily to the later
Java version.</p>

<p>First, you must convert the calls and the overrides of the
deprecated methods. For example the getSize() method must be
called instead of size(). The minimumSize() and preferredSize()
methods that AltButton overrides are in the same situation. Their
new names are getMinimumSize() and getPreferredSize(). They are
called by LayoutManagers.</p>

<p>Then, the real conversion to <b>AWT 1.1</b> is following. This
is a more difficult task than former because AWT 1.1 replaces the
old model for event processing with a new one, which improves
both the performance and the architecture of the applications.</p>

<p>The new delegation-based event model permits the separation
between the application lofic and the GUI code. The action()
method from Test applet must be eliminated. You will use instead
of it classes named Listeners, whose instances will be registered
to components that fire events (Sources).</p>

<p>The <a href="AltUI11.html#top">next</a> article shows how to
do the conversion and it explains the advantages.</p>

<p>&nbsp;</p>

<h3><b>Abbreviations</b></h3>

<p>API - Application Program Interface<br>
AWT - Abstract Window Toolkit (Java + native code, Sun)<br>
GUI - Graphical User Interface<br>
IFC - Internet Foundation Classes (Java, Netscape)<br>
JFC - Java Foundation Classes (Java, Sun)<br>
MFC - Microsoft Foundation Classes (C++, Microsoft)<br>
OWL - Object Windows Library (C++, Borland)<br>
RAD - Rapid Application Development</p>

<p>&nbsp;</p>

<h3><b>Resources</b></h3>

<p>The AWT Home Page<br>
<a href="http://java.sun.com/products/jdk/awt/index.html"
target="resource">http://java.sun.com/products/jdk/awt/index.html</a></p>

<p>JDK1.1 - AWT Enhancements<br>
<a
href="http://java.sun.com/products/jdk/1.1/docs/guide/awt/designspec/index.html"
target="resource">http://java.sun.com/products/jdk/1.1/docs/guide/awt/designspec/index.html</a></p>

<p>How to Convert Programs to the 1.1 AWT API<br>
<a
href="http://java.sun.com/products/jdk/1.1/docs/guide/awt/HowToUpgrade.html"
target="resource">http://java.sun.com/products/jdk/1.1/docs/guide/awt/HowToUpgrade.html</a></p>

<p>&nbsp;</p>

<h3><a name="AltButton_java"><strong>AltButton.java</strong></a></h3>

<pre><font color="#A00000">// AltButton.java</font>

<font color="#0000F0">import</font> java.awt.Color;
<font color="#0000F0">import</font> java.awt.Dimension;
<font color="#0000F0">import</font> java.awt.Event;
<font color="#0000F0">import</font> java.awt.Font;
<font color="#0000F0">import</font> java.awt.FontMetrics;
<font color="#0000F0">import</font> java.awt.Graphics;

<font color="#0000F0">public</font> <font color="#0000F0">class</font> AltButton <font
color="#0000F0">extends</font> java.awt.Canvas
{
    <font color="#0000F0">private</font> String label;
    <font color="#0000F0">protected</font> <font color="#0000F0">boolean</font> pressed;

    <font color="#0000F0">public</font> AltButton()
    {
        <font color="#0000F0">this</font>(&quot;&quot;);
    }

    <font color="#0000F0">public</font> AltButton(String label)
    {
        setLabel(label);
        pressed = false;
    }

    <font color="#0000F0">public</font> String getLabel()
    {
        <font color="#0000F0">return</font> label;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">void</font> setLabel(String label)
    {
        <font color="#0000F0">this</font>.label = label;
        repaint();
    }

    <font color="#0000F0">public</font> Dimension minimumSize() 
    {
        FontMetrics m = getFontMetrics(getFont());
        <font color="#0000F0">int</font> w = 6 * m.charWidth('X');
        <font color="#0000F0">if</font> (label != null)
            w += m.stringWidth(label);
        <font color="#0000F0">int</font> h = (<font
color="#0000F0">int</font>) (m.getHeight() * 1.6);
        <font color="#0000F0">return</font> <font color="#0000F0">new</font> Dimension(w, h);
    }

    <font color="#0000F0">public</font> Dimension preferredSize()
    {
        <font color="#0000F0">return</font> minimumSize();
    }

    <font color="#0000F0">public</font> <font color="#0000F0">void</font> paint(Graphics g) 
    {
        Dimension sz = size();
        FontMetrics m = g.getFontMetrics();
        <font color="#0000F0">int</font> w = m.stringWidth(label);
        <font color="#0000F0">int</font> h = m.getHeight();
        <font color="#0000F0">int</font> x = (sz.width - w) / 2;
        <font color="#0000F0">int</font> y = (sz.height - h) / 2;
        y += m.getLeading() + m.getAscent();
        <font color="#0000F0">if</font> (label != null)
            g.drawString(label, x, y);
        g.setColor(Color.white);
        g.draw3DRect(1, 1, sz.width-3, sz.height-3, !pressed);
        g.draw3DRect(0, 0, sz.width-1, sz.height-1, !pressed);
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> mouseEnter(Event  evt, <font
color="#0000F0">int</font>  x, <font color="#0000F0">int</font>  y)
    {
        <font color="#0000F0">return</font> true;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> mouseExit(Event  evt, <font
color="#0000F0">int</font>  x, <font color="#0000F0">int</font>  y)
    {
        <font color="#0000F0">if</font> (pressed)
        {
            pressed = false;
            repaint();
        }
        <font color="#0000F0">return</font> true;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> mouseDown(Event  evt, <font
color="#0000F0">int</font>  x, <font color="#0000F0">int</font>  y)
    {
        pressed = true;
        repaint();
        <font color="#0000F0">return</font> true;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> mouseUp(Event  evt, <font
color="#0000F0">int</font>  x, <font color="#0000F0">int</font>  y)
    {
        <font color="#0000F0">if</font> (!pressed)
            <font color="#0000F0">return</font> false;
        pressed = false;
        repaint();
        fireActionEvent();
        <font color="#0000F0">return</font> true;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">void</font> fireActionEvent()
    {
        postEvent(<font color="#0000F0">new</font> Event(<font
color="#0000F0">this</font>, Event.ACTION_EVENT, label));
    }

}
</pre>

<p><a href="#AltButton_back">Back to story</a></p>

<p>&nbsp;</p>

<h3><a name="AltCheckbox_java"><strong>AltCheckbox.java</strong></a></h3>

<pre><font color="#A00000">// AltCheckbox.java</font>

<font color="#0000F0">import</font> java.awt.Color;
<font color="#0000F0">import</font> java.awt.Container;
<font color="#0000F0">import</font> java.awt.Event;
<font color="#0000F0">import</font> java.awt.Graphics;

<font color="#0000F0">public</font> <font color="#0000F0">class</font> AltCheckbox <font
color="#0000F0">extends</font> AltButton
{
    <font color="#0000F0">static</font> <font color="#0000F0">public</font> Color selBackColor = Color.red;
    <font color="#0000F0">static</font> <font color="#0000F0">public</font> Color selForeColor = Color.white;
    <font color="#0000F0">private</font> <font color="#0000F0">boolean</font> state;
    <font color="#0000F0">private</font> AltCheckboxGroup group;

    <font color="#0000F0">public</font> AltCheckbox()
    {
        <font color="#0000F0">this</font>(&quot;&quot;, null, false);
    }

    <font color="#0000F0">public</font> AltCheckbox(String label)
    {
        <font color="#0000F0">this</font>(label, null, false);
    }

    <font color="#0000F0">public</font> AltCheckbox(String label, AltCheckboxGroup group, <font
color="#0000F0">boolean</font> state)
    {
        <font color="#0000F0">super</font>(label);
        setState(state);
        setCheckboxGroup(group);
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> getState() 
    {
        <font color="#0000F0">return</font> state;
    }
    
    <font color="#0000F0">public</font> <font color="#0000F0">void</font> setState(<font
color="#0000F0">boolean</font> state) 
    {
        <font color="#0000F0">if</font> (state == <font
color="#0000F0">this</font>.state)
            <font color="#0000F0">return</font>;
        <font color="#0000F0">this</font>.state = state;
        <font color="#0000F0">if</font> (state &amp;&amp; group != null)
            group.setCurrent(<font color="#0000F0">this</font>);
        <font color="#0000F0">if</font> (state)
        {
            setBackground(selBackColor);
            setForeground(selForeColor);
        } 
        <font color="#0000F0">else</font>
        {
            Container p = getParent();
            <font color="#0000F0">if</font> (p != null)
            {
                setBackground(p.getBackground());
                setForeground(p.getForeground());
            }
            <font color="#0000F0">else</font>
            {
                setBackground(null);
                setForeground(null);
            }
        }
        repaint();
    }

    <font color="#0000F0">public</font> AltCheckboxGroup getCheckboxGroup() 
    {
        <font color="#0000F0">return</font> group;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">void</font> setCheckboxGroup(AltCheckboxGroup group) 
    {
        <font color="#0000F0">if</font> (<font color="#0000F0">this</font>.group == group)
            <font color="#0000F0">return</font>;
        <font color="#0000F0">if</font> (<font color="#0000F0">this</font>.group != null)
            <font color="#0000F0">this</font>.group.setCurrent(null);
        <font color="#0000F0">this</font>.group = group;
        <font color="#0000F0">if</font> (state &amp;&amp; group != null)
            group.setCurrent(<font color="#0000F0">this</font>);
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> action(Event  evt, Object  what)
    {
        <font color="#0000F0">if</font> (group == null)
            setState(!state);
        <font color="#0000F0">else</font>
            group.setCurrent(<font color="#0000F0">this</font>);
        <font color="#0000F0">return</font> false;
    }

}
</pre>

<p><a href="#AltCheckbox_back">Back to story</a></p>

<p>&nbsp;</p>

<h3><a name="AltCheckboxGroup_java"><strong>AltCheckboxGroup.java</strong></a></h3>

<pre><font color="#A00000">// AltCheckBoxGroup.java</font>

<font color="#0000F0">public</font> <font color="#0000F0">class</font> AltCheckboxGroup 
{
    AltCheckbox currentChoice = null;

    <font color="#0000F0">public</font> AltCheckboxGroup() 
    {
    }

    <font color="#0000F0">public</font> AltCheckbox getCurrent() 
    {
        <font color="#0000F0">return</font> currentChoice;
    }

    <font color="#0000F0">public</font> <font color="#0000F0">synchronized</font> <font
color="#0000F0">void</font> setCurrent(AltCheckbox newChoice) 
    {
        <font color="#0000F0">if</font> (newChoice != null &amp;&amp; newChoice.getCheckboxGroup() != <font
color="#0000F0">this</font>) 
            <font color="#0000F0">return</font>;
        AltCheckbox oldChoice = <font color="#0000F0">this</font>.currentChoice;
        <font color="#0000F0">if</font> (oldChoice == newChoice)
            <font color="#0000F0">return</font>;
        <font color="#0000F0">this</font>.currentChoice = newChoice;
        <font color="#0000F0">if</font> (oldChoice != null)
            oldChoice.setState(false);
        <font color="#0000F0">if</font> (newChoice != null)
            newChoice.setState(true);
    }

}
</pre>

<p><a href="#AltCheckboxGroup_back">Back to story</a></p>

<p>&nbsp;</p>

<h3><a name="Test_java"><strong>Test.java</strong></a></h3>

<pre><font color="#A00000">// Test.java</font>

<font color="#0000F0">import</font> java.awt.Color;
<font color="#0000F0">import</font> java.awt.Event;
<font color="#0000F0">import</font> java.awt.Font;
<font color="#0000F0">import</font> java.awt.GridLayout;
<font color="#0000F0">import</font> java.awt.Panel;

<font color="#0000F0">public</font> <font color="#0000F0">class</font> Test <font
color="#0000F0">extends</font> java.applet.Applet
{
    AltCheckboxGroup n, s;
    AltCheckbox n1, n2, n3;
    AltCheckbox s1, s2, s3;
    AltCheckbox w1, w2, w3;
    AltButton   e1, e2, e3;

    <font color="#0000F0">public</font> <font color="#0000F0">void</font> init()
    {
        setBackground(Color.lightGray);
        setForeground(Color.black);
        setFont(<font color="#0000F0">new</font> Font(getFont().getName(), Font.PLAIN, 14));
        setLayout(<font color="#0000F0">new</font> GridLayout(5,1));
        Panel p;

        p = <font color="#0000F0">new</font> Panel();
        p.setLayout(<font color="#0000F0">new</font> GridLayout(1, 3));
        n = <font color="#0000F0">new</font> AltCheckboxGroup();
        n1 = <font color="#0000F0">new</font> AltCheckbox(&quot;Radio 1&quot;, n, false);
        p.add(n1);
        n2 = <font color="#0000F0">new</font> AltCheckbox(&quot;Radio 2&quot;, n, false);
        p.add(n2);
        n3 = <font color="#0000F0">new</font> AltCheckbox(&quot;Radio 3&quot;, n, false);
        p.add(n3);
        n.setCurrent(n2);
        add(p);

        p = <font color="#0000F0">new</font> Panel();
        p.setLayout(<font color="#0000F0">new</font> GridLayout(1, 2));
        w1 = <font color="#0000F0">new</font> AltCheckbox(&quot;Check 1&quot;, null, true);
        p.add(w1);
        e1 = <font color="#0000F0">new</font> AltButton(&quot;Button 1&quot;);
        p.add(e1);
        add(p);

        p = <font color="#0000F0">new</font> Panel();
        p.setLayout(<font color="#0000F0">new</font> GridLayout(1, 2));
        w2 = <font color="#0000F0">new</font> AltCheckbox(&quot;Check 2&quot;, null, false);
        p.add(w2);
        e2 = <font color="#0000F0">new</font> AltButton(&quot;Button 2&quot;);
        p.add(e2);
        add(p);

        p = <font color="#0000F0">new</font> Panel();
        p.setLayout(<font color="#0000F0">new</font> GridLayout(1, 2));
        w3 = <font color="#0000F0">new</font> AltCheckbox(&quot;Check 3&quot;, null, true);
        p.add(w3);
        e3 = <font color="#0000F0">new</font> AltButton(&quot;Button 3&quot;);
        p.add(e3);
        add(p);

        p = <font color="#0000F0">new</font> Panel();
        p.setLayout(<font color="#0000F0">new</font> GridLayout(1, 3));
        s = <font color="#0000F0">new</font> AltCheckboxGroup();
        s1 = <font color="#0000F0">new</font> AltCheckbox(&quot;First&quot;, s, false);
        p.add(s1);
        s2 = <font color="#0000F0">new</font> AltCheckbox(&quot;Second&quot;, s, false);
        p.add(s2);
        s3 = <font color="#0000F0">new</font> AltCheckbox(&quot;Third&quot;, s, false);
        p.add(s3);
        s.setCurrent(s2);
        add(p);
    }

    <font color="#0000F0">public</font> <font color="#0000F0">boolean</font> action(Event  evt, Object  what)
    {
        <font color="#0000F0">if</font> (evt.target == e1)
            w1.setState(!w1.getState());
        <font color="#0000F0">else</font> <font color="#0000F0">if</font> (evt.target == e2)
            w2.setState(!w2.getState());
        <font color="#0000F0">else</font> <font color="#0000F0">if</font> (evt.target == e3)
            w3.setState(!w3.getState());
        <font color="#0000F0">else</font> <font color="#0000F0">if</font> (evt.target == s1)
            n.setCurrent(n1);
        <font color="#0000F0">else</font> <font color="#0000F0">if</font> (evt.target == s2)
            n.setCurrent(n2);
        <font color="#0000F0">else</font> <font color="#0000F0">if</font> (evt.target == s3)
            n.setCurrent(n3);
        <font color="#0000F0">else</font>
            <font color="#0000F0">return</font> false;
        <font color="#0000F0">return</font> true;
    }

}
</pre>

<p><a href="#Test_back">Back to story</a></p>

<hr>

<p><br>
The author of this page can be reached at <a
href="mailto:andcio@hotmail.com">andcio@hotmail.com</a>. <br>
<a href="InsideAWT.html#top">Back to Inside AWT</a><br>
<a href="index.html#top">Back to Java Developer's Page</a> (Visit
this page every month) <br>
URL:
http://www.geocities.com/SiliconValley/Horizon/6481/AltUI10.html <br>
Last updated: December 30, 1998</p>

<hr>

<p align="center"><br>
This page hosted by <a href="/"><img src="/pictures/gc_icon.gif"
align="middle" border="0" width="88" height="31"></a> Get your
own <a href="/">Free Homepage</a> </p>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026499322" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001067&t=1026499322" ALT=1 WIDTH=1 HEIGHT=1>

