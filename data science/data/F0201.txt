ID=F0201
URL=http://www.vb-helper.com/err_sample_text.html
SIZE=42147
DATE=09/07/2002
TIME=13:16:36
DATASET=Visual Basic
HTML=<HTML>
<META http-equiv="PICS-Label" content='(PICS-1.1 "http://www.rsac.org/ratingsv01.html" l gen true comment "RSACi North America Server" by "RodStephens@vb-helper.com" for "http://www.vb-helper.com" on "1998.03.17T18:18-0800" r (n 0 s 0 v 0 l 0))'>
<HEAD>
<TITLE>VB Helper: Bug Proofing Visual Basic: Sample Text</TITLE>
<META NAME="Author" CONTENT="Rod Stephens">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META HTTP-EQUIV="Keywords" CONTENT="software engineering, software development, bug proofing, error handling, bugs, bug-proofing">
<META NAME="Keywords" CONTENT="software engineering, software development, bug proofing, error handling, bugs, bug-proofing">
<META NAME="Description" CONTENT="VB Helper: Bug Proofing Visual Basic: Sample Text">
<META NAME="Copyright" CONTENT="Copyright 1997-2001, Rocky Mountain Computer Consulting, Inc.">
<META NAME="Rating" CONTENT="General">
<META NAME="Robots" CONTENT="All">
</HEAD>

<BODY BGCOLOR="#E1F3FF" BACKGROUND="bg_blue.jpg">

  <!-- This table contains the banner, menu column, and content. -->
  <TABLE WIDTH="100%" BORDER="0" CELLSPACING="0" CELLPADDING="0">
    <!-- ****** -->
    <!-- Banner -->
    <!-- ****** -->
    <TR><TD>
      <TABLE WIDTH="100%" BORDER="0" CELLSPACING="0" CELLPADDING="0" ALIGN="Left">
        <TR>
          <TD BACKGROUND="banner_mid.jpg"><IMG SRC="banner_l.jpg" WIDTH="410" HEIGHT="64"></TD>
          <TD BGCOLOR="#E1F3FF"><IMG SRC="banner_r.jpg" WIDTH="32" HEIGHT="64"></TD>
        </TR>
      </TABLE>
    </TD></TR>
    <TR><TD>&nbsp;</TD></TR>

    <!-- Menu column and content -->
    <TR><TD>
      <TABLE WIDTH="100%" BORDER="0" CELLSPACING="2" CELLPADDING="0">
        <!-- *********** -->
        <!-- Menu column -->
        <!-- *********** -->
        <TR>
          <TD ALIGN="Left" VALIGN="Top">
            <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
              <!-- Menu top -->
              <TR>
                <TD><IMG SRC="blue_ul.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_um.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_ur.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <!-- Menu entries -->
              <TR BGCOLOR="#7FCFFF">
                <TD BACKGROUND="blue_l.jpg" WIDTH="16">&nbsp;</TD>
                <TD><CENTER>
                  <A HREF="index.html"><B><FONT SIZE="+1">Home</FONT></B></A><BR>
                  &nbsp;<BR>
                  <A HREF="whats_new.html"><B>What's New</B></A><BR>
                  <A HREF="index_categories.html"><B>Index</B></A><BR>
                  <A HREF="books.html"><B>Books</B></A><BR>
                  <A HREF="links.html"><B>Links</B></A><BR>
                  <A HREF="http://www.topica.com/lists/VBHelperQA/read"><B>Q &amp; A</B></A><BR>
                  <A HREF="newsletter.html"><B>Newsletter</B></A><BR>
                  <A HREF="banners.html"><B>Banners</B></A><BR>
                  &nbsp;<BR>
                  <A HREF="mailto:feedback@vb-helper.com"><B>Feedback</B></A><BR>
                  <A HREF="tip_jar.html"><B>Tip Jar</B></A><BR>
                </CENTER></TD>
                <TD BACKGROUND="blue_r.jpg" WIDTH="16">&nbsp;</TD>
              </TR>

              <!-- Menu bottom -->
              <TR>
                <TD><IMG SRC="blue_ll.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_lm.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="blue_lr.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <TR><TD HEIGHT="20" COLSPAN="3">&nbsp;</TR></TD>
              <!-- Old Menu top -->
              <TR>
                <TD><IMG SRC="magenta_ul.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_t.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_ur.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <!-- Menu entries -->
              <TR BGCOLOR="#E36BFF">
                <TD BACKGROUND="magenta_lside.jpg" WIDTH="16">&nbsp;</TD>
                <TD><CENTER>
                  <B><FONT SIZE="+1">Old Pages</FONT></B><BR>
                  &nbsp;<BR>
                  <A HREF="old_index.htm"><B>Old Index</B></A></BR>
                  <A HREF="sitemap.htm"><B>Site Map</B></A></BR>
                  <A HREF="whatsnew.htm"><B>What's New</B></A></BR>
                  &nbsp;<BR>
                  <A HREF="books.htm"><B>Books</B></A></BR>
                  <A HREF="howto.htm"><B>How To</B></A></BR>
                  <A HREF="tips.htm"><B>Tips &amp; Tricks</B></A></BR>
                  <A HREF="tutorial.htm"><B>Tutorials</B></A></BR>
                  <A HREF="stories.htm"><B>Stories</B></A></BR>
                  <A HREF="perform.htm"><B>Performance</B></A></BR>
                  <A HREF="essays.htm"><B>Essays</B></A></BR>
                  <A HREF="links.htm"><B>Links</B></A></BR>
                  <A HREF="q_and_a.htm"><B>Q &amp; A</B></A></BR>
                  <A HREF="newvb6.htm"><B>New in VB6</B></A></BR>
                  <A HREF="free.htm"><B>Free Stuff</B></A></BR>
                  <A HREF="pictures.htm"><B>Pictures</B></A></BR>
                </CENTER></TD>
                <TD BACKGROUND="magenta_rside.jpg" WIDTH="16">&nbsp;</TD>
              </TR>

              <!-- Old Menu bottom -->
              <TR>
                <TD><IMG SRC="magenta_ll.jpg" WIDTH="16" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_b.jpg" WIDTH="93" HEIGHT="16"></TD>
                <TD><IMG SRC="magenta_lr.jpg" WIDTH="16" HEIGHT="16"></TD>
              </TR>

              <!-- Other stuff in the menu column -->
              <TR><TD HEIGHT="100" COLSPAN="3">&nbsp;</TR></TD>

              <!-- ***************** -->
              <!-- Amazon Recommends -->
              <!-- ***************** -->
              <TR><TD COLSPAN="3" ALIGN="Center">
<!-- -->
                <SCRIPT SRC="http://rcm.amazon.com/e/cm?t=vbhelper&l=rc1&p=2&o=1" TYPE="text/JavaScript"></SCRIPT>
<!-- -->
                <NOSCRIPT>
                  <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="125">
                    <TR><TD>
                      <MAP NAME="boxmap">
                        <AREA SHAPE="RECT" COORDS="18, 263, 105, 274" HREF="http://rcm.amazon.com/e/cm/privacy-policy.html?o=1">
                        <AREA COORDS="0,0,10000,10000" HREF="http://www.amazon.com/exec/obidos/redirect-home/vbhelper">
                      </MAP>
                      <img src="http://rcm-images.amazon.com/images/G/01/associates/amzn_recommends/gnbox125x275.gif" width="125" height="275" border="0" usemap="#boxmap">
                    </TD></TR>
                  </TABLE>
                </NOSCRIPT>
              </TD></TR>
              <TR><TD HEIGHT="100" COLSPAN="3">&nbsp;</TR></TD>

              <!-- ******** -->
              <!-- Partners -->
              <!-- ******** -->
              <TR><TD COLSPAN="3" ALIGN="Center" BACKGROUND="sandpaper.gif"><A HREF="http://www.wiley.com/compbooks"><IMG SRC="wiley_logo.gif" BORDER="0" ALIGN="Center" WIDTH="77" HEIGHT="105"></TD></TR>
              <TR><TD COLSPAN="3"><FONT SIZE="1">&nbsp;</FONT></TD></TR>
              <TR><TD COLSPAN="3" ALIGN="Center"><A HREF="http://www.quepublishing.com"><IMG SRC="que.gif" BORDER="0" ALIGN="Center" WIDTH="121" HEIGHT="36"></A></TD></TR>
              <TR><TD COLSPAN="3"><FONT SIZE="1">&nbsp;</FONT></TD></TR>
              <TR><TD COLSPAN="3" ALIGN="Center"><A HREF="amazon.html"><IMG SRC="amazon_logo.gif" BORDER="0" ALIGN="Center" WIDTH="68" HEIGHT="65"></A></TD></TR>
              <TR><TD COLSPAN="3">&nbsp;</TR></TD>

              <!-- ********** -->
              <!-- More stuff -->
              <!-- ********** -->
            </TABLE>
          </TD>

          <!-- A little space between the menus and content -->
          <TD WIDTH="5">&nbsp;</TD>

          <!-- ******* -->
          <!-- Content -->
          <!-- ******* -->
          <TD WIDTH="100%" ALIGN="Left" VALIGN="Top">
            <TABLE WIDTH="100%" BORDER="0" CELLSPACING="0" CELLPADDING="0">

<TR><TD>
  <!-- Navigation menu -->
  <TABLE WIDTH="100%" BORDER="0" BGCOLOR="#7FE398" CELLSPACING="0" CELLPADDING="0">
    <!-- Top row -->
    <TR>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_ul.jpg" WIDTH="20" HEIGHT="20"></TD>
      <TD WIDTH="100%" BACKGROUND="green_t.jpg">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_ur.jpg" WIDTH="20" HEIGHT="20"></TD>
    </TR>

    <!-- Title row -->
    <TR>
      <TD BGCOLOR="#7FE398" WIDTH="20" BACKGROUND="green_l.jpg">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="100%" ALIGN="Center"><B><FONT SIZE="+1" COLOR="#0000C0">Bug Proofing Visual Basic: Sample Text</FONT></B></TD>
      <TD BGCOLOR="#7FE398" WIDTH="20" BACKGROUND="green_r.jpg">&nbsp;</TD>
    </TR>

    <!-- Menu entries -->
    <TR>
      <TD BGCOLOR="#E1F3FF" BACKGROUND="green_l.jpg" WIDTH="20">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="100%" ALIGN="Center">
        <TABLE WIDTH="100%" BGCOLOR="#7FE398" BORDER="0" CELLPADDING="0" CELLSPACING="0">
          <TR>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err.htm">Overview</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_toc.html">Table of Contents</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_updates.html">Updates</A></TD>
          </TR>
          <TR>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_source.html">Source Code</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_comment_templates.html">Comment Templates</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><B>Sample Text</B></TD>
          </TR>
          <TR>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_discussion.html">Discussion, Q & A</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="http://www.amazon.com/exec/obidos/ASIN/0471323519/vbhelper/">Amazon.com</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="http://www.amazon.co.uk/exec/obidos/ASIN/0471323519/vbhelper0e/">Amazon.co.uk</A></TD>
          </TR>

        </TABLE>
      </TD>
      <TD BGCOLOR="#E1F3FF" BACKGROUND="green_r.jpg" WIDTH="20">&nbsp;</TD>
    </TR>


    <!-- Bottom row -->
    <TR>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_ll.jpg" WIDTH="20" HEIGHT="20"></TD>
      <TD WIDTH="100%" BACKGROUND="green_b.jpg" ALIGN="Center">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_lr.jpg" WIDTH="20" HEIGHT="20"></TD>
    </TR>
  </TABLE>
</TD></TR>

<TR><TD>
&nbsp;
<P>

  <TABLE WIDTH="100%" BORDER="1" CELLPADDING="2" CELLSPACING="2">
  <TR><TD>
    <CENTER><B>Error Handling Fundamentals</B></CENTER>
    <P>
    This article contains roughly half of Chapter 12 of the book <B>Bug Proofing Visual Basic</B>.
    This chapter explains the fundamentals of using error handlers in Visual Basic.
    <P>
    There is a lot more to writing bug proof programs than just using error handlers. This book also
    explains how to reduce the chances of errors occurring in a program, how to detect errors
    when they do occur, and how to recover from unexpected errors.
  </TD></TR>
</TABLE>

<CENTER>
  <H2>Chapter 12</H2>
  <H2>Error Handling Fundamentals</H2>
</CENTER>

<P>
<TABLE WIDTH="100%" BORDER="1" CELLPADDING="2" CELLSPACING="2">
  <TR><TH COLSPAN="3">Sections</TH></TR>
  <TR>
    <TD><A HREF="#UseOnError">Use On Error</A></TD>
    <TD><A HREF="#LeaveErrorHandlers">Leave Error Handlers</A></TD>
    <TD><A HREF="#DefineErrorConstants">Define Error Constants</A></TD>
  </TR>
  <TR>
    <TD><A HREF="#KeepErrorHandlersSeparate">Keep Error Handlers Separate</A></TD>
    <TD><A HREF="#UnderstandErrorHandlerScope">Understand Error Handler Scope</A></TD>
    <TD><A HREF="#DontNestErrorHandlers">Don't Nest Error Handlers</A></TD>
  </TR>
  <TR>
    <TD><A HREF="#ErrTalk">Error Handling Slides</A></TD>
  </TR>
</TABLE>
<P>

This chapter explains the family of On Error statements Visual Basic uses to handle errors. 
It tells how a program installs and removes error handlers, and it explains some of the idiosyncrasies 
of error handling code. After reading this chapter you will be able to write basic error handlers to 
protect your programs from the unexpected.
<P>
<FONT SIZE="-1">
Note that this article does not cover the new <B>Try Catch Finally</B> syntax introduced in VB.NET because the book
was written before VB.NET was released. VB.NET does support the <B>On Error GoTo</B> syntax provided by earlier
versions of Visual Basic, however, and in fact there are times when you will wantj to use it even in VB.NET. For example,
you can use <B>On Error Resume Next</B> to easily protect every line in a subroutine. Providing similar protection
using <B>Try Catch Finally</B> is much more awkward.
</FONT>

<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="UseOnError"><B>Use On Error</B></A></TD></TR>
</TABLE>
<P>

A Visual Basic program uses the On Error statement to register error handling code. This statement can take 
one of three forms:
<UL>
<LI>On Error GoTo 0
<LI>On Error Resume Next
<LI>On Error GoTo line
</UL>

These forms tell Visual Basic what it should do when the program encounters an error. The three forms are 
described in the following sections.

<H4>On Error GoTo 0</H4>
On Error GoTo 0 is relatively straightforward. It simply cancels any currently installed error handler 
assigned by a previous On Error GoTo line or On Error Resume Next. If the program encounters an error
after this statement executes, it crashes.
<P>
On Error GoTo 0 is useful for detecting errors you do not expect. If you leave an error handler active
when it is no longer needed, it may mask bugs you don't expect. It also prevents error handlers installed
at a higher level from catching errors.


<H4>On Error Resume Next</H4>
On Error Resume Next makes the program ignore errors. When it encounters an error, the program continues execution 
after the statement that caused the error.
When a program uses On Error Resume Next, it should check the Err object after every operation that might cause 
an error. If the value Err.Number is nonzero, the operation caused an error and the program can take special action.
The program should check Err.Number immediately after the statement in question. Certain other actions reset 
the Err object and remove the previous error information.
<P>
Many programs use On Error Resume Next when they present a common dialog to the user. The CommonDialog control's 
CancelError property indicates whether the control should raise an error if the user cancels the dialog. The 
following code fragment shows how a program can use CancelError to decide whether to continue an action such 
as loading a file.
<P>

<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2"><FONT COLOR="#008000">' Generate an error if the user cancels.</FONT>
dlgOpenFile.CancelError = True

<FONT COLOR="#008000">' Ignore errors for now.</FONT>
On Error Resume Next

<FONT COLOR="#008000">' Present the dialog.</FONT>
dlgOpenFile.ShowOpen

<FONT COLOR="#008000">' See if there was an error.</FONT>
If Err.Number = cdlCancel Then
    <FONT COLOR="#008000">' The user canceled. Do nothing.</FONT>
    Exit Sub
ElseIf Err.Number &lt;&gt; 0 Then
    <FONT COLOR="#008000">' Unknown error. Take more action.</FONT>
        :
End If

<FONT COLOR="#008000">' Resume normal error handling.</FONT>
On Error GoTo 0</PRE></TT></TD></TR>
</TABLE>
<P>


<H4>On Error GoTo Line</H4>

The On Error GoTo line statement registers a new error handler. If the program encounters an error, 
it passes control to the error handler beginning at the indicated line number or label. The error handler 
can then take appropriate action.
<P>
The following code shows a simple error handler that catches unexpected errors and describes them to the user.
<P>

<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private Sub DoSomething()
    <FONT COLOR="#008000">' Install the error handler.</FONT>
    On Error GoTo UnexpectedError

    <FONT COLOR="#008000">' Do stuff.</FONT>
        :

    <FONT COLOR="#008000">' Do not pass through into the error handler code.</FONT>
    Exit Sub

UnexpectedError:
    <FONT COLOR="#008000">' Describe the error to the user.</FONT>
    MsgBox "Unexpected error" & _
        Str$(Err.Number) & _
        " in subroutine DoSomething." & _
        vbCrLf & _
        Err.Description
    Exit Sub
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>


<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="LeaveErrorHandlers"><B>Leave Error Handlers</B></A></TD></TR>
</TABLE>
<P>


There are several ways a program can leave error handling code and return to normal execution.
<UL>
<LI>Resume
<LI>Resume Next
<LI>Resume &lt;line&gt;
<LI>Exit Sub/Function/Property
<LI>End Sub/Function/Property
<LI>Err.Raise
</UL>

These different methods are described in the following sections.

<H4>Resume</H4>
The Resume statement continues execution by repeating the statement that caused the error. If the statement 
is still incorrect, the program will raise the error again. This may put the program in an infinite loop. 
To avoid an infinite loop, do not use the Resume statement unless something in the error handler should have 
fixed the problem.
<P>
For example, the following code tries to load a file that might be stored on a floppy disk. If it fails, the 
code reports the error and asks the user if it should try again. If the disk is not in the floppy drive, the 
user can insert it and click the Retry button. The program then uses the Resume statement to try to open the 
file again. If the program fails again, it returns to the error handler to give the user another chance to fix 
the problem. The program continues looping from the Open statement to the error handler and back until the user 
fixes the problem or clicks the Cancel button. If the user clicks Cancel, the error handler exits the subroutine 
without opening the file.
<P>

<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private Sub LoadData(ByVal filename As String)
Dim fnum As Integer

    <FONT COLOR="#008000">' Open the file.</FONT>
    fnum = FreeFile
    On Error GoTo OpenError
    Open filename For Input As fnum

    <FONT COLOR="#008000">' Read the data.</FONT>
    On Error GoTo ReadError
        :

    <FONT COLOR="#008000">' Close the file.</FONT>
    On Error GoTo CloseError
    Close fnum
    Exit Sub

OpenError:
    <FONT COLOR="#008000">' We could not open the file. Ask the user</FONT>
    <FONT COLOR="#008000">' if we should retry.</FONT>
    If MsgBox("Error" & _
            Str$(Err.Number) & _
            " opening file " & filename & "." & _
            vbCrLf & Err.Description & vbCrLf & _
            "Check that the disk is properly " & _
            "inserted and click the Retry button.", _
            vbRetryCancel, _
            "Error opening file") = vbRetry _
    Then
        <FONT COLOR="#008000">' Try again at the same statement.</FONT>
        Resume
    End If

    <FONT COLOR="#008000">' Otherwise cancel the file loading.</FONT>
    Exit Sub

ReadError:
    MsgBox "Error" & _
        Str$(Err.Number) & _
        " reading file " & filename & "." & _
        vbCrLf & Err.Description

    <FONT COLOR="#008000">' Close the file.</FONT>
    Close fnum
    Exit Sub

CloseError:
    <FONT COLOR="#008000">' Error closing the file.</FONT>
    MsgBox "Error" & _
        Str$(Err.Number) & _
        " closing file " & filename & "." & _
        vbCrLf & Err.Description
    Exit Sub
End Sub</PRE></TT></TD></TR>
</TABLE>


<H4>Resume Next</H4>

Resume Next makes the program continue execution at the statement after the one that caused the error. This is a useful action if the program and user cannot reasonably correct the error, but the program can continue running without the statement completing. 
<P>
For example, the following code tries to convert a string value into a date using the CDate function. If it fails, the error handler assigns the current date to the start_date variable and uses that as a default value.
<P>

<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private Sub ValidateStartDate(ByVal date_string As String)
Dim start_date As Date

    <FONT COLOR="#008000">' Install the error handler.</FONT>
    On Error GoTo InvalidDate

    <FONT COLOR="#008000">' Convert the string into a date.</FONT>
    start_date = CDate(date_string)

    <FONT COLOR="#008000">' Do something with the date.</FONT>
        :

    <FONT COLOR="#008000">' Do not pass through into the error handler code.</FONT>
    Exit Sub

InvalidDate:
    <FONT COLOR="#008000">' It's an invalid date string. Use today.</FONT>
    start_date = Date
    Resume Next
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>

Note that this is probably not the best way to handle this situation because it silently handles the error instead of making it obvious. If the user entered the invalid value, the program should politely tell the user there is a problem and ask for a new value. If the string was passed to this routine from another part of the program, the program may contain a bug. It should stop during design mode or raise an error in the final compiled version so someone can fix the problem.


<H4>Resume &lt;line&gt;</H4>

A program can specify a line number where the program can resume execution. This is a relatively unstructured
GoTo so it can lead to confusion. I have seen cooked up examples where jumping out of an error handler in an
uncontrolled manner makes a tiny amount of sense, but you can always rewrite the code to avoid this.
At worst, you can always inclue the dangerous code in a subroutine and call it, using other error handling techniques
to protect the code.


<H4>Exit Sub/Function/Property</H4>

If the routine cannot continue with its task, it can use Exit Sub, Exit Function, or Exit Property to exit immediately. The following code shows a new version of the previous routine. If the date string is invalid, this version tells the user and then exits.
<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private Sub ValidateStartDate(ByVal date_string As String)
Dim start_date As Date

    <FONT COLOR="#008000">' Install the error handler.</FONT>
    On Error GoTo InvalidDate

    <FONT COLOR="#008000">' Convert the string into a date.</FONT>
    start_date = CDate(date_string)

    <FONT COLOR="#008000">' Do something with the date.</FONT>
        :

    <FONT COLOR="#008000">' Do not pass through into the error handler code.</FONT>
    Exit Sub

InvalidDate:
    <FONT COLOR="#008000">' It's an invalid date string. Tell the user and leave.</FONT>
    MsgBox "The start date """ & _
        date_string & _
        """ is invalid. Please enter a new one."
    Exit Sub
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>

When a routine exits in this way, the calling routine cannot tell that an error occurred. That means you should use this technique only when the calling routine can properly continue whether this routine succeeded or not. If the caller must know that this routine failed, the code should use the Err.Raise statement described shortly.
<P>

<H4>End Sub/Function/Property</H4>

If the error handler code continues to the routine's End Sub, End Function, or End Property statement, the routine exits just as if it had executed the Exit statement described in the previous section. For example, the end of the previous subroutine could be written:

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">InvalidDate:
    <FONT COLOR="#008000">' It's an invalid date string. Tell the user and leave.</FONT>
    MsgBox "The start date """ & _
        date_string & _
        """ is invalid. Please enter a new one."
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>

Sometimes it can be a little confusing for the error handler to just drop off the end of the routine like this. This version also creates the opportunity for a new bug. A developer who later adds a new error handler to the end of the routine may not notice that the code drops through the end of the routine. If the new error handler is added without a preceding Exit statement, the old error handler will continue into the new one. If the following code encounters an invalid date, it presents the user with two error messages instead of one.

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">InvalidDate:
    <FONT COLOR="#008000">' It's an invalid date string. Tell the user and leave.</FONT>
    MsgBox "The start date """ & _
        date_string & _
        """ is invalid. Please enter a new one."

ReadFileError:
    <FONT COLOR="#008000">' Error reading the data file.</FONT>
    MsgBox "Error reading the data."
        :
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>


To prevent this kind of mistake, do not allow an error handler to continue to the routine's End statement. Use an Exit statement to leave the routine instead.

<H4>Err.Raise</H4>

The Err object provides a Raise method that allows a program to generate errors. It can create new errors or reraise old ones. The syntax for the Raise method is

<TT><PRE>Err.Raise Number, [<I>Source</I>], [<I>Description</I>], [<I>Helpfile</I>], [<I>Helpcontext</I>]</PRE></TT>

<DL>
<DT><I>Number</I>
<DD>The error number. To create a new error code in a class module, add vbObjectError to your number. For example, vbObjectError + 1001.

<DT><I>Source</I>
<DD>The name of the object or application generating the error. For objects, use the format Project.Class. For routines, use the format Project.Routine. For example, MyProgram.LoadData.

<DT><I>Description</I>
<DD>A string describing the error. If you set Number to a standard Visual Basic error code like 9 for subscript out of range, you can omit Description to make Visual Basic use a standard description string.

<DT><I>Helpfile</I>
<DD>The full name of a help file that gives more information on the error.

<DT><I>Helpcontext</I>
<DD>The context ID for this error's topic in the help file.
</DL>

If a routine cannot handle an error itself, it should raise a new error that makes sense within its context. For example, the following routine attempts to read a data file. If the file is not found, the FileOpenError error handler raises the myappErrNoInputFile error. This gives the calling subroutine more information than Visual Basic's initial file not found error. The error Visual Basic generates indicates that some file was not found. The new error explains that an input data file was not found. The Err.Description field even includes the name of the file that was not found.

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2"><FONT COLOR="#008000">' Define application error constants.</FONT>
Private Const myappErrNoInputFile = vbObjectError + 1000
    :
<FONT COLOR="#008000">' Define Visual Basic error constants.</FONT>
Private Const vbErrFileNotFound = 53
    :
Private Sub ReadInputData(ByVal file_name As String)
Dim file_number As Integer

    <FONT COLOR="#008000">' Open the file.</FONT>
    file_number = FreeFile
    On Error GoTo FileOpenError
    Open file_name For Input As file_number

    <FONT COLOR="#008000">' Process the file.</FONT>
    On Error GoTo FileReadError
        :
    <FONT COLOR="#008000">' Process the file here.</FONT>
        :
    <FONT COLOR="#008000">' Close the file.</FONT>
    Close file_number
    Exit Sub

FileOpenError:
    <FONT COLOR="#008000">' There was an error opening the file.</FONT>
    If Err.Number = vbErrFileNotFound Then
        <FONT COLOR="#008000">' It's a file not found error. Convert it</FONT>
        <FONT COLOR="#008000">' to myappErrNoInputFile.</FONT>
        Err.Raise myappErrNoInputFile, _
            "MyApp.ReadInputData", _
            "Could not open input file """ & _
                file_name & """."
    Else
        <FONT COLOR="#008000">' It's some other error. Reraise it so some</FONT>
        <FONT COLOR="#008000">' other routine can catch it.</FONT>
        Err.Raise Err.Number, _
            Err.Source, _
            Err.Description, _
            Err.HelpFile, _
            Err.HelpContext
    End If
    Exit Sub

FileReadError:
    <FONT COLOR="#008000">' There was an error reading the file.</FONT>
        :
    Exit Sub
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>

A program could invoke this subroutine using code similar to the following. The error handler uses the information stored in the Err object by the Raise method to present a message to the user.

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">    On Error GoTo DataInputError
    ReadInputData "c:\mydata.dat"
    Exit Sub

DataInputError:
    <FONT COLOR="#008000">' There was an error loading the data.</FONT>
    MsgBox "Error" & Str$(Err.Number) & _
        " loading the input data." & vbCrLf & _
        Err.Description</PRE></TT></TD></TR>
</TABLE>
<P>

Routines that present messages to users normally format the error information as shown in the previous code. To make that formatting as simple as possible, routines should not format the error description in the Raise statement. For example, the following code formats an error's description.

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Err.Raise myappErrNoInputFile, _
    "MyApp.ReadInputData", _
    "Error" & Str$(myappErrNoInputFile) & _
    " opening the input file."</PRE></TT></TD></TR>
</TABLE>
<P>

When this error occurs, the error handler that catches the error will probably display a message like this one:

<TT><PRE>    Error -2147220504 loading the input data.
    Error -2147220504 opening the input file.</PRE></TT>

Leave the formatting to the routine that actually records the error or presents the message to the user.

<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="DefineErrorConstants"><B>Define Error Constants</B></A></TD></TR>
</TABLE>
<P>

Microsoft says normal error messages lie in the range of 1 to 65,535. They reserve the range 1 to 1000 for use by 
Visual Basic, and some of the values between 31,000 and 31,037 are already used by Visual Basic. You can use other 
values to define your own error codes.
<P>
Microsoft also recommends that you define new error constants for classes by adding a value to the constant
vbObjectError as in the following code:
Private Const myclassErrNoInputFile = vbObjectError + 1000
If you follow these rules, your error codes will not overlap Microsoft's.
<P>
Unfortunately, this does not guarantee that your error code will not collide with other error constants defined 
by other developers or libraries you use.
One method for preventing confusion is to define a base value similar to vbObjectError for your constants. Then 
define error codes in terms of that constant. For example, a ray-tracing package might define error codes as in 
the following code:

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Public Const rayErrorBase = 45300
Public Const rayParametersNotSet = rayErrorBase + 1
Public Const rayInvalidSphereFormat = rayErrorBase + 2
Public Const rayLightAtEye = rayErrorBase + 3
    :</PRE></TT>
</TD></TR>
</TABLE>
<P>

If you later discover that your error codes collide with those of another developer or library, you can quickly redefine all of the error codes by changing the error base value.

<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="KeepErrorHandlersSeparate"><B>Keep Error Handlers Separate</B></A></TD></TR>
</TABLE>
<P>

End every error handler with Resume, Resume Next, Exit Sub/Function/Property, End Sub/Function/Property, or Err.Raise. Never allow the code to fall through from one error handler into another. This can produce some clever code, but it can produce confusion as well.
<P>
For example, the following code falls through its error handlers to close the file it has opened.

<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">Private Sub LoadData(ByVal filename As String)
Dim fnum As Integer

    <FONT COLOR="#008000">' The file is not yet open.</FONT>
    On Error GoTo FileIsClosed

    <FONT COLOR="#008000">' Open the file.</FONT>
    fnum = FreeFile
    Open filename For Input As fnum

    <FONT COLOR="#008000">' The file is now open.</FONT>
    On Error GoTo FileIsOpen

    <FONT COLOR="#008000">' Read the data.</FONT>
        :

    <FONT COLOR="#008000">' Fall into the error handlers to close the file.</FONT>
    On Error Resume Next

FileIsOpen:
    <FONT COLOR="#008000">' Close the file.</FONT>
    Close fnum

FileIsClosed:
    <FONT COLOR="#008000">' Perform any final tasks.</FONT>
        :

    <FONT COLOR="#008000">' Fall through to the End Sub.</FONT>
End Sub</PRE></TT></TD></TR>
</TABLE>
<P>

This code has a number of problems. First, it is confusing. Another developer who tries to add a new error 
handler would be likely to make a mistake and cause a bug. This code also does not signal its errors. Instead, it 
quietly continues as if nothing has gone wrong. It hides bugs that might otherwise be easy to fix.
Prevent confusion and possible bugs by keeping error handlers separate.

<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="UnderstandErrorHandlerScope"><B>Understand Error Handler Scope</B></A></TD></TR>
</TABLE>
<P>

When a program encounters an error, Visual Basic checks to see if an error handler is presently installed in the 
current routine. If so, control passes to that error handler.
<P>
If no error handler is in effect, Visual Basic moves up the call stack to the calling routine to see if an error 
handler is currently installed there. If so, the system resumes execution at that error handler.
<P>
If no error handler is installed in the calling routine either, Visual Basic continues moving up the call stack until 
it finds a routine with an error handler installed. If it runs off the top of the stack before it finds an active 
error handler, the program crashes.
<P>
Execution of all Visual Basic code begins with either an event handler or the Main subroutine. That means you can 
guard against almost all errors if you place error handlers in every event handler and the Main subroutine (if the 
program uses one). Then, no matter where the program encounters an error, control eventually passes up through the 
call stack to the event handler or Main subroutine that started the code. The error handler installed at that point 
can handle the error.

<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="DontNestErrorHandlers"><B>Don't Nest Error Handlers</B></A></TD></TR>
</TABLE>
<P>

Error handler code runs a little differently from other code. No other error handler can be active within another 
error handler's code. In other words, an error handler cannot use On Error GoTo to define an error handler to catch 
its mistakes. If an error handler uses On Error GoTo, the new error handler only takes effect when the error handler 
finishes and returns control to the main code sequence.
<P>
This sort of thing can be very confusing. If Subroutine2 raises an error in the following code, it is not clear 
whether control passes to the Error1 or Error2 error handler. Control passes to Error1 if Subroutine1 ran correctly, 
but it passes to Error2 if Subroutine1 also generated an error.


<P>
<TABLE BACKGROUND="computer_paper.jpg" WIDTH="100%">
  <TR><TD>
<PRE><FONT NAME="Courier New" POINT-SIZE="10" SIZE="2">    On Error GoTo Error1
    Subroutine1
    Subroutine2
    Exit Sub

Error1:
    On Error GoTo Error2
    MsgBox "Error1:" & Str$(Err.Number) & "." & vbCrLf & _
        Err.Description
    Resume Next

Error2:
    MsgBox "Error2:" & Str$(Err.Number) & "." & vbCrLf & _
        Err.Description
    Resume Next</PRE></TT></TD></TR>
</TABLE>
<P>

Avoid this confusion by not using On Error statements within error handler code. Keep all On Error statements 
in the main code sequence.
<HR COLOR="#00C0FF">
This ends approximately the first half of Chapter 12, Error Handling Fundamentals.
<P>

<P>
<TABLE WIDTH="100%" BGCOLOR="#7FE398">
  <TR><TD><A NAME="ErrTalk"><B>Error Handling Slides</B></A></TD></TR>
</TABLE>
<P>

<A HREF="errtalk.zip">Click here</A> to download a zip file containing Powerpoint slides used for a talk 
to the Denver Area Visual Basic User's Group Lab meeting on March 15, 1999.
<P>
  <P>

<P>
&nbsp;
<P>
</TD></TR>

<TR><TD>
  <!-- Navigation menu -->
  <TABLE WIDTH="100%" BORDER="0" BGCOLOR="#7FE398" CELLSPACING="0" CELLPADDING="0">
    <!-- Top row -->
    <TR>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_ul.jpg" WIDTH="20" HEIGHT="20"></TD>
      <TD WIDTH="100%" BACKGROUND="green_t.jpg">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_ur.jpg" WIDTH="20" HEIGHT="20"></TD>
    </TR>

    <!-- Title row -->
    <TR>
      <TD BGCOLOR="#7FE398" WIDTH="20" BACKGROUND="green_l.jpg">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="100%" ALIGN="Center"><B><FONT SIZE="+1" COLOR="#0000C0">Bug Proofing Visual Basic: Sample Text</FONT></B></TD>
      <TD BGCOLOR="#7FE398" WIDTH="20" BACKGROUND="green_r.jpg">&nbsp;</TD>
    </TR>

    <!-- Menu entries -->
    <TR>
      <TD BGCOLOR="#E1F3FF" BACKGROUND="green_l.jpg" WIDTH="20">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="100%" ALIGN="Center">
        <TABLE WIDTH="100%" BGCOLOR="#7FE398" BORDER="0" CELLPADDING="0" CELLSPACING="0">
          <TR>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err.htm">Overview</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_toc.html">Table of Contents</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_updates.html">Updates</A></TD>
          </TR>
          <TR>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_source.html">Source Code</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_comment_templates.html">Comment Templates</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><B>Sample Text</B></TD>
          </TR>
          <TR>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="err_discussion.html">Discussion, Q & A</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="http://www.amazon.com/exec/obidos/ASIN/0471323519/vbhelper/">Amazon.com</A></TD>
            <TD WIDTH="33%" BGCOLOR="#7FE398" ALIGN="Center"><A HREF="http://www.amazon.co.uk/exec/obidos/ASIN/0471323519/vbhelper0e/">Amazon.co.uk</A></TD>
          </TR>

        </TABLE>
      </TD>
      <TD BGCOLOR="#E1F3FF" BACKGROUND="green_r.jpg" WIDTH="20">&nbsp;</TD>
    </TR>


    <!-- Bottom row -->
    <TR>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_ll.jpg" WIDTH="20" HEIGHT="20"></TD>
      <TD WIDTH="100%" BACKGROUND="green_b.jpg" ALIGN="Center">&nbsp;</TD>
      <TD BGCOLOR="#7FE398" WIDTH="20"><IMG SRC="green_lr.jpg" WIDTH="20" HEIGHT="20"></TD>
    </TR>
  </TABLE>
&nbsp;
<P>
</TD></TR>

            </TABLE> <!-- End content table -->
          </TD>
        </TR> <!-- End row containing menu column and content -->
      </TABLE> <!-- End table containing menu column and content -->
    </TD></TR>

    <!-- ****** -->
    <!-- Footer -->
    <!-- ****** -->
    <TR><TD WIDTH="100%">
      <TABLE WIDTH="100%" BORDER="0" BGCOLOR="#87CEFA" CELLSPACING="0" CELLPADDING="0">
        <!-- Top row -->
        <TR>
          <TD BGCOLOR="#E1F3FF" ALIGN="Right" WIDTH="16"><IMG SRC="blue_ul.jpg" WIDTH="16" HEIGHT="16"></TD>
          <TD BACKGROUND="blue_um.jpg" COLSPAN="2" ALIGN="Center"><FONT SIZE="-2">
            Copyright &copy; 1997-2001 Rocky Mountain Computer Consulting, Inc. &nbsp; All rights reserved.
          </FONT></TD>
          <TD BGCOLOR="#E1F3FF"><IMG SRC="blue_ur.jpg" WIDTH="16" HEIGHT="16"></TD>
        </TR>

        <!-- Bottom row -->
        <TR>
          <TD BGCOLOR="#E1F3FF" ALIGN="Right" WIDTH="16"><IMG SRC="blue_ll.jpg" WIDTH="16" HEIGHT="16"></TD>
          <TD BACKGROUND="blue_lm.jpg"><FONT SIZE="-2">
            &nbsp;<SCRIPT LANGUAGE=JavaScript>document.write(document.URL)</SCRIPT></FONT></TD>
          <TD BACKGROUND="blue_lm.jpg" ALIGN="Right"><FONT SIZE="-2">
            Updated <SCRIPT LANGUAGE=JavaScript>document.write(document.lastModified)</SCRIPT> &nbsp;
          </FONT></TD>
          <TD BGCOLOR="#E1F3FF"><IMG SRC="blue_lr.jpg" WIDTH="16" HEIGHT="16"></TD>
        </TR>
      </TABLE>
    </TD></TR>
  </TABLE> <!-- End table containing banner, menu column + content, and footer -->

</BODY>
</HTML>
