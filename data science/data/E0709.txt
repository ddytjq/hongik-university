ID=E0709
URL=http://www.cs.princeton.edu/software/lcc/toc.html
SIZE=5204
DATE=12/07/02
TIME=19:23:40
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<link HREF="mailto:drh@microsoft.com" REV="made" TITLE="David R. Hanson">
<title>Table of Contents: A Retargetable C Compiler</title>
</head>

<body>

<table border="1" width="100%" style="background-color: rgb(255,255,0); font-family: Verdana, sans-serif; font-size: smaller" cellpadding="0" cellspacing="0">
  <tr>
    <td width="100%"><a href="/" title="Princeton CS Home Page">Princeton CS</a> 
    <img src="images/arrow.gif" alt="arrow.gif (116 bytes)" width="13" height="9"> <a href="/software" title="Princeton CS Software">Software</a> 
    <img src="images/arrow.gif" alt="arrow.gif (116 bytes)" width="13" height="9"> <a href="/software/lcc/" title="lcc Home Page">lcc, A
    Retargetable C Compiler</a> 
    <img src="images/arrow.gif" alt="arrow.gif (116 bytes)" width="13" height="9"> Table
    of Contents</td>
  </tr>
</table>

<h1>A Retargetable C Compiler: Design and Implementation</h1>

<h1>Table of Contents</h1>

<dl>
  <dt><b>1. Introduction</b> </dt>
  <dd>Literate Programs. How to Read This Book. Overview. Design. Common Declarations. Syntax
    Specifications. Errors.</dd>
  <dt><b>2. Storage Management</b></dt>
  <dd>Memory Management Interface. Arena Representation. Allocating Space. Deallocating Space.
    Strings. </dd>
  <dt><b>3. Symbol Management</b></dt>
  <dd>Representing Symbols. Representing Symbol Tables. Changing Scope. Finding and Installing
    Identifiers. Labels. Constants. Generated Variables.</dd>
  <dt><b>4. Types</b></dt>
  <dd>Representing Types. Type Management. Type Predicates. Type Constructors. Function Types.
    Structure and Enumeration Types. Type-Checking Functions. Type Mapping.</dd>
  <dt><b>5. Code Generation Interface</b></dt>
  <dd>Type Metrics. Interface Records. Symbols. Types. Dag Operators. Interface Flags.
    Initialization. Definitions. Constants. Functions. Interface Binding. Upcalls.</dd>
  <dt><b>6. Lexical Analysis</b> <a HREF="doc/06.pdf"><i>Download/view this chapter</i></a>
    (PDF, 339KB)</dt>
  <dd>Input. Recognizing Tokens. Recognizing Keywords. Recognizing Identifiers. Recognizing
    Numbers. Recognizing Character Constants and Strings.</dd>
  <dt><b>7. Parsing</b></dt>
  <dd>Languages and Grammars. Ambiguity and Parse Trees. Top-Down Parsing. FIRST and FOLLOW
    Sets. Writing Parsing Functions. Handling Syntax Errors.</dd>
  <dt><b>8. Expressions</b></dt>
  <dd>Representing Expressions. Parsing Expressions. Parsing C Expressions. Assignment
    Expressions. Conditional Expressions. Binary Expressions. Unary and Postfix Expressions.
    Primary Expressions. </dd>
  <dt><b>9. Expression Semantics</b></dt>
  <dd>Conversions. Unary and Postfix Operators. Function Calls. Binary Operators. Assignments.
    Conditionals. Constant Folding.</dd>
  <dt><b>10. Statements</b></dt>
  <dd>Representing Code. Execution Points. Recognizing Statements. If Statements. Labels and
    Gotos. Loops. Switch Statements. Return Statements. Managing Labels and Jumps.</dd>
  <dt><b>11. Declarations</b></dt>
  <dd>Translation Units. Declarations. Declarators. Function Declarators. Structure
    Specifiers. Function Definitions. Compound Statements. Finalization. The Main Program.</dd>
  <dt><b>12. Generating Intermediate Code</b></dt>
  <dd>Eliminating Common Subexpressions. Building Nodes. Flow of Control. Assignments.
    Function Calls. Enforcing Evaluation Order. Driving Code Generation. Eliminating Multiply
    Referenced Nodes.</dd>
  <dt><b>13. Structuring the Code Generator</b></dt>
  <dd>Organization of the Code Generator. Interface Extensions. Upcalls. Node Extensions.
    Symbol Extensions. Frame Layout. Generating Code to Copy Blocks. Initialization.</dd>
  <dt><b>14. Selecting and Emitting Instructions</b></dt>
  <dd>Specifications. Labelling the Tree. Reducing the Tree. Cost Functions. Debugging. The
    Emitter. Register Targeting. Coordinating Instruction Selection. Shared Rules.</dd>
  <dt><b>15. Register Allocation</b></dt>
  <dd>Organization. Tracking the Register State. Allocating Registers. Spilling.</dd>
  <dt><b>16. Generating MIPS R3000 Code</b></dt>
  <dd>Registers. Selecting Instructions. Implementing Functions. Defining Data. Segments.
    Copying Blocks.</dd>
  <dt><b>17. Generating SPARC Code</b></dt>
  <dd>Registers. Selecting Instructions. Implementing Functions. Defining Data. Copying
    Blocks.</dd>
  <dt><b>18. Generating Intel X86 Code</b></dt>
  <dd>Registers. Selecting Instructions. Implementing Functions. Defining Data.</dd>
  <dt><b>19. Retrospective</b></dt>
  <dd>Data Structures. Interface. Syntactic and Semantic Analyses. Code Generation and
    Optimization. Testing and Validation.</dd>
</dl>

<hr>

<address>
  <a HREF="http://www.research.microsoft.com/~cwfraser/">Chris Fraser</a> / <a HREF="mailto:cwfraser@microsoft.com">cwfraser@microsoft.com</a><br>
  <a HREF="http://www.research.microsoft.com/~drh/">David Hanson</a> / <a HREF="mailto:drh@microsoft.com">drh@microsoft.com</a><br>
  $Revision: 1.11 $ $Date: 2001/07/05 23:29:22Z $ 
</address>
</body>
</html>
