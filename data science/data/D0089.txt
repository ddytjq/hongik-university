ID=D0089
URL=http://www.absolutejava.com/java-tidbits/index.html
SIZE=130826
DATE=16/07/02
TIME=14:36:53
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
<title>Absolute Java - Java Tidbits</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
span.unp {color:#00bb00;font-weight:900}
span.bnp {color:red;font-weight:900}
-->
</style>
<link rel="stylesheet" href="../styles.css" type="text/css">
</head>
<body>
<a name="Know-Your-Primitive-Types"></a>
<p class="subtitle" style="margin-top:0px">Know Your Primitive Type</p>
<table cellpadding="4" border="1" class="postSubtitle" width="57%">
  <tr style="background-color:black;color:white">
      <th>Data Type</th>
		<th>Bits</th>
		<th>Minimum Value</th>
      <th>Maximum Value</th>
  </tr>
    <tr align="center" bgcolor="#66ffcc">
      <td><code>byte</code></td>
		<td>8</td>
		   
		<td>&#8209;128==&#8209;2<sup>7</sup><br>
        (<code>Byte.MIN_VALUE</code>)</td>
		<td>127==2<sup>7</sup>&#8209;1<br>
        (<code>Byte.MAX_VALUE</code>)</td></tr>
    <tr align="center" bgcolor="#ccffff">
      <td><code>short</code></td>
		<td>16</td>
		   
		<td>&#8209;32,768==&#8209;2<sup>15</sup><br>
        (<code>Short.MIN_VALUE</code>)</td>
		   
		<td>32,767==2<sup>15</sup>&#8209;1<br>
        (<code>Short.MAX_VALUE</code>)</td></tr>
    <tr align="center" bgcolor="#66ffcc">
      <td><code>char</code></td>
		<td>16</td>
		<td>0<br>
        (<code>Character.MIN_VALUE</code>)</td>
		   
		<td>65,535==2<sup>16</sup>&#8209;1<br>
        (<code>Character.MAX_VALUE</code>)</td></tr>
    <tr align="center" bgcolor="#ccffff">
      <td><code>int</code></td>
		<td>32</td>
		   
		<td>&#8209;2,147,483,648==&#8209;2<sup>31</sup><br>
        (<code>Integer.MIN_VALUE</code>)</td>
		   
		<td>2,147,483,647==2<sup>31</sup>&#8209;1<br>
        (<code>Integer.MAX_VALUE</code>)</td></tr>
    <tr align="center" bgcolor="#66ffcc">
      <td><code>long</code></td>
		<td>64</td>
		   
		<td>&#8209;9,223,372,036,854,775,808==&#8209;2<sup>63</sup><br>
        (<code>Long.MIN_VALUE</code>)</td>
		   
		<td>9,223,372,036,854,775,807==2<sup>63</sup>&#8209;1<br>
        (<code>Long.MAX_VALUE</code>)</td></tr>
    <tr align="center" bgcolor="#ccffff">
      <td><code>float</code></td>
		<td>32</td>
		<td><span style="color:red">1.40129846432481707e&#8209;45*<br>
        (<code>Float.MIN_VALUE</code>)</span></td>
		<td>3.40282346638528860e+38<br>
        (<code>Float.MAX_VALUE</code>)</td></tr>
    <tr align="center" bgcolor="#66ffcc">
      <td><code>double</code></td>
		<td>64</td>
		<td><span style="color:red">4.94065645841246544e&#8209;324*<br>
        (<code>Double.MIN_VALUE</code>)</span></td>
		<td>1.7976931348623157e+308<br>
        (<code>Double.MAX_VALUE</code>)</td></tr>
	<tr>
		<td colspan="4"><div style="color:red;font-weight:bold;padding-left:0.7in;padding-right:0.7in"><div style="text-indent:-1em;padding-left:1em">* For both the
  <code>float</code> and <code>double</code> data types the minimum value shown
  above is the smallest <em>positive</em> value. Of course, both <code>float</code>
  and <code>double</code> support negative numbers as well. The smallest negative
  number that can be represented in a <code>float</code>, for example, is <code>&#8209;Float.MAX_VALUE</code>.
  The largest negative number that can be represented in a <code>float</code>
  is <code>&#8209;Float.MIN_VALUE</code>.</div></div></td></tr>
  </table>

<p class="subtitle">Currency Symbols and Identifiers</p>
<div class="postSubtitle">Identifiers cannot begin with a digit (as defined by the Unicode character set).
Currency symbols are treated as any other alphabetic character for the sake of
naming identifiers (e.g., <code>£347_00</code>, <code>$18$</code>, and <code>¥Price</code>
are acceptable).<br></div>
<p>The following code will print the hex values for all the characters that qualify
  as &quot;currency symbols&quot;:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> CurrencyCharIdentifier <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      <span class='codeKeyword'>for</span><span class='codeSeparator'>(</span><span class='codeKeyword'>char</span> c <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>; c <span class='codeOperatorLiteral'>&lt;=</span> <span class='codeIntegerLiteral'>0xffff</span>; <span class='codeOperatorLiteral'>++</span>c<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;         <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>Character.getType<span class='codeSeparator'>(</span>c<span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>==</span> Character.CURRENCY_SYMBOL<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;            System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Currency symbol: "</span> <span class='codeOperatorLiteral'>+</span> Integer.toHexString<span class='codeSeparator'>(</span>c<span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// CurrencyCharIdentifier</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<p class="subtitle">Reserved Keywords and Literals</p>
<div class="postSubtitle"><code>null</code>, <code>true</code>, and <code>false</code> are <em>reserved
literals</em> (but they are not, strictly speaking, keywords). Although not currently
in use, <code>const</code> and <code>goto</code> are reserved keywords.</div>

<p class="subtitle">Numeric Literals and Their Suffixes</p>
<div class="postSubtitle">When defining numeric literals, the following suffixes have the indicated meanings:</div>
  <table style="margin-top:5px" border="1" cellpadding="2">
    <tr bgcolor="#000000" align="center">
      <th><font color="#FFFFFF">Suffix</font></th><th><font color="#FFFFFF">Meaning</font></th><th><font color="#FFFFFF">Examples</font></th></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td><code>L</code> or <code>l</code></td><td>Long</td><td><code>-13L</code><br>
        <code>0x23EL</code> <span style="font-size:x-small">(specified in hexadecimal)</span><br>
        <code>0371L</code> <span style="font-size:x-small">(specified in octal)</span></td></tr>
    <tr align="center" bgcolor="#CCFFFF">
      <td><code>F</code> or <code>f</code></td><td>Float</td><td><code>0.832f</code><br>
        <code>-23.872e-4F</code><br>
        <code>8F</code></td></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td><code>D</code> or <code>d</code></td><td>Double</td><td><code>0.832d</code><br>
        <code>-23.872e-4D</code><br>
        <code>8D</code></td></tr>
  </table>
<br>
<p></p>
<p>If a floating point literal is specified without using one of the floating
  point suffixes (<code>F</code>, <code>f</code>, <code>D</code>, or <code>d</code>)
  it is by default represented internally as a <code>double</code>.</p>
<p>If an integral literal is specified without an <code>L</code> suffix, and it is not enclosed in single quotes, the literal is considered of type <code>int</code>, <i><b>regardless
  of the value of the literal</b></i>. This means that an integer literal whose value
  is outside the range  of an <code>int</code>  must be
  specified with an <code>L</code> suffix, <i><b>even if it is being assigned
  to a </b></i><b><code>long</code></b><i><b> type</b></i>. For example, the following
  code causes the compiler error shown because the specified integer literal, 9,223,372,036,854,775,807,
  is too large to be specified as an integer literal. It must be specified as
  a long literal, as shown in line 7:<br>
  <br>

  <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
  <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>private</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      <span class='codeComment'>// Too big for an integer literal -- requires L suffix.</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;      <span class='codeKeyword'>long</span> longVal_1 <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>9223372036854775807</span>; <span class='codeComment'>// causes compiler error</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      <span class='codeComment'>// The L suffix makes it a long integer literal.</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;      <span class='codeKeyword'>long</span> longVal_2 <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>9223372036854775807L</span>; <span class='codeComment'>// no compiler error</span></td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>//Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->


<blockquote>
  <pre>
Tester.java:4: integer number too large: 9223372036854775807
      long longVal_1 = 9223372036854775807; // causes compiler error
                       ^
1 error
</pre>
</blockquote>
<p><b><i>Note that there is no means for specifying <code>byte</code> or <code>short</code>
literals</i></b>. Every integral literal is either of type  <code>int</code>, <code>long</code> or <code>char</code>. The
numeric literal for zero may be specified with an optional leading negative sign. Since integers
are represented in two's compliment form, a negative zero (i.e., <code>-0</code>)
is represented internally exactly the same as a positive zero. That representation
is <code>0x00000000</code>. </p>
<p>Floating point types (<code>float</code> and <code>double</code>)
however, <em>do</em> maintain a "sign bit". In other words, the internal representation
of a negative 0.0 will be different from that of a positive 0.0, although for comparison purposes they are considered equal, as the following
  snippet illustrates:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>int</span>     i <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>-</span><span class='codeIntegerLiteral'>0</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>float</span>  f1 <span class='codeOperatorLiteral'>=</span> <span class='codeFloatingPointLiteral'>0.0F</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>float</span>  f2 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>-</span><span class='codeFloatingPointLiteral'>0.0F</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>double</span> d1 <span class='codeOperatorLiteral'>=</span> <span class='codeFloatingPointLiteral'>0.0</span>;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeKeyword'>double</span> d2 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>-</span><span class='codeFloatingPointLiteral'>0.0</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;System.out.println<span class='codeSeparator'>(</span>i <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>" "</span> <span class='codeOperatorLiteral'>+</span> f1 <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>" "</span> <span class='codeOperatorLiteral'>+</span> f2 <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>" "</span> <span class='codeOperatorLiteral'>+</span> d1 <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>" "</span> <span class='codeOperatorLiteral'>+</span> d2<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;<span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>f1 <span class='codeOperatorLiteral'>==</span> f2<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;<span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"NOT EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;<span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>f1 <span class='codeOperatorLiteral'>==</span> d1<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;<span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"NOT EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;<span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>f2 <span class='codeOperatorLiteral'>==</span> d1<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>20</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>21</td><td><pre>&nbsp;<span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>22</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"NOT EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>23</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>24</td><td><pre>&nbsp;<span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>i <span class='codeOperatorLiteral'>==</span> d2<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>25</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>26</td><td><pre>&nbsp;<span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>27</td><td><pre>&nbsp;   System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"NOT EQUAL"</span><span class='codeSeparator'>)</span>;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->




<p>The output from the above code is:</p>
<blockquote>
  <pre>
0  0.0  -0.0  0.0  -0.0
EQUAL
EQUAL
EQUAL
EQUAL
</pre>
</blockquote>
<p class="subtitle">Unicode Escape Sequences<br>
within Comments Can Kill You</p>
<div class="postSubtitle">Unicode literals can be specified using a Unicode "escape sequence" of the
  form, <code>'\uxxxx'</code>, where xxxx are the four hexadecimal digits of the Unicode
  character being represented. The <em><strong>very first</strong></em> step performed
  by the Java compiler is to translate <em><strong>each and every</strong></em>
  Unicode escape sequence (i.e., <code>'\uxxxx'</code>) that appears <em><strong>anywhere</strong></em>
  in your source code to its underlying Unicode character equivalent (<a href="http://java.sun.com/docs/books/jls/" target="_jls">JLS
  2</a>, <a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#95504" target="_jls">&sect;3.2</a>).</div>
<p>Given that the character 'a' is represented in Unicode by the value 0x0061,
  the following four declarations are valid and equivalent:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>ch\u0061r</span> a <span class='codeOperatorLiteral'>=</span> <span class='codeCharacterLiteral'>'a'</span>; <span class='codeComment'>// char a = 'a';</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>char</span> \u0061 <span class='codeOperatorLiteral'>=</span> <span class='codeCharacterLiteral'>'a'</span>; <span class='codeComment'>// char a = 'a';</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>char</span> a <span class='codeOperatorLiteral'>=</span> <span class='codeCharacterLiteral'>'\u0061'</span>; <span class='codeComment'>// char a = 'a';</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>ch\u0061r</span> \u0061 <span class='codeOperatorLiteral'>=</span> <span class='codeCharacterLiteral'>'\u0061'</span>; <span class='codeComment'>// char a = 'a';</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->



<p>The fact that Unicode escape sequences are translated <strong><em>before</em></strong>
  a program is tokenized can cause you problems if you place the "carriage return"
  or "newline" escape sequences (<code>'\u000d'</code> or <code>'\u000a'</code>, respectively) in
  a slash-slash style comment. Let's take a look at some code:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeComment'>// Here's a nice little comment,</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeComment'>// How about this \u000d little sequence?</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeComment'>// This should be interesting!</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> A <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->


<p>The first thing the Java compiler does when it compiles a program is to convert
  it to Unicode. Note that the <em><b><i>entire</i></b></em> program is converted to Unicode, including the comments.
  Part of this conversion process is the translation of Unicode escape sequences
  to their Unicode character equivalents. When the Java compiler sees a <code>\u000d</code>
  or a <code>\u000a</code> (even if it's in a comment) it converts it to a "carriage
  return" or "linefeed", respectively.<br>
  <br>
  When compiling the above program, the following error occurs:</p>
<blockquote>
  <pre>
A.java:3: 'class' or 'interface' expected
// This should be interesting!
 ^
1 error
</pre>
</blockquote>
This error results from having the Unicode sequence, <code>\u000d</code>, in the
slash-slash comment. The escape sequence was translated (to a "carriage return")
<strong><em>before</em></strong> the compiler even started looking for tokens
in the program. Since the <code>\u000d</code> is translated to a "carriage return",
you might have expected the error message to look more like this:
<blockquote>
  <pre>
A.java:3: 'class' or 'interface' expected
 little sequence.
 ^
1 error
</pre>
</blockquote>
<p>At least that is what I expected and I'm not quite sure why the compiler complains
  about the commented line instead. The important point, however, is that embedding
  a Unicode escape sequence of <code>\u000d</code> or <code>\u000a</code> in a
  slash-slash style comment can cause compiler errors. The preferred way to represent
  these two character is with the shorthand Java escape sequences: <code>\r</code>
  for <code>\u000d</code> and <code>\n</code> for <code>\u000a</code> since these forms are not Unicode escape sequence.. The <a href='http://java.sun.com/docs/books/jls/' target="_jls">JLS
  2</a>, <a href='http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#100960' target="_jls">&sect;3.10.4</a>
  discusses this in a bit more detail.</p>
<p>As an aside, note that it's perfectly fine to represent the <code>\u000d</code>
  and <code>\u000a</code> sequences with slash-star (<code>/* ... */</code>) comments
  since these comments span across several lines:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeComment'>/* This is a slash-star</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeComment'>   comment with an embedded \u000d Unicode</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeComment'>   escape sequence but there won't be any</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeComment'>   problems.</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeComment'>*/</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->




<p>Finally, you should note that placing <code>\u000d</code> or <code>\u000a</code>
  in a slash-slash comment can cause worse problems that a simple compiler error.
  Take a look at this code:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> A <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>private</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Hello."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;      <span class='codeComment'>// How about this</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;      <span class='codeComment'>// \u000d</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      <span class='codeComment'>// little sequence.</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Nice to meet you."</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Duke Rules!"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// A</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->



<p>This code will compile just fine. But running this code in a debugger will
  prove frustrating. A debugger uses the "debug information" placed in the class
  file by the Java compiler. This "debug information" tells the debugger which
  line numbers from the source code contain executable code.<br>
  <br>
  Most debuggers will complain about (or ignore) a breakpoint placed on line 7,
  for example. Even though line 7 <strong><em>looks</em></strong> like a perfectly
  normal <code>println()</code> call to you and me, from the compiler's perspective it does
  not contain any executable code. Of course, this is due to the <code>\u000d</code>
  escape sequence on line 5. From the compiler's perspective, line 8 contains what we
  see as line 7 in the source code listing. Similarly, line 10, from the compiler's
  perspective, is the closing brace of the <code>main()</code> method. The compiler
  passes this information on to the debugger by embedding it in the class file.
  The debugger then complains when it sees a breakpoint on line 7 which, from
  the debugger's perspective, does not contain executable code.</p>
<p>If you want to learn more about Unicode check out the <a href="http://www.unicode.org" target="_blank">Unicode
  Consortium</a>.</p>
<p span class="subtitle">Default Values and Default Initialization<a name="Default-Values-and-Initialization"></a></p>
<div class="postSubtitle">Below are the default values for instance and class fields (i.e., variables).
These are the values fields get when a class is loaded (for static fields) or
when an object is created (for non-static fields). The table below shows the
values assigned to fields <em>before</em> any initializers are executed. Of course,
an initializer overwrites the default value. Note that local variables are
<i><b>not</b></i> assigned default values.
Local variables must be assigned values before they can be referenced.</div>
<p>You may want to look at <a href="../test-your-java-knowledge/index.html#object-construction-ii">Question
  10</a> in the <a href="../test-your-java-knowledge/"><em>Test Your Java Knowledge</em></a>
  article to see a clear example of Java's default initialization behavior
  and how it can lead to surprising results&#151;pay attention to the values assigned
  to the <code>Bvar</code> variable in that example and when they're assigned.<br>
	<br>
<table border="1" cellpadding="4">
    <tr bgcolor="#000000" align="center">
      <th><font color="#FFFFFF">Data Type</font></th><th><font color="#FFFFFF">Default Value<br>
        (if no initial value is specified)</font></th></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td><code>byte</code></td><td><code>0</code></td></tr>
    <tr align="center" bgcolor="#CCFFFF">
      <td><code>short</code></td><td><code>0</code></td></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td><code>char</code></td><td><code>'\u0000'</code></td></tr>
    <tr align="center" bgcolor="#CCFFFF">
      <td><code>int</code></td><td><code>0</code></td></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td height="20"><code>long</code></td>
		<td height="20"><code>0L</code></td>
	</tr>
    <tr align="center" bgcolor="#CCFFFF">
      <td><code>float</code></td><td><code>+0.0F</code></td></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td><code>double</code></td><td><code>+0.0D</code></td></tr>
    <tr align="center" bgcolor="#CCFFFF">
      <td><code>boolean</code></td>
		<td><code>false</code></td></tr>
    <tr align="center" bgcolor="#66FFCC">
      <td>Object Reference</td><td><code>null</code></td></tr>

  </table>
<p align="left">Static variables are initialized to their default values (or to the 
  value specified in an initializer) when the class is loaded while instance variables 
  are initialized to their default values (or to the value specified in an initializer) 
  when an instance of the class is created. Local variables are never initialized 
  to default values&#151;you must <i><b>always</b></i> explicitly initialize local 
  variables before referencing them. Local variable initialization can occur in 
  an initializer or an assignment. <br>
  <br>
  Elements of an array are always initialized to their default values (or to the 
  value specified in an initializer)&#151;even if the array is a local variable. 
  In the code below, each of the array's ten elements is initialized to its default 
  value (false, in this case) automatically when the array is created: 
<blockquote><pre>
<span class='codeKeyword'><code>boolean</code></span><code><span class='codeSeparator'>[]</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> <span class='codeKeyword'>boolean</span><span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>10</span><span class='codeSeparator'>]</span>; <span class='codeComment'>// all ten elements are false</span></code>
</pre></blockquote>
<p align="left">
  <p class="subtitle">Modifier Restrictions</p>
<div class="postSubtitle">
	<p>All interfaces and the methods within them are implicitly <code>abstract</code> and may superfluously be declared as such.</p>
	<p>All methods within an interface are implicitly <code>public</code> (as well as <code>abstract</code>) and may superfluosly be declared as such.</p>
	<p>All fields within an interface are implicity <code>public</code> and <code>static</code> and may superfluosly be declared as such.</p>
</div>
<p>Methods declared as <code>abstract</code> (including methods declared in interfaces) cannot
    be declared <code>static</code>, <code>final</code>, <code>synchronized</code>,
    <code>native</code> or <code>strictfp</code>. Methods declared in an interface (which are, of course, abstract methods) will always have <code>public </code>visibility (even if no visibility modifier is specified) while abstract methods in a class (which must be an <code>abstract</code> class if it contains at least one <code>abstract</code> method) may have <code>protected</code> visibility as well. Non-<code>abstract</code> methods in an <code>abstract</code> class may have any visibility.</p>
<p>A constructor cannot be declared <code>abstract</code>, <code>static</code>, <code>final</code>, <code>synchronized</code>, <code>native</code> or <code>strictfp</code>.</p>
<p>See the code below and its embedded comments for a summary of how abstract class, interfaces, and their members may be declared.
  <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
  <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
</p>
<table cellspacing='0' class='codeTable'>
	<tr>
		<td class='lineNumber'><pre>1</td>
		<td><pre>&nbsp;<span class='codeKeyword'>abstract</span> <span class='codeKeyword'>class</span> Abner <span class='codeSeparator'>{</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>2</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>abstract</span> <span class='codeKeyword'>void</span> a<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>3</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>protected</span> <span class='codeKeyword'>abstract</span> <span class='codeKeyword'>void</span> b<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>4</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>abstract</span> <span class='codeKeyword'>void</span> c<span class='codeSeparator'>()</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>5</td>
		<td><pre>&nbsp;   <span class='codeComment'>//private abstract void c(); // private causes compiler error</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>6</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>private int</span> d<span class='codeSeparator'>() {</span> <span class='codeKeyword'>return</span> 10<span class='codeSeparator'>; }</span> <span class='codeComment'>// non-abstract methods can have any visibility</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>7</td>
		<td><pre>&nbsp;<span class='codeSeparator'>} </span><span class='codeComment'>// Abner</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>8</td>
		<td><pre>&nbsp;&nbsp;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>9</td>
		<td><pre>&nbsp;<span class='codeKeyword'>abstract</span> <span class='codeKeyword'>interface</span> Barney <span class='codeSeparator'>{ </span><span class='codeComment'>// abstract is optional</span></td>
	</tr>
<tr>
		<td class='lineNumber'><pre>10</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>int</span> zz <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>16</span><span class='codeSeparator'>; </span><span class='codeComment'>// is considered public and static</span></td>
	</tr>	<tr>
		<td class='lineNumber'><pre>11</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>abstract</span> <span class='codeKeyword'>void</span> a<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>12</td>
		<td><pre>&nbsp;   <span class='codeComment'>//protected abstract void b(); // protected causes compiler error</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>13</td>
		<td><pre>&nbsp;   <span class='codeKeyword'>abstract</span> <span class='codeKeyword'>void</span> c<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>; <span class='codeComment'>// is considered public</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>14</td>
		<td><pre>&nbsp;   <span class='codeComment'>//private abstract void c();   // private causes compiler error</span></td>
	</tr>
	<tr>
		<td class='lineNumber'><pre>15</td>
		<td><pre>&nbsp;<span class='codeSeparator'>} </span><span class='codeComment'>// Barney</span></td>
	</tr>
</table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<p class="subtitle">Blank Final Variable Initialization<a name="Blank-Final-Variable-Initialization"></a></p>
<div class="postSubtitle">A <em>blank final</em> variable is a variable declared as <code>final</code>
    but not assigned a value in its declaration. Like any variable, a blank final
    variable can be either an <em>instance</em> variable or a <em>class</em> (i.e.,
    <code>static</code>) variable. Java requires all blank final instance variables
    to be explicitly initialized before an instance of the class can be created
    (i.e., by the time each constructor completes execution). Similarly, a blank
    final <em>class</em> variable must be explicitly assigned a value as part
    of the class initialization process (<a href="http://java.sun.com/docs/books/jls/" target="_jls">JLS
    2</a>, <a href="http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#35962" target="_jls">&sect;8.3.1.2</a>).<br>
  </div>
<p>The code below will hopefully make clear the fact that blank final variables
  must be assigned a value <em>once and only once</em>. Remember that initializers
  (instance and static) are executed in the order in which they appear in the
  code and that all instance initializers are executed before constructors.
  <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
</p>
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>final</span> <span class='codeKeyword'>int</span> i;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;   <span class='codeKeyword'>final</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>int</span> c;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   Tester<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;   Tester<span class='codeSeparator'>(</span><span class='codeKeyword'>char</span> x<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;      <span class='codeComment'>// This assignment statement would cause a compiler error</span></td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;      <span class='codeComment'>// since i was already initialized in the instance</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;      <span class='codeComment'>// initializer, which executes before any constructor.</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;      <span class='codeComment'>// i = x; // compiler error</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// Tester()</span></td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;   <span class='codeKeyword'>static</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"The first static init"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;      <span class='codeComment'>// This assignment statement would cause a compiler error</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;      <span class='codeComment'>// since c has not yet been initiaized and therefore,</span></td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;      <span class='codeComment'>// cannot be referred to.</span></td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;      <span class='codeComment'>// System.out.println("c=" + c); // compiler error</span></td></tr><tr><td class='lineNumber'><pre>20</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>21</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>22</td><td><pre>&nbsp;   <span class='codeKeyword'>static</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>23</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"The second static init"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>24</td><td><pre>&nbsp;       c <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>1</span>;</td></tr><tr><td class='lineNumber'><pre>25</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>26</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>27</td><td><pre>&nbsp;   <span class='codeKeyword'>static</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>28</td><td><pre>&nbsp;      <span class='codeComment'>// Now, it's safe to refer to c since it's been initialized</span></td></tr><tr><td class='lineNumber'><pre>29</td><td><pre>&nbsp;      <span class='codeComment'>// in the previous static initializer.</span></td></tr><tr><td class='lineNumber'><pre>30</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"The third static init, c="</span> <span class='codeOperatorLiteral'>+</span> c<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>31</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>32</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>33</td><td><pre>&nbsp;   <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>34</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"the first instance initializer"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>35</td><td><pre>&nbsp;      <span class='codeComment'>// Referring to i here would cause a compiler error since</span></td></tr><tr><td class='lineNumber'><pre>36</td><td><pre>&nbsp;      <span class='codeComment'>// i has not been initialized:</span></td></tr><tr><td class='lineNumber'><pre>37</td><td><pre>&nbsp;      <span class='codeComment'>// System.out.println("i=" + i); // compiler error</span></td></tr><tr><td class='lineNumber'><pre>38</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>39</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>40</td><td><pre>&nbsp;   <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>41</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"The second instance initializer"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>42</td><td><pre>&nbsp;      <span class='codeComment'>// This is where i gets initialized. Remember, all instance initializers</span></td></tr><tr><td class='lineNumber'><pre>43</td><td><pre>&nbsp;      <span class='codeComment'>// are executed *before* the first statement in any constructor.</span></td></tr><tr><td class='lineNumber'><pre>44</td><td><pre>&nbsp;      i <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>12</span>;</td></tr><tr><td class='lineNumber'><pre>45</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>46</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>47</td><td><pre>&nbsp;   <span class='codeKeyword'>private</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>48</td><td><pre>&nbsp;      <span class='codeOperatorLiteral'>new</span> Tester<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>49</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>50</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<a name="The-Mighty-plus-Operator"></a> 
<p class="subtitle">The Mighty <code>+</code> Operator</p>
<div class="postSubtitle">If either of the two operands to the <code>+</code> operator is a <code>String</code>,
the <code>+</code> performs a <code>String</code> concatenation, converting one
of its two operands to a <code>String</code>, if necessary. If neither operand
is a <code>String</code> Java will attempt to perform addition on the operands
(which may or may not be possible depending on the types of the operands).
</div>
<p>If one of the operands to the <code>+</code> operator is a reference type whose
  value is <code>null</code>, the <a href="http://java.sun.com/docs/books/jls/" target="_jls">JLS
  2</a> (<a href="http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#40220" target="_jls">&sect;15.18.1.1</a>)
  dictates that the <code>String</code> representation of this reference shall
  be the character string "<code>null</code>". For example, let's say we have
  the following snippet:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;java.util.HashSet hs <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>null</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;String s <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>3</span> <span class='codeOperatorLiteral'>+</span> <span class='codeIntegerLiteral'>9</span> <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"Hello "</span> <span class='codeOperatorLiteral'>+</span> Hs;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->


<p>After this code executes the variable <code>s</code> will contain the string
  "12Hello null".</p>
<p>As an aside, remember that Java always <em>evaluates operands</em> in an expression
  from left to right <i>on a per operator basis</i>, but will <em>perform operations</em> in the order dictated
  by its rules of precedence. Make sure you understand this rule, otherwise you
  may not always get what you expect: see <a href="test-your-java-knowledge.html#question_5">Question
  5</a> and <a href="test-your-java-knowledge.html#question_9">Question 9</a>
  in the <a href="test-your-java-knowledge.html"><em>Test Your Java Knowledge</em></a>
  article.</p>
<p class="subtitle">Default Constructor Visibility</p>
<div class="postSubtitle">As you probably know, if you do not provide any constructors for a class Java
provides a default (i.e., "no-arg") constructor automatically. The visibility
of this default constructor is the same as the visibility for the class (either
public or package).</div>
<p class="subtitle">Learning to Love javac's <code>&#8209;classpath</code>, <code>&#8209;sourcepath</code> and <code>&#8209;d</code> Options</p>
<div class="postSubtitle">There are three command line options for Sun's javac compiler that are a frequent
source of confusion. These options are: <code>&#8209;classpath</code>, <code>&#8209;sourcepath</code>, and <code>&#8209;d</code>. An additional source of confusion is the fact that the <code>&#8209;classpath</code>
option is also used with Sun's Java launcher (Sun's <code>java</code> command) but it's behavior
is slightly different from that of <code>javac</code>.
</div>
<p>Throughout this discussion I'll use a directory diagram similar to the example
  shown below. The entries in <font color="#0000FF">blue</font> represent Java
  source code files while the entries in <font color="#FF0000">red</font> are
  the corresponding class files. All Java source and class files are displayed
  with their fully qualified package names. The example below shows the source
  files for two Java classes: <font color="#0000FF">com.abc.Abner</font> and <font color="#0000FF">com.abc.def.Tester</font>
  along with their respective class files, <span style="color:red">com.abc.Abner.class</span>
  and <span style="color:red">com.abc.def.Tester.class</span>. If you're color&#8209;blind,
  you'll have to focus on the filename extensions (&quot;.java&quot; versus &quot;.class&quot;). If you're  blind, you may not be able to read this article.</p>
<blockquote>
  <pre>
C:\
 |
 +--Projects\
    |
    +--com\
       |
       +--abc\
          |
          +--<span style="color:blue">com.abc.Abner.java</span>
          +--<span style="color:red">com.abc.Abner.class</span>
          |
          +--def\
             |
             +--<span style="color:blue">com.abc.def.Tester.java</span>
             +--<span style="color:red">com.abc.def.Tester.class</span>
</pre>
</blockquote>
<p>Sun's javac compiler provides a  limited form of <i>dependency
  checking</i>. When javac compiles a class, it ensures that any classes <i><b>referenced by</b></i> the class currently being compiled are  always up to date with their
  corresponding source files, so long as it can find the source files. I'll discuss how javac searches for source files later. For example, let's say we have a source file named
  <code>A.java</code> (containing class <code>A</code>) which references another class, <code>B</code>, contained in <code>B.java</code>. Let's say class <code>B</code>, in turn, uses class <code>C</code>, contained in <code>C.java</code>. So, we have the following dependencies between classes, with each class in a separate source  file:</p>
<blockquote>
  <p><code>A</code> (in <code>A.java</code>) <code>---&gt; B</code> (in <code>B.java</code>) <code>---&gt; C</code> (in <code>C.java</code>)</p>
</blockquote>
<p>When
  <code>A.java</code> is compiled, the javac compiler will automatically
  compile <code>B.java</code> if it finds that <code>B.java</code> is newer than <code>B.class</code>. While compiling <code>B.java</code>, javac will then check if <code>C.java</code> is newer than <code>C.class</code> and if it is, <code>C.java</code> will be compiled as well. Earlier, I said that javac provided <i>limited</i> dependency checking? By <i>limited</i> I meant that javac only checks the <i>immediate</i> dependencies of the class it is <i>currently</i> compiling. Using the above example, let's say that <code>C.java</code> has been modified since it was last compiled but <code>B.java</code> has not. When <code>A.java</code> is compiled, javac will check <i><b>only</b></i> if <code>B.java</code> is newer than <code>B.class</code>. If it is not, <code>B.java</code> will not be compiled <i><b>nor will javac bother checking</b></i> if <code>C.class</code> is up to date with <code>C.java</code>. So the dependency checking provided by javac is basically &quot;one&#8209;level&quot; deep.</p>
<p>In the example just presented, you may have noticed that I stressed that each class was contained in a source file bearing the name of the class: class <code>A</code> was in <code>A.java</code>, class <code>B</code> was in <code>B.java</code>, etc. This &quot;class to source file relationship&quot; will not necessarily always be present. Suns's JDK compiler requires that classes marked as <code>public</code> reside in source files bearing the class name. Classes with package visibility, however, may well reside in a source file that has nothing to do with the name of the class. Take a look at the following source code as an example:</p>


<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>package</span> com.test;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>class</span> Mary <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeKeyword'>class</span> Freddy <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->




<p>This source file contains two classes, both of which have package visibility. You cannot make any inferences about the name of this source file since it does not contain a public class. This source file happens to be named, <code>gigi.java</code> (named after <a href="images/gigi.jpg">my dog</a>).  If a given class, say, <code>Tester</code>, refers to either <code>Mary</code> or <code>Freddy</code>, the javac compiler will have no way of checking whether these two classes were up to date with their source code, since it does not know where the source code for the classes resides. If you were to make any changes to the source file above you would have to explicitly re-compile it to make those changes visible; the source file will <i><b>not</b></i> be automatically compiled. When javac checks dependencies, it assumes all referenced classes are in source files bearing the name of the class.</p>
<p>When you run the javac compiler, you specify a list of one or more command line switches and one or more Java source
  code files to be compiled on the javac command line. I'll refer to the classes
  contained in these source code files as the <i><b>primary classes</b></i> since these
  are the classes we are explicitly asking the javac compiler to compile. Keep in mind that there could be more than one class per source file. Note that javac allows you the option of specifying command line switches and source file names using an alternative &quot;arguments files&quot; notation. You can simply place all your command line switches and source file names in one or more files and then specify these files on the javac command line using an &quot;@filename&quot; syntax. You can see examples of this in the javac documentation in the JDK.</p>
<p>Each of primary classes may refer to other Java classes which are <i>not</i>
  specified on the command line. Let's call these classes the <i><b>secondary classes</b></i>.
  The example below shows a Java source code file, <code>Tester.java</code> and
  the javac command line used to compile it. As you can see, the code within <code>Tester</code>
  refers to another class, <code>Abner</code>. In the command line that follows,
  <code>Tester</code> is a <i>primary</i> class (since it is specified in a source file named on the
  command line) and <code>Abner</code> is a <i>secondary</i> class since it is referenced by <code>Tester</code>  but is not in a file specified on the command line:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   Abner a <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Abner<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>; <span class='codeComment'>// Tester depends on Abner</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<blockquote>
  <p><span style="font-weight:bold"><code>C:\Projects></code></span><code>javac
    Tester.java</code></p>
</blockquote>
<p>Incidentally, the <span style="font-weight:bold"><code>C:\Projects></code></span>
  shown above is simply the Windows command prompt. Throughout this article the
  Windows command prompt will be shown in <span style="font-weight:bold">bold
  black</span> text and will always indicate the current default directory.</p>
<p>The Java compiler cannot compile your primary classes until it somehow locates
  all the secondary classes upon which the primary classes depend, and it cannot compile the secondary classes until it locates all the classes upon which they depend. In the example
  above, <code>Tester.java</code> cannot be compiled until the <code>Abner</code>
  class file is located. Here's the first nugget of information to remember from
  this article:</p>
<blockquote>
  <p><i>The Java compiler uses the &quot;classpath setting&quot; (described below)
    in conjunction with the <code>&#8209;sourcepath</code> command line option (if present) to locate
    secondary classes, <b><u>but not primary classes</u></b>.</i> </p>
</blockquote>
<p>The &quot;classpath setting&quot; referred to above can be established either
  by setting the <code>CLASSPATH</code> environment variable or by specifying
  the <code>&#8209;classpath</code> command line option to the javac compiler. In either
  case, the setting consists of a combination of directories, Jar, and ZIP files
  which the Java compiler uses to locate secondary class files (as well as secondary source
  files, if the <code>-sourcepath</code> was not specified). If the <code>CLASSPATH</code>
  environment variable has already been set <i>and</i> you also specify the <code>&#8209;classpath</code>
  option, the <code>&#8209;classpath</code> option takes precedence over the <code>CLASSPATH</code>
  environment variable. If neither the <code>CLASSPATH</code> environment variable
  has been set nor the <code>&#8209;classpath</code> option specified, then the default
  classpath is simply the current directory from which the javac command is issued. To simplify this discussion, I'll assume throughout this article that the <code>CLASSPATH</code> environment variable is not set.</p>
<p>Incidentally, if a <code>CLASSPATH</code> environment variable has already
  been set and you wish to use its value in your <code>&#8209;classpath</code> command line
  option, you can do so by embedding the value of the <code>CLASSPATH</code> environment variable within your
  <code>&#8209;classpath</code> command line option. Here's an example for Windows:</p>
<blockquote>
  <p><span style="font-weight:bold"><code>C:\Projects></code></span><code>javac
    &#8209;classpath ABCDirectory\xyz.zip;%CLASSPATH%;DEFDirectory SomeFile.java</code> </p>
</blockquote>
<p>Before we go on to some examples there are a few other important details you
  must know. This is the second important nugget of information to be remembered
  from this article:</p>
<blockquote>
  <p> <i>When the Java compiler tries to locate a secondary class it actually
    tries mightily to locate <b>both the class file and the corresponding source file</b>:</i>
  <ul>
    <li><i>If it can locate a class file but no source file, it uses the class
      file.</i></li>
	 <li><i>If it can locate the source file but no class file it compiles the
      source file and uses the resulting class file.</i></li>
	 <li><i>If it can locate both a source and class file it checks if the source
      file is newer than the class file. If it is, it compiles the source file
      and uses the resulting class file.</i></li>
  </ul>
</blockquote>
<p>If the <code>-sourcepath</code> option has <b>not</b> been specified, the Java
  compiler will look for source files in the same manner it looks for class files&#151;by using the &quot;classpath setting&quot;,
  as described above. If the <code>-sourcepath</code> option <b>was</b> specified,
  the Java compiler will look for source files<i><b> only in those directories specified
  by the </b></i><b><code>&#8209;sourcepath</code></b><i><b> option</b></i>, ignoring any source code files that might be present
  through the &quot;classpath setting&quot;. </p>
<p>Let's say we have the following source code for <code>Tester.java</code> along
  with the directory structure shown below.</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> com.abc.Abner;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   Abner a <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Abner<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>; <span class='codeComment'>// Tester depends on Abner</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->



<blockquote>
  <pre>
C:\
 |
 +--Projects\
    |
    +--<font color="#0000FF">Tester.java</font>
    |
    +--com\
       |
       +--abc\
          |
          +--<span style="color:red">com.abc.Abner.class</span>
</pre>
</blockquote>
<p>Now let's say we try to compile <code>Tester.java</code> with the following
  command line. Note that the current directory is <code><b>C:\</b></code>:</p>
<blockquote>
  <p><span style="font-weight:bold"><code>C:\></code></span><code>javac &#8209;classpath
    Projects Tester.java</code></p>
</blockquote>
<p>The result of this attempt is the following error:</p>
<blockquote>
  <p><code>error: cannot read: Tester.java<br>
    1 error</code></p>
</blockquote>
<p>Even though <code>Tester.java</code> resides in the <code>Projects</code> directory
  (specified by the <code>&#8209;classpath</code> option) the Java compiler could not
  find it. As I mentioned earlier, this is because the <code>-classpath</code>
  option applies to <i>secondary</i> classes, not primary classes. The locations of all Java source
  files specified on the javac command line must be <i><b>fully specified</b></i> using either
  an absolute or relative path. <i><b>Again, the </b></i><b><code>-classpath</code></b><i><b> and </b></i><b><code>-sourcepath</code></b><i><b>
  options are never used in locating the primary class files or source files.</b></i></p>
<p> There are two ways to fix the previous
  error. First, we could issue the javac command using the <code>Projects</code>
  directory as the default directory, like this:</p>
<span style="font-weight:bold"><code>C:\Projects></code></span><code>javac Tester.java</code>
<p>or we could could fully specify the location of <code>Tester.java</code> like
  this:</p>
<p><span style="font-weight:bold"><code>C:\></code></span><code>javac &#8209;classpath
  Projects Projects\Tester.java</code></p>
<p>Notice that in the first case it was not necessary to specify the <code>&#8209;classpath</code>
  option since javac uses the current directory as the default classpath if the <code>CLASSPATH</code> variable is not set and the -classpath option is not specified. Since <code>com.abc.Abner</code>
  is in the Projects directory, this is perfectly fine. In the second example,
  however, it was necessary to specify the <code>&#8209;classpath</code> option since
  <code>com.abc.Abner</code> is not in the <code>C:\</code> directory.</p>
<p>Here's the third important nugget of information you should remember from this
  article:</p>
<blockquote>
  <p><i>All primary classes (i.e., those classes contained in source files that
    were specified on the javac command line) are <b>always</b> compiled, regardless
    of whether or not their class files are up to date with their source files.</i></p>
</blockquote>
<p>Remember that secondary classes are only compiled if their source files can
  be located <i>and</i> their source files are newer than the corresponding class
  files.</p>
<p>Hang in there, we're almost done. Now, when the Java compiler generates class
  files where does it put them? The answer to this question is the fourth important
  nugget of information:</p>
<blockquote>
  <p><i>If the &#8209;d command line option was specified, the generated class files
    are put in the specified directory; otherwise, they are put in the same directory
    as the source code that was compiled. The directory specified by &#8209;d is <b><u>not</U></b> automatically added to your user class path. </i></p>
</blockquote>
<p>Let's have a look at another example. Let's say we have the following source
  code for <code>Tester.java</code> and the following directory structure:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> com.abc.Abner;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   Abner a <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Abner<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>; <span class='codeComment'>// Tester depends on Abner</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<blockquote>
  <pre>
C:\
 |
 +--Projects\
    |
    +--src\
    |  |
    |  +--<font color="#0000FF">Tester.java</font>
    |  |
    |  +--com\
    |     |
    |     +--abc\
    |        |
    |        +--<font color="#0000FF">com.abc.Abner.java</font>
    |
    +--classes\
</pre>
</blockquote>
<p>We'll examine a couple ways for compiling <code>Tester.java</code> and the
  resulting consequences. When using the following command line,</p>
<blockquote>
  <p><span style="font-weight:bold"><code>C:\></code></span><code>javac -d Projects\classes
    &#8209;sourcepath Projects\src Projects\src\Tester.java</code></p>
</blockquote>
<p>everything compiles fine and we end up with the following directory contents:</p>
<blockquote>
  <pre>
C:\
 |
 +--Projects\
    |
    +--src\
    |  |
    |  +--<font color="#0000FF">Tester.java</font>
    |  |
    |  +--com\
    |     |
    |     +--abc\
    |        |
    |        +--<font color="#0000FF">com.abc.Abner.java</font>
    |
    +--classes\
       |
       +--<font color="#FF0000">Tester.class</font>
       |
       +--com\
          |
          +--abc\
             |
             +--<font color="#FF0000">com.abc.Abner.class</font>
</pre>
</blockquote>
<p>The <code>-d</code> option told javac to place all generated class files in
  the <code>C:\Projects\classes</code> directory. If the <code>&#8209;d</code> option
  had <i><b>not</b></i> been specified all class files would have been put in the same directory
  as their Java source code counterparts.</p>
<p>Now, here's an important point to note: Everytime you re-issue the previous
  javac command, <code>com.abc.Abner.class</code> will be regenerated, even though
  its source code has not changed. Why is this? Remember that when javac considers
  whether or not it should compile a secondary class (like <code>com.abc.Abner</code>)
  it tries to find both an existing class file <i>and</i> a source file. If it
  can find the source file but not the class file, it compiles the source file.
  This is exactly the situation we have here&#151;javac can find the source file
  for com.abc.Abner, but not the class file. Why can't the class file be found? Because
  it's not in the &quot;classpath setting&quot;!</p>
<p>If we want to ensure the classfiles are generated only when the source code
  changes, we could change the javac command to this:</p>
<blockquote>
  <p><span style="font-weight:bold"><code>C:\></code></span><code>javac &#8209;d Projects\classes &#8209;sourcepath Projects\src &#8209;classpath Projects\classes Projects\src\Tester.java</code>
  </p>
</blockquote>
<p>Now let's go back to our earlier source code and directory structure:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> com.abc.Abner;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   Abner a <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Abner<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>; <span class='codeComment'>// Tester depends on Abner</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<blockquote>
  <pre>
C:\
 |
 +--Projects\
    |
    +--src\
    |  |
    |  +--<font color="#0000FF">Tester.java</font>
    |  |
    |  +--com\
    |     |
    |     +--abc\
    |        |
    |        +--<font color="#0000FF">com.abc.Abner.java</font>
    |
    +--classes\
</pre>
</blockquote>
<p>What will be the result of using the following javac command?</p>
<blockquote>
  <p><span style="font-weight:bold"><code>C:\></code></span><code>javac &#8209;classpath
    Projects\classes &#8209;sourcepath Projects\src Projects\src\Tester.java</code></p>
</blockquote>
<p>The resulting directory structure and its contents are shown below:</p>
<blockquote>
  <pre>
C:\
 |
 +--Projects\
    |
    +--src\
    |  |
    |  +--<font color="#0000FF">Tester.java</font>
    |  +--<font color="#FF0000">Tester.class</font>
    |  |
    |  +--com\
    |     |
    |     +--abc\
    |        |
    |        +--<font color="#0000FF">com.abc.Abner.java</font>
    |        +--<font color="#FF0000">com.abc.Abner.class</font>
    |
    +--classes\
</pre>
</blockquote>
<p>Since the <code>&#8209;d</code> option was not specified, all class files were placed
  in the same directories as their Java source code counterparts. Furthermore,
  since the &quot;classpath settings&quot; (i.e., <code>Projects\classes</code>)
  will <i><b>never</b></i> contain any classes, <code>com.abc.Abner.java</code> will be compiled
  everytime the previous javac command is issued, even if <code>Abner.java</code>
  never changes. Once again, remember that javac will check if the source code
  files are newer than the class files before compiling the source files, but it can only do this if it can find both the class and source files. If
  the class files cannot be found in &quot;classpath setting&quot;, javac will
  compile the source files (assuming it can find them) each and every time.</p>
<p>There is one subtle difference in using the <code>&#8209;classpath</code> option
  with javac versus Java As I mentioned, the &#8209;classpath option does not apply
  to the primary classes listed on the javac command line&#151;it only applies
  to the secondary classes. When using the Java command, however, the <code>&#8209;classpath</code>
  option <i><b>does</b></i> apply to the class listed on the command line
  (i.e., the class containing a <code>main()</code> method), as well as to any
  other classes referenced by this class. Note that when using the Java command,
  you can specify the command line option of <code>&#8209;cp</code> as a shorthand for
  <code>&#8209;classpath</code>.</p>
<a name="Field_Initialization_and_Type_Conversionsduringassignment"></a> 
<p class="subtitle">Field Initialization and Type<br>
Conversions During Assignment</p>
<div class="postSubtitle">If not given explicit initial values, all instance and class fields are automatically
initialized to their <a href="#Default-Values-and-Initialization">default values</a>. Local fields, however,
require an explicit initial value. Each element of an allocated array is automatically
initialized to its <a href="#Default-Values-and-Initialization">default value</a>, based on its type, regardless of whether the array is a local,
class or instance field.</div>
<p>When assigning values to a variable, a type conversion may be necessary if the source and target types are different. In the simplest case, a <a href="#Primitive-Widening-Conversions">primitive widening conversion</a> occurs transparently:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>int</span> i <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>100</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>long</span> l <span class='codeOperatorLiteral'>=</span> i;   <span class='codeComment'>// primitive widening conversion: int to long</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>double</span> d <span class='codeOperatorLiteral'>=</span> l; <span class='codeComment'>// primitive widening conversion: long to double</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<p>Java will graciously perform an implicit  primitive <i>narrowing</i> conversion if the source value is an <code>int</code> constant expression whose value is within the range of the target type. Note that this statement implies that the target type is either of type <code>char</code>, <code>byte</code>, or <code>short</code>. Here's an example of implicit narrowing conversions:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>-</span><span class='codeIntegerLiteral'>46</span>;   <span class='codeComment'>// implicit narrowing conversion: int to byte</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>short</span> s <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>12</span>;   <span class='codeComment'>// implicit narrowing conversion: int to short</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>char</span> c <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>62738</span>; <span class='codeComment'>// implicit narrowing conversion: int to char</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

<p>A  primitive narrowing conversion will also be applied if the source is a <code>int</code> variable which was declared as <code>final</code> and was initialized with an <code>int</code> constant. The code example below is based on an example in <a href="http://cseng.aw.com/book/0,3828,0201596148,00.html" target="_blank">A
  Programmer's Guide to Java Certification</a>, p.47:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeComment'>// i is not final, It CANNOT be used as the source for a</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeComment'>// narrowing primitive conversion.</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>int</span> i <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>-</span><span class='codeIntegerLiteral'>20</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeComment'>// j is final *and* assigned an int constant. It can be used</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;<span class='codeComment'>// as the source for a  primitive narrowing conversion.</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;<span class='codeKeyword'>final</span> <span class='codeKeyword'>int</span> j <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>30</span> <span class='codeOperatorLiteral'>/</span> <span class='codeIntegerLiteral'>2</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;<span class='codeComment'>// k is final but NOT assigned an int constant. It CANNOT be</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;<span class='codeComment'>// used as the source for a primitive narrowing  conversion.</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;<span class='codeKeyword'>final</span> <span class='codeKeyword'>int</span> k <span class='codeOperatorLiteral'>=</span> i;</td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span> b <span class='codeOperatorLiteral'>=</span> j;    <span class='codeComment'>// meets criteria for narrowing primitive conversion</span></td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>byte</span><span class='codeSeparator'>)</span>i;   <span class='codeComment'>// cast require: does not meet criteria</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>byte</span><span class='codeSeparator'>)</span>k;   <span class='codeComment'>// cast require: does not meet criteria</span></td></tr></table>
<p>In this article we've discussed two main concepts:</p>
<ol>
  <ol>
	 <li>We discussed the <a href="#Primitive-Widening-Conversions">primitive widening conversion</a> that occurs during assignment from a narrower type to a wider type. </li>
	 <li>We discussed the implicit primitive narrowing conversion which has two flavors:
		<ol>
		  <li type="i">If the source value is an  <code>int</code> constant and is within the range of the target type, Java will automatically convert it (i.e., narrow it) to the target type.</li>
		  <li type="i">If the source value is a variable that was declared <code>final</code> and was assigned a constant value, Java will automatically convert it (i.e., narrow it) to the target type. The assignment of the variable, <code>j</code>, in the code above was an example of this situation.</li>
		</ol>
	 </li>
  </ol>
</ol>
<p>These two concepts were discussed in the context of assignments  to variables. What happens when values are passed as parameters to methods? Do the same assignment behaviors apply? Yes and no. Primitive widening conversions apply to method parameter assignment but implicit narrowing conversions do not. In other words, you will have to use a cast rather than relying on Java's primitive narrowing conversion when passing an <code>int</code> constant as a  method parameter declared as <code>byte</code>, <code>short</code>, or <code>char</code>. Here's an example:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;  <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;     someMethod<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>12</span>, <span class='codeSeparator'>(</span><span class='codeKeyword'>short</span><span class='codeSeparator'>)</span><span class='codeIntegerLiteral'>12</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;   <span class='codeKeyword'>private</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> someMethod<span class='codeSeparator'>(</span><span class='codeKeyword'>double</span> d, <span class='codeKeyword'>short</span> s<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span><span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<p>In this example we had to explicitly convert the second parameter to a <code>short</code>, even though the value of 12 is comfortably within the range of a <code>short</code>. Note that if we were simply assigning the 12 to a <code>short</code> <i><b>variable</b></i> rather than passing it as a <i><b>method parameter</b></i>, the cast would not have been necessary. The first parameter, however, the <code>double</code> parameter, was automatically converted from an <code>int</code> constant to a <code>double</code> by Java's primitive widening conversion&#151;no cast was required.

<a name="Primitive-Widening-Conversions"></a> 
<p class="subtitle">Primitive Widening Conversions</p>
<div class="postSubtitle">A "primitive widening conversion" is a conversion from one primitive datatype
(e.g., <code>int</code>) to <em>wider</em> primitive datatype (e.g., <code>double</code>).
Primitive widening conversions <i>usually</i> never result in a loss of data since the datatype
we are converting <em>to</em> can represent a "wider" range of values than the
type we are converting <em>from</em>.
There is a caveat to this rule. Mughal and Rasmussen describe it best on page 47 of <a href="http://cseng.aw.com/book/0,3828,0201596148,00.html" target="_blank">A
Programmer's Guide to Java Certification</a>:</div>
<blockquote>
  <p>&quot;Integer values widened to floating-point values can result in a loss of <i>precision<i>. </i>Magnitude</i> (i.e., how big a value can be represented) must not be confused with <i>precision</i> (i.e., significant digits in the number). In the example below, the precision of the least significant bits of the <code>long</code> value may be lost when converting to a <code>float</code> value:&quot;</p>
</blockquote>

<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>long</span> bigInteger <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>98765432112345678L</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>float</span> realNo <span class='codeOperatorLiteral'>=</span> bigInteger;  <span class='codeComment'>// Widening but loss of precision</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;System.out.println<span class='codeSeparator'>(</span>bigInteger<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;System.out.println<span class='codeSeparator'>(</span>realNo<span class='codeSeparator'>)</span>;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->



<p>The output from running this code is:</p>
<blockquote><pre>
98765432112345678
9.8765436E16
</pre></blockquote>



<p>So you can see that assigning the <code>long</code> to the <code>float</code> resulted in a loss of significant digits (i.e., precision), even though the assignment is perfectly acceptable according to Java's &quot;primitive widening&quot; rules.</p>
<p>A primitive <em>narrowing</em> conversion is a conversion
  from one datatype (e.g., <code>float</code>) to a narrower datatype (e.g., <code>char</code>).
  Narrowing conversions may result in a loss of data since the datatype we are
  converting <em>to</em> cannot represent the same range of values as the type
  we are converting <em>from</em>. Narrowing conversions often require
  a cast&#151;but not always. See the article, &quot;<a href="#Field_Initialization_and_Type_Conversionsduringassignment">Field Initialization and Type Conversions During Assignment</a>&quot;, for a description of when narrowing conversions are performed implicitly. You may also want to review the article, "<a href="#Know-Your-Primitive-Types">Know
  Your Primitive Types</a>", to review the ranges for the various primitive types.</p>
<p>The figure below (taken from <a href="http://cseng.aw.com/book/0,3828,0201596148,00.html" target="_blank">A
  Programmer's Guide to Java Certification</a>, p.44) shows which Java primitive
  types can be converted to other primitive types through <em>widening</em> conversions.
  Note that widening conversions are transitive. Formally, if the conversion from
  type <em>T<sub>1</sub></em> to type <em>T<sub>2</sub></em> is a widening conversion
  <em>and</em> the conversion from type <em>T<sub>2</sub></em> to type <em>T<sub>3</sub></em>
  is a widening conversion, then the conversion from type <em>T<sub>1</sub></em>
  to type <em>T<sub>3</sub></em> is a widening conversion. Again, <em>widening</em>
  conversions do not require a cast and will not result in loss of data. <i><b>Any conversion
  not implied by the diagram below is a <em>narrowing</em> conversion and therefore
  requires a cast and can result in a loss of data (except as noted in the &quot;<a href="#Field_Initialization_and_Type_Conversionsduringassignment">Field Initialization and Type Conversions During Assignment</a>&quot; article).</b></i> Some examples of <em>widening</em>
  and <em>narrowing</em> conversions are shown in the code below.</p>
<blockquote>
  <pre>
byte ---> short
               \
                \
                 ---> int ---> long ---> float ---> double
                /
               /
          char
</pre>
</blockquote>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span>   b <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>char</span>   c <span class='codeOperatorLiteral'>=</span> <span class='codeCharacterLiteral'>'A'</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>short</span>  s <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>int</span>    i <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeKeyword'>long</span>   l <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0L</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;<span class='codeKeyword'>float</span>  f <span class='codeOperatorLiteral'>=</span> <span class='codeFloatingPointLiteral'>0.0F</span>;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;<span class='codeKeyword'>double</span> d <span class='codeOperatorLiteral'>=</span> <span class='codeFloatingPointLiteral'>0.0</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;f <span class='codeOperatorLiteral'>=</span> l;        <span class='codeComment'>// widening conversion</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;l <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>long</span><span class='codeSeparator'>)</span>f;  <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;d <span class='codeOperatorLiteral'>=</span> b;        <span class='codeComment'>// widening conversion</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>byte</span><span class='codeSeparator'>)</span>s;  <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;s <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>short</span><span class='codeSeparator'>)</span>c; <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;c <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>char</span><span class='codeSeparator'>)</span>s;  <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>byte</span><span class='codeSeparator'>)</span>c;  <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>byte</span><span class='codeSeparator'>)</span>s;  <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;c <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>char</span><span class='codeSeparator'>)</span>b;  <span class='codeComment'>// narrowing conversion, requires cast</span></td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;i <span class='codeOperatorLiteral'>=</span> b;        <span class='codeComment'>// widening conversion</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<a name="Unary-Numeric-Promotion"></a> 
<p class="subtitle">Unary Numeric Promotion</p>
<div class="postSubtitle">Unary numeric promotion (<a href="http://java.sun.com/docs/books/jls/" target="_jls">JLS
2</a>, <a href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#170952" target="_jls">&sect;5.6.1</a>)
states that if the operand of a unary operator is of type b<code>yte</code>, <code>short</code>,
or <code>char</code>, the operand will be <em>promoted</em> to a value of type
<code>int</code> by an implicit <a href="#Primitive-Widening-Conversions">primitive
widening conversion</a>, otherwise it is not converted. For a nice example of
unary numeric promotion (and binary numeric promotion), please see the tidbit,
<a href="#Binary-Numeric-Promotion">Binary Numeric Promotion</a>.</div>
<p>What is meant by a "unary operator"? A unary operator is an operator that takes
  a single operand. The unary numeric promotion rule above applies in the following
  situations:</p>
<ol>
  <li>When an array is <i><b>created</b></i>, unary numeric promotion applies to the "dimension
    expression". For example, in the snippet below, the value in <code>b</code>
    is promoted to an <code>int</code> at line 2:

	 <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
	 <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
	 <table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>40</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>int</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> a <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> <span class='codeKeyword'>int</span><span class='codeSeparator'>[</span>b<span class='codeSeparator'>]</span>; <span class='codeComment'>// b is automatically promoted to an int</span></td></tr></table>
	 <!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

  </li>
  <li>When an array element is <i><b>accessed</b></i>, unary numeric promotion applies to the
    "index expression". For example, in the snippet below the value in <code>b</code>
    is promoted to an <code>int</code> at line 3:

	 <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
	 <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
	 <table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>int</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> a <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>{</span><span class='codeIntegerLiteral'>1</span>, <span class='codeIntegerLiteral'>2</span>, <span class='codeIntegerLiteral'>3</span>, <span class='codeIntegerLiteral'>4</span>, <span class='codeIntegerLiteral'>5</span>, <span class='codeIntegerLiteral'>6</span>, <span class='codeIntegerLiteral'>7</span>, <span class='codeIntegerLiteral'>8</span>, <span class='codeIntegerLiteral'>9</span>, <span class='codeIntegerLiteral'>10</span><span class='codeSeparator'>}</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>4</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;System.out.println<span class='codeSeparator'>(</span>a<span class='codeSeparator'>[</span>b<span class='codeSeparator'>]</span><span class='codeSeparator'>)</span>; <span class='codeComment'>// b is automatically promoted to an int</span></td></tr></table>
	 <!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

  </li>
  <li>When the unary plus (<code>+</code>) or minus (<code>-</code>) operators
    are used, unary numeric promotion applies to the operand. For example, in
    the snippet below, the expression, <code>+b</code>, is an <code>int</code>
    expression, even though <code>b</code> itself is a <code>byte</code>. Consequently,
    when we try to assign <code>+b</code> to <code>b</code>, we get a compiler
    error indicating a "possible loss of precision". That's because we are trying
    to assign an <code>int</code> (the expression <code>+b</code>) to a <code>byte</code>
    (the variable, <code>b</code>):

	 <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
	 <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
	 <table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>40</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>+</span>b; <span class='codeComment'>// COMPILER ERROR: We need to cast +b to a byte</span></td></tr></table>
	 <!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

  </li>
  <li>When the bitwise complement operator (<code>~</code>) is used, unary numeric
    promotion applies to the operand. The next example is almost identical to
    the previous one except that the <code>~</code> operator is used in place
    of the <code>+</code> operator. Once again, attempting to assign an <code>int</code>
    expression (<code>~b</code>) to a <code>byte</code> variable produces a compiler
    error indicating a "possible loss of precision":

	 <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
	 <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
	 <table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>byte</span> b <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>40</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;b <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>~</span>b; <span class='codeComment'>// COMPILER ERROR: We need to cast ~b to a byte</span></td></tr></table>
	 <!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

  </li>
  <li>When a shift operator (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>, or
    <code>&gt;&gt;&gt;</code>) is used, unary numeric promotion is applied to
    each operand <em>separately</em>. The shift operators are somewhat of an aberration
    in that they are binary rather than unary operators yet unary numeric promotion
    is applied to their operands individually.<br>
    <br>
    As an aside, note that the resulting <code>type</code> of a shift operation
    will always be the result of applying unary numeric promotion to the left
    operand -- i.e., it will always be either <code>int</code> or <code>long</code>.
    Why will this be the case? Because <code>byte</code>, <code>short</code>,
    and <code>char</code> are all promoted to <code>int</code> while <code>long</code>
    remains a <code>long</code> and <code>float</code> and <code>double</code>
    cannot participate in shift operations. Below is an example:

	 <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
	 <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
	 <table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>long</span> l <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>-</span><span class='codeIntegerLiteral'>1</span>;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeKeyword'>short</span> s <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>4</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>long</span> result <span class='codeOperatorLiteral'>=</span> l <span class='codeOperatorLiteral'>&lt;&lt;</span> s;  <span class='codeComment'>// s is promoted to int, l remains a long</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;<span class='codeKeyword'>int</span> i <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>int</span><span class='codeSeparator'>)</span><span class='codeSeparator'>(</span>l <span class='codeOperatorLiteral'>&lt;&lt;</span> s<span class='codeSeparator'>)</span>; <span class='codeComment'>// requires a cast since the resulting shift produces a long</span></td></tr></table>
	 <!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->

    At line 3, <code>l</code> remains a <code>long</code>, as per the unary numeric
    promotion rule and <code>s</code> gets promoted to an <code>int</code>. Since
    the resulting type of a shift operation is always the type of the left operand
    after  applying unary numeric promotion, line 4 requires casting the result
    to an <code>int</code>. </li>
</ol>
<a name="Binary-Numeric-Promotion"></a> 
<p class="subtitle">Binary Numeric Promotion</p>
<div class="postSubtitle">Binary numeric promotion (<a href="http://java.sun.com/docs/books/jls/" target="_jls">JLS
2</a>, <a href="http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#170983" target="_jls">&sect;5.6.2</a>)
states that the numeric operands of a binary operator will be converted to the
"widest" of the two operands. If neither operand is at least as wide as type <code>int</code>,
both operands are converted to <code>int</code>. Any conversions that take place
occur as described in <a href="#Primitive-Widening-Conversions">Primitive Widening
Conversions</a>.</div>
<blockquote>
  <p>Binary numeric promotion is performed on the operands of the following operators:</p>
  <ol>
	 <li>The multiplicitive operators: <code>*</code>, <code>/</code>, and <code>%</code>.</li>
	 <li>The addition and subtraction operators for numeric types: <code>+</code>
    and <code>-</code>.</li>
	 <li>The numerical comparison operators: <code>&lt;</code>, <code>&lt;=</code>,
    <code>&gt;</code> and <code>&gt;=</code>.</li>
	 <li>the numerical equality operators: <code>==</code> and <code>!=</code>.</li>
	 <li>The integer bitwise operators: <code>&</code>, <code>^</code> and <code>|</code>.</li>
	 <li>In certain cases (<a href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html" target="_jls">JLS
    2</a>, <a href="http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#290293" target="_jls">&sect;15.25</a>),
    to the second and third operands of the conditional operator: <code>? :</code>.</li>
  </ol>
</blockquote>
Below is an example of how binary numeric promotion and unary numeric promotion
work. This example comes from page 51 of the seminal work, <a href="http://cseng.aw.com/book/0,3828,0201596148,00.html" target="_blank">A
Programmer's Guide to Java Certification</a>. The red bars (<span class="bnp">|</span>)
indicate <em>binary</em> numeric promotion while the green bars (<span class="unp">|</span>)
indicate <em>unary</em> numeric promotion.
<pre>
   ( d  *  i )  +  ( f  *  -b )  -  ( c  /  s )
     |     |         |      |         |     |
     |     |         |      |         |     |
   double int      float   byte      char short
     |     <span class="bnp">|</span>         |      <span class="unp">|</span>         <span class="bnp">|</span>     <span class="bnp">|</span>
     |     <span class="bnp">|</span>         |      <span class="unp">|</span>         <span class="bnp">|</span>     <span class="bnp">|</span>
     |   double      |     int       int   int
     |     |         |      <span class="bnp">|</span>         |     |
     |     |         |      <span class="bnp">|</span>         |     |
     |     |         |    float       |     |
     |     |         |      |         |     |
     |_____|         |______|         |_____|
        |                |               |
        |                |               |
      double           float            int
        |                <span class="bnp">|</span>               <span class="bnp">|</span>
        |                <span class="bnp">|</span>               <span class="bnp">|</span>
        |              double            <span class="bnp">|</span>
        |                |               <span class="bnp">|</span>
        |________________|               <span class="bnp">|</span>
                 |                       <span class="bnp">|</span>
                 |                       <span class="bnp">|</span>
               double                  double
                 |                       |
                 |_______________________|
                             |
                             |
                           double
</pre>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<p class="subtitle">Sophisticated Primitive Types</p>
<div class="postSubtitle">When working with non-primitive types in Java it's easy to get the <code>java.lang.Class</code> object associated with a given class. You could either use the static <code>forName()</code>  method in <code>java.lang.Class</code> or you could use a &quot;class literal&quot;. A class literal is simply the name of the class (or interface or array or primitive type) followed by a &quot;Class&quot; suffix (JLS2, &sect;15.8.2). A class literal is an object of type <code>java.lang.Class</code>. Note that you <i>cannot</i> obtain the <code>java.lang.Class</code> object for a primitive type by calling <code>Class.forName()</code>, although <code>java.lang.Class</code> class has a static, package-private, <code>getPrimitiveClass()</code> method.</div>
<p>When dealing with primitive types (including <code>void</code>), you can obtain the associated <code>java.lang.Class</code> objects by constructing a &quot;class literal&quot; as described above. In addition to class literals, each of Java's primitive wrapper classes has a public member representing the <code>java.lang.Class</code> of its primitive type. You can access this member by simply referring to &lt;<i>wrapper_class</i>&gt;<code>.TYPE</code>. </p>
<p>Here's a little code that describes the various way to obtain/refer to the <code>java.lang.Class</code> objects of primitive types:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      Class i1 <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>int</span>.<span class='codeKeyword'>class</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;      Class i2 <span class='codeOperatorLiteral'>=</span> Integer.TYPE;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;      <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>i1 <span class='codeOperatorLiteral'>==</span> i2<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"They're the same..."</span> <span class='codeOperatorLiteral'>+</span> i1 <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"  "</span> <span class='codeOperatorLiteral'>+</span> i2<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;      Class v1 <span class='codeOperatorLiteral'>=</span> <span class='codeKeyword'>void</span>.<span class='codeKeyword'>class</span>;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;      Class v2 <span class='codeOperatorLiteral'>=</span> Void.TYPE;</td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;      <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>v1 <span class='codeOperatorLiteral'>==</span> v2<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"They're the same..."</span> <span class='codeOperatorLiteral'>+</span> v1 <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"  "</span> <span class='codeOperatorLiteral'>+</span> v2<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->




<p>The output from running this code is:</p>
<blockquote><pre>
They're the same...int  int
They're the same...void  void
</pre></blockquote>
<p class="subtitle">Different Character Encodings Map to Different Bytes</p>
<div class="postSubtitle">When converting a Java <code>String</code> to an external byte representation, you can select which byte-encoding of the <code>String</code> to use. Here's a little program that creates a <code>String</code> of all possible characters (from <code>Character.MIN_VALUE</code> through <code>Character.MAX_VALUE</code>) and then converts the <code>String</code> to various encodings. Judging from the output, you can see that different encodings require a different number of bytes.</div>
<br>
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>import</span> java.io.*;</td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> ByteEncodings <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeKeyword'>throws</span> Exception <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;      String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> encodings <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>{</span><span class='codeStringLiteral'>"US-ASCII"</span>, <span class='codeStringLiteral'>"ISO-8859-1"</span>, <span class='codeStringLiteral'>"UTF-8"</span>, <span class='codeStringLiteral'>"UTF-16BE"</span>, <span class='codeStringLiteral'>"UTF-16LE"</span>, <span class='codeStringLiteral'>"UTF-16"</span><span class='codeSeparator'>}</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;      StringBuffer sb <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> StringBuffer<span class='codeSeparator'>(</span>Character.MAX_VALUE <span class='codeOperatorLiteral'>+</span> <span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;      <span class='codeComment'>// Build up the big String.</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;      <span class='codeKeyword'>for</span><span class='codeSeparator'>(</span><span class='codeKeyword'>int</span> j <span class='codeOperatorLiteral'>=</span> Character.MIN_VALUE; j <span class='codeOperatorLiteral'>&lt;=</span> Character.MAX_VALUE; <span class='codeOperatorLiteral'>++</span>j<span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;         sb.append<span class='codeSeparator'>(</span><span class='codeSeparator'>(</span><span class='codeKeyword'>char</span><span class='codeSeparator'>)</span>j<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;      String s <span class='codeOperatorLiteral'>=</span> sb.toString<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;      <span class='codeComment'>// Convert the big String to all the standard encodings, saving the bytes</span></td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;      <span class='codeComment'>// to a different file for each encoding.</span></td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;      <span class='codeKeyword'>for</span><span class='codeSeparator'>(</span><span class='codeKeyword'>int</span> i <span class='codeOperatorLiteral'>=</span> <span class='codeIntegerLiteral'>0</span>; i <span class='codeOperatorLiteral'>&lt;</span> encodings.length; <span class='codeOperatorLiteral'>++</span>i<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;         FileOutputStream fos <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> FileOutputStream<span class='codeSeparator'>(</span>encodings<span class='codeSeparator'>[</span>i<span class='codeSeparator'>]</span> <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>".bin"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>19</td><td><pre>&nbsp;         <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> b <span class='codeOperatorLiteral'>=</span> s.getBytes<span class='codeSeparator'>(</span>encodings<span class='codeSeparator'>[</span>i<span class='codeSeparator'>]</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>20</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"Encoding: "</span> <span class='codeOperatorLiteral'>+</span> encodings<span class='codeSeparator'>[</span>i<span class='codeSeparator'>]</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>21</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"   String length: "</span> <span class='codeOperatorLiteral'>+</span> s.length<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>22</td><td><pre>&nbsp;         System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"   byte[] length: "</span> <span class='codeOperatorLiteral'>+</span> b.length <span class='codeOperatorLiteral'>+</span> <span class='codeCharacterLiteral'>'\n'</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>23</td><td><pre>&nbsp;         fos.write<span class='codeSeparator'>(</span>b<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>24</td><td><pre>&nbsp;         fos.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>25</td><td><pre>&nbsp;      <span class='codeSeparator'>}</span></td></tr><tr><td class='lineNumber'><pre>26</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>27</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// ByteEncodings</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->


<p>The output from running this program is:</p>
<blockquote>
  <pre>
Encoding: US-ASCII
   String length: 65536
   byte[] length: 65535

Encoding: ISO-8859-1
   String length: 65536
   byte[] length: 65535

Encoding: UTF-8
   String length: 65536
   byte[] length: 190338

Encoding: UTF-16BE
   String length: 65536
   byte[] length: 131072

Encoding: UTF-16LE
   String length: 65536
   byte[] length: 131072

Encoding: UTF-16
   String length: 65536
   byte[] length: 131074
</pre></blockquote>
If you're very observant you may have noticed that the <code>byte[]</code> lengths (65,535) for US-ASCII and ISO-8859-1 are one less than the <code>String</code> length (65,536). Why would this be? Is there some character that's not being converted to a byte properly?
The answer has to do with what's known as a <i>surrogate pair</i> of characters.
You can read more about this in the <a href="http://java.sun.com/j2se/1.4/docs/api/java/io/OutputStreamWriter.html" target="_blank">javadocs for OutputStreamWriter</a>, if you wish.
The issue of a <i>surrogate pair</i> actually applies to all encodings, not just US-ASCII and ISO-8859-1.
<p class="subtitle">Strings can Contain "Null Characters"</p>
<div class="postSubtitle">It is possible for a string to contain &quot;null characters&quot;&#151;i.e., characters whose values are zero. If you create a <code>String</code> object from a <code>byte[]</code> that contains zero bytes, those zero bytes will become part of the <code>String</code>. Take a look at the output from this program:</div>
<br>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>public</span> <span class='codeKeyword'>class</span> Tester <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>public</span> <span class='codeKeyword'>static</span> <span class='codeKeyword'>void</span> main<span class='codeSeparator'>(</span>String<span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> args<span class='codeSeparator'>)</span> <span class='codeKeyword'>throws</span> Exception <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;      String s1 <span class='codeOperatorLiteral'>=</span> <span class='codeStringLiteral'>"Hello"</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;      <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> b1 <span class='codeOperatorLiteral'>=</span> s1.getBytes<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      <span class='codeComment'>// b2 contains all zero bytes.</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;      <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> b2 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> <span class='codeKeyword'>byte</span><span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>2</span> <span class='codeOperatorLiteral'>*</span> b1.length<span class='codeSeparator'>]</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;      <span class='codeComment'>// The right half of b2 is zero bytes.</span></td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;      System.arraycopy<span class='codeSeparator'>(</span>b1, <span class='codeIntegerLiteral'>0</span>, b2, <span class='codeIntegerLiteral'>0</span>, b1.length<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;      String s2 <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> String<span class='codeSeparator'>(</span>b2<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"s2 is: \""</span> <span class='codeOperatorLiteral'>+</span> s2 <span class='codeOperatorLiteral'>+</span> <span class='codeStringLiteral'>"\", with length "</span> <span class='codeOperatorLiteral'>+</span> s2.length<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;      b2 <span class='codeOperatorLiteral'>=</span> s2.getBytes<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;      System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"b2's length is "</span> <span class='codeOperatorLiteral'>+</span> b2.length<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>17</td><td><pre>&nbsp;   <span class='codeSeparator'>}</span> <span class='codeComment'>// main()</span></td></tr><tr><td class='lineNumber'><pre>18</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// Tester</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->


<p>The output from running this program is:</p>
<blockquote>
  <pre>
s2 is: "Hello     ", with length 10
b2's length is 10
</pre></blockquote>
<p>Notice that the <code>byte[]</code>, <code>b2</code>, is twice as large as <code>b1</code>. After line seven executes, <code>b2</code> contains all zero bytes. Line 10 copies <code>b1</code> into the &quot;first half&quot; of <code>b2</code>, leaving the second half of <code>b2</code> with zero bytes. When <code>s2</code> is created on line 12, the zero bytes in <code>b2</code> become part of the <code>s2</code> string. This accounts for the first line of output. When <code>s2</code> is converted to a <code>byte[]</code> on line 15, the zero characters in <code>s2</code> are stored in <code>b2</code>. This accounts for <code>b2</code>'s length as shown in the second line of output.</p>
<p>In summary, &quot;null characters&quot; in a <code>String</code> are treated like any other character and &quot;zero bytes&quot; are treated as any other byte value in terms of conversion to characters.</p>
<p class="subtitle"><code>URLConnection</code> Uses HTTP POST<br>
	to Send Data to HTTP URL</p>
<div class="postSubtitle">When data is written to an HTTP <code>URLConnection</code>, it is written using the HTTP POST method.</div>
	
<p>Here's a small snippet of code that creates a <code>URLConnection</code> and writes some text to it using a parameter named &quot;string&quot;. This code takes a single command line argument (in <code>args[0]</code>) and writes it to the CGI script at http://java.sun.com/cgi-bin/backwards. The URL is a simple Perl script Sun has provided to reverse the text in the &quot;string&quot; paramter. Note that we must first URL-encode the text to be passed to the Perl script (line 3). The code on line 12 is key: it is this code that causes the POST method to be used rather than a GET method.</p>
<p>After the code listing is the full HTTP request sent to the HTTP server.</p>


<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeComment'>// First, we need to "URL-encode" the text to</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;<span class='codeComment'>// be sent via the POST method.</span></td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;String stringToReverse <span class='codeOperatorLiteral'>=</span> URLEncoder.encode<span class='codeSeparator'>(</span>args<span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>0</span><span class='codeSeparator'>]</span>, <span class='codeStringLiteral'>"UTF-8"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;<span class='codeComment'>// This URL is a little Perl script Sun has provided to</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;<span class='codeComment'>// simply reverse the text sent to it in the paramerter named,</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;<span class='codeComment'>// "string".</span></td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;URL url <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> URL<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"http://java.sun.com/cgi-bin/backwards"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;URLConnection connection <span class='codeOperatorLiteral'>=</span> url.openConnection<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>10</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>11</td><td><pre>&nbsp;<span class='codeComment'>// The next statement is what causes the POST method to be used.</span></td></tr><tr><td class='lineNumber'><pre>12</td><td><pre>&nbsp;connection.setDoOutput<span class='codeSeparator'>(</span><span class='codeKeyword'>true</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>13</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>14</td><td><pre>&nbsp;PrintWriter out <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> PrintWriter<span class='codeSeparator'>(</span>connection.getOutputStream<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>15</td><td><pre>&nbsp;out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"string="</span> <span class='codeOperatorLiteral'>+</span> stringToReverse<span class='codeSeparator'>)</span>; <span class='codeComment'>// send the "string"</span></td></tr><tr><td class='lineNumber'><pre>16</td><td><pre>&nbsp;out.close<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>;</td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->





<p>Here's the HTTP request sent to the server (note that each<img src="../images/CRLF.gif" width="24" height="12" align="absmiddle">represents a carriage return/linefeed):</p>

<blockquote>
	<pre>
POST /cgi-bin/backwards HTTP/1.1<img src="../images/CRLF.gif" width="24" height="12 align="absmiddle align="bottom"">
User-Agent: Java1.4.0<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
Host: java.sun.com<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
Connection: keep-alive<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
Content-type: application/x-www-form-urlencoded<img src="../images/CRLF.gif" width="24" height="12" align="bottom">               
Content-length: 46<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
string=This+is+a+line+of+text+to+be+reversed<img src="../images/CRLF.gif" width="24" height="12" align="bottom">
</pre>
</blockquote>

<p class="subtitle">Unique Identifiers, Really</p>
<div class="postSubtitle">
	<p>I once worked on a project where we needed to generate a unique filename for every file that was received via FTP. The silly solution I came up with was to simply append a time/date stamp onto the file's name. This turned out not to be a good solution. I ended up trying to rename files to names that were already in use.</p>
	<p>The Java class libraries provide a very handy class that is guaranteed to generate a unique object always and forever. The class is <code>java.rmi.server.UID</code>. I won't go into details because the javadocs are adequate in explaining it. If you ever find yourself in a position where you need to generate a guaranteed unique identifier, remember this handy little class.</p>
	<p>&nbsp;</p>
</div>

<div align="center">
  <p style="font-size:9pt; font-family:verdana,arial,helvetica; color: black">Copyright &copy; 1999-2002, Tony LaPaso<br>
    All Rights Reserved.</p>
</div>
</body></html>
