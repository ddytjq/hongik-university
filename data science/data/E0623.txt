ID=E0623
URL=http://www.rit.edu/~jpw9607/ooptut/part1.htm
SIZE=22827
DATE=12/07/02
TIME=19:22:48
DATASET=C
HTML=<html><!-- #BeginTemplate "/Templates/main.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>OOP Tutorial Page 1</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../style.css" type="text/css">
<meta name="keywords" content="DJGPP, Allegro, programming, JetFight, Project V2143, C++, tutorials, linklist, MSVC, Microsoft Visual C++, Itana, GNE, Deathworms, MUUDPIC, Java, links, games, libraries, source, code, C, network, multiplayer">
<meta name="description" content="Gillius's Programming.  C/C++ tutorials, games, java, allegro, and libraries.">
</head>
<body bgcolor="#000000" text="#FFFFFF" link="#FFFF00" vlink="#008080" alink="#990099">
<table width="100%" border="0" cellpadding="0" cellspacing="5">
  <tr> 
    <td colspan="2" class="titleBar">Gillius's Programming</td>
  </tr>
  <tr> 
    <td width="130" height="621" valign="top"> 
      <table border="0" cellpadding="3" cellspacing="0" name="NavBar" width="130">
        <tr> 
          <td valign="top" class="leftTitle">Sections</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../index.htm">Home / News</a><br>
            <a href="../tutorial.htm">Tutorials</a><br>
            <a href="../games.htm">Games Corner</a><br>
            <a href="../java/index.htm">Java</a><br>
            <a href="../filesandprog.htm">The Archive</a><br>
            <a href="../links.htm">Links</a> </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="http://boards.eesite.com/board.cgi?boardset=60999">Fourms</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Current Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"> 
            <p><a href="../gne/index.htm">GNE</a> v.49a<br>
              <span class="leftDesc">--Game Networking Engine</span></p>
            <p><a href="../itana/index.htm">Itana</a> v.71a<br>
              <span class="leftDesc">--2D multiplayer space game</span></p>
          </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Complete Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../bgui2/index.htm">BGui2</a> 
            v.2.0.2<br>
            <a href="../deathworms/index.htm">Deathworms</a><br>
            <a href="../muudpic/index.htm">MUUDPIC</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../contact.htm">Contact 
            Gillius</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../resume.htm">Gillius's 
            Resum&eacute;</a></td>
        </tr>
        <tr> 
          <td valign="top">&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td> 
            <form action="http://pub.alxnet.com/poll" METHOD="POST" >
              <input type="hidden" name="id" value="2061268">
              <input type="hidden" name="q" value="submit">
              <table border="1" bgcolor="#AAAAAA" cellpadding="3" cellspacing="0">
                <tr> 
                  <td bgcolor="#202020" align="middle" class="pollTitle"> Location</td>
                </tr>
                <tr> 
                  <td> 
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                      <tr> 
                        <td class="pollQuestion">What part of the world do you 
                          live in?</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="1">
                          North America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="2">
                          South America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="3">
                          Europe</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="4">
                          Africa</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="5">
                          West/North Asia (like Russia)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="6">
                          East/South Asia (like India and Japan)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="7">
                          Australia / Indonesia</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="8">
                          Middle East</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="9">
                          Other</td>
                      </tr>
                      <tr> 
                        <td align="middle">
<input type="submit" value="Vote">
                        </td>
                      </tr>
                      <tr> 
                        <td align="middle"><a href="http://pub.alxnet.com/poll?id=2061268&q=view" class="pollLink" >Current 
                          results</a></td>
                      </tr>
                    </table>
                  </td>
                </tr>
                <tr> 
                  <td align="middle"><a href="http://www.alxnet.com/services/poll/" class="pollLink">Alxnet 
                    Free Web Tools</a></td>
                </tr>
              </table>
            </form>
            <a href="../poll.htm">View old poll results</a></td>
        </tr>
        <tr> 
          <td>&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td valign="middle" align="center" height="64"> 
            <!-- Start of TheCounter.com Code -->
            <script type="text/javascript" language="javascript">
s="na";c="na";j="na";f=""+escape(document.referrer)
</script>
            <script type="text/javascript" language="javascript1.2">
s=screen.width;v=navigator.appName
if (v != "Netscape") {c=screen.colorDepth}
else {c=screen.pixelDepth}
j=navigator.javaEnabled()
</script>
            <script type="text/javascript" language="javascript">
function pr(n) {document.write(n,"\n");}
NS2Ch=0
if (navigator.appName == "Netscape" &&
navigator.appVersion.charAt(0) == "2") {NS2Ch=1}
if (NS2Ch == 0) {
r="&size="+s+"&colors="+c+"&referer="+f+"&java="+j+""
pr("<A HREF=\"http://www.TheCounter.com\" TARGET=\"_top\"><IMG"+
" BORDER=0 SRC=\"http://c2.thecounter.com/id=1557583"+r+"\"><\/A>")}
</script>
            <noscript><a href="http://www.TheCounter.com" target="_top"><img
src="http://c2.thecounter.com/id=1557583" alt="TC" border=0></a> </noscript> 
            <!-- End of TheCounter.com Code -->
            <br>
            since 5/14/01</td>
        </tr>
      </table>
    </td>
    <td valign="top" align="left"><!-- #BeginEditable "content" --> 
      <h1>Chapter I -- Introduction 
        to OOP</h1>
      <h2><a name="Thinking in OOP"></a>Thinking in OOP</h2>
      <p align="left">Moving into OOP is what changes programming 
        from dechipherable code into real, understandable thought that is easy 
        to understand. You have to keep in mind that the computer thinks in specifics. 
        In fact so specific that the only thing the computer truely understands 
        (if understanding is proper terminology) is &quot;electrical signal on.&quot; 
        Perhaps not even &quot;off&quot; as that is simply the absence of an &quot;on,&quot; 
        but that's a matter of philosophy.</p>
      <h2><a name="Layering"></a>Layering</h2>
      <p align="left">You may wonder then, how, from this one simple 
        concept can the computer generate programs as smart as a spell checker 
        and worlds as complex as Quake III. The explanation is <span class="keyTerm">layering</span>. 
        Could you understand how a program could use a sequence of electrical 
        signals to create numbers in binary, a base 2 system? Not too hard (assuming 
        you know binary ;) ). So now the computer is up to the level of counting. 
        From counting you could teach the computer to add a number by seven by 
        telling the computer how to combine the singals (binary add), and then 
        to multiply -- skip a few steps and you have a math wizard. If you've 
        ever taken a physics class you know pretty much anything can be accurately 
        modeled, or at least approximated, through some sort of equation.</p>
      <p align="left">When you have a base command set, you make 
        new commands on those, and so on. The fallback from this is that after 
        every &quot;level,&quot; you lose a little efficently in the process (ever 
        wonder why Windows is so much slower?). The library your compiler provides 
        is mid-way or so in the scheme of things. Just one C++ line, cout &lt;&lt; 
        &quot;Hello World!&quot;; executes hundreds of instructions, perhaps more, 
        by the time it reaches a level of the simplest instructions the CPU understands. 
        And then you make your functions could use cout statement many times... 
        Now you can see where those billions and trillions of calculations a second 
        go!</p>
      <h2><a name="Containership"></a>Containership</h2>
      <p align="left">Now you may wonder how this applies to programming 
        in OOP. Well look at what's on your desk. A computer. Think about what 
        parts make up the computer. You might list a keyboard, CPU case, monitor, 
        mouse, printer, and such, but in essence to the computer you would be 
        wrong. There is much more to it, so let's go deeper. Look at the keyboard. 
        What parts make up the keyboard. A lot. Starting to sound a bit like <a
href="http://www.whatisthematrix.com/">The Matrix</a>? But if you notice there are really a few TYPES of keys. Since all of 
        the letter, number, function, cursor keys, and a few others are the same 
        size, as far a programming is concerned these could be the same object, 
        with a char type variable holding what that key does, and the whole set 
        of keys are in an array, which is an element of the keyboard struct, which 
        is an element of the computer struct. This method of looking at OOP is 
        called <span class="keyTerm">containership</span>.</p>
      <h2><a name="Inheritance"></a>Inheritance</h2>
      <p align="left">Another method of looking at OOP, which is 
        just as valid, is <span class="keyTerm">inheritance</span>. And instead of 
        looking from the big to the small, you look from the generic to the specific. 
        Try to start as generic as common sense dictates. Let's use &quot;vechicle&quot; 
        as an example. What do all vechicles have in common? They all have tires 
        and engines right? Wrong. Helicopters are vechicles and don't have tires 
        and glider planes don't have engines. The comptuer takes everything 100% 
        literally, so you have to be as specific as possible when planning your 
        programming project. All vechicles can move -- that's what makes them 
        vechicles. Now in our &quot;real world,&quot; this matters worth squat 
        since all matter can move but for a computer an object that can move can 
        do something, and anything that happens needs to be coded. To continue, 
        think up more specific groups, like cars, which share tires, engines, 
        and more, and even farther to say four-door and two-door, then to specific 
        models like a Nissan Sentra, which has all of the previous features in 
        common but has unique characteristics such as X horsepower and X size 
        fuel tank.</p>
      <p align="left">The point of doing this is for breaking down 
        many complex objects and tasks into simpler subgroups which can be programmed 
        by themselves and then used in all objects following that one. For example 
        you could program an engine then anything that has an engine in it will 
        use that code when they run their engine.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back to 
        Top</strong></a></p>
      <hr>
      <h1>Chapter II -- The 
        Syntax of OOP</h1>
      <h2><a name="Prototypes"></a>Prototypes</h2>
      <p>Now that you understand the concept it's time to get down 
        to some real programming. The fundemental unit of OOP in C++ is called 
        the <span class="keyTerm">class</span>. A class works virutally identical to 
        the struct in C, except in addition to variables (called <span class="keyTerm">members</span> 
        in OOP), it can also contain functions and subprocedures, which in OOP 
        are called <span class="keyTerm">methods</span>, and resemble the actions of 
        the object. I know you are waiting to dig right into it, so let's look 
        at the declaration syntax, or <span class="keyTerm">prototype</span> of a class. 
        Let's model a simple counting device as an example:</p>
      <pre>class Counter {
public:
  void Count();
  int  ReadDisplay();
private:
  int  CurrentCount;
};</pre>
      <p>Remember to add the semi-colon to the end of the class, 
        just like a struct. Some compilers won't pick up this error directly and 
        will put out some strange results.</p>
      <p>Anything that goes under the &quot;public:&quot; is a 
        member or method which can be accessed freely from a program, exactly 
        as if the class were a struct, whereas anything private cannot be accessed 
        by the program. Here are a few ways to use this class. Notice that classes 
        use the dot operator just like the structs and act just like structs except 
        with functions now:</p>
      <pre>Counter obj;    //declare just like a struct
obj.Count();    //will call the Count in the class, which will make
                // the counter count
int var = obj.ReadDisplay();
                 //&quot;interact&quot; with the counter by getting some
                 // information from it
var = obj.CurrentCount;
                 //you can't do this since CurrentCount is private!</pre>
      <h2><a name="Data Hiding"></a>Data Hiding</h2>
      <p>From first glance you may assume that anything after &quot;public:&quot; 
        is a function and &quot;private:&quot; is a variable, and this is the 
        case most of the time, but not always. Anything may go under either public 
        or private, and either public or private can come first. You may also 
        wonder why you would want to keep information from the program (called 
        <span class="keyTerm">data hiding</span>). The main reason for this is to get 
        the extra variables out of the way. Normally, if a class is programmed 
        correctly, all interaction should be through the methods, rather than 
        through the members. There are many more very important reasons for this 
        (for example changing the way the class works without changing the actions), 
        which will be explained in-depth later, but for now try to keep only the 
        essential parts of the class public.</p>
      <p>Our counter example uses data hiding. The CurrentCount 
        is hidden, and protected, from the programmer making direct adjustments. 
        Instead the counter should Count(), and the user should ReadDisplay() 
        to see how many times the counter has counted.</p>
      <h2><a name="Defining Functions"></a>Defining Functions</h2>
      <p>Now that we know how to declare the functions and use 
        them, we need to write the actual code. Some may wonder why not write 
        the code first then organize it. Well the best way to program is decide 
        what you want and how you will be using it first, then create a &quot;skeleton&quot; 
        code. First thing is to prototype all of the functions that make sense, 
        on the abstract level (for example a person can walk, jump and play), 
        then define functions for those actions. Create empty functions by those 
        names, then fill in the &quot;skeleton.&quot; You'll find that doing it 
        this way is a much cleaner, and more directed, approach, since you write 
        code in small, easy-to-understand, chunks at a time. So let's create our 
        &quot;skeleton.&quot; Take notice of how class methods are defined:</p>
      <pre>void Counter::Count() {
  //This function will increment the CurrentCount
}</pre>
      <pre>int Counter::ReadDisplay() {
  //This function will return the current count and display it
}</pre>
      <p>The <span class="keyTerm">Scope Resolution Operator</span>, 
        the ::, tells the compiler that the function belongs in the MyObject class, 
        and allows the programmer to define this anywhere in the program, just 
        as with normal functions. Now that we have our &quot;skeleton&quot; made, 
        and have decided exactly what the functions should do, it is time to write 
        the code. Notice that variables in the class, even the private ones, are 
        readily accessable. This is because they were declared in the Counter 
        scope, which these functions are part of. A <span class="keyTerm">scope</span> 
        is generally defined as code inside a set of brackets, but also applies 
        to the entire class as a whole as well.</p>
      <pre>void Counter::Count() {
  CurrentCount++;
}</pre>
      <pre>int Counter::ReadDisplay() {
  cout &lt;&lt; &quot;The Counter Reads: &quot; &lt;&lt; CurrentCount;
  return CurrentCount;
}</pre>
      <p>And now our counter is ready to be used any way we want 
        to use it. We could even make an array of counters (Counter Counters[10]) 
        to keep track of multiple counts. Every possible thing you can do to a 
        struct works just the same on a class.</p>
      <h2><a name="Defining Small Functions"></a>Defining Small Functions</h2>
      <p align="left">The method shown above is the most common 
        method used, but if you have small functions that are only one line, or 
        perhaps two very small lines, sometimes they will be defined inline, with 
        the declaration. When a function is inline, the compiler places copies 
        of the code in each area it is executed, to allow for the processor to 
        execute a short jump command, which saves 16 bits of data. This may not 
        sound like a big deal, and you are right, espically in today's computing 
        age. However, for very tightly polling loops which are executed millions 
        of times per second, a simple one-line function is best made inline.</p>
      <p align="left">For all intents and purposes of the level 
        of programming you are at, this is certainly not anything to worry about, 
        until you start programming hardware level procedures, and by the time 
        you get that far you will understand the need of inline. But for now, 
        you should understand how this looks, and it can also come in handy with 
        writing functions like Count() and another version of ReadDisplay() which 
        will be shown:</p>
      <div align="left"> 
        <pre>class Counter {
public:
  void Count() {CurrentCount++;}
  int  ReadDisplay() {return CurrentCount;}
private:
  int  CurrentCount;
};</pre>
      </div>
      <p align="left">That is a fully-functioning counter class. 
        For functions that small, inlining them is encouraged. But for anything 
        more than a simple one liner, it's best to use the traditional method, 
        or you will just make the code harder to read, bigger, and slower in executing.</p>
      <h2><a name="Using the Code"></a>Using the Code</h2>
      <p align="left">The best way to use a new class is to create 
        a source code file for each class (or group of classes), and a header 
        file for each source code file. Include the source in the entire project, 
        and with every other source file that may want to use the class, include 
        its corresponding header file. For example for this class I would create 
        the declaration for the class in a file called &quot;COUNTER.H&quot;, 
        and place the defined functions in a file called &quot;COUNTER.CC&quot; 
        (or &quot;COUNTER.CPP&quot;, depending on the extension your compiler 
        uses).</p>
      <h2><a name="Syntax Quibbles"></a>Syntax Quibbles</h2>
      <p><em>Syntax Quibbles on class: </em>The indenting and order 
        of the public and private keywords shown above is only my personal preferance. 
        A lot of times, private is shown first because programmers are used to 
        declaring varaibles before writing code, rather than vice-versa, and this 
        is okay; however, the user of the class or library must skip past all 
        of the private segment before reaching the public segment, the part they 
        need to see to use the class.</p>
      <p>Also, some programmers will indent the two keywords once 
        and indent the declarations twice. All of these forms of writing the class 
        structure are acceptable. Pick the one that is best for you. Below is 
        a chart showing a few ways to format a class:</p>
      <table border="0" width="100%">
        <tr> 
          <td width="33%">
            <pre>class Counter {
public:
  void Count();
  int  ReadDisplay();
private:
  int  CurrentCount;
};</pre>
          </td>
          <td width="33%">
            <pre>class Counter {
private:
  int  CurrentCount;
public:
  void Count();
  int  ReadDisplay();
};</pre>
          </td>
          <td width="33%">
            <pre>class Counter {
  public:
    void Count();
    int  ReadDisplay();
  private:
    int  CurrentCount;
};</pre>
          </td>
        </tr>
      </table>
      <p align="center"><a href="index.htm#TOC"><strong>Back to 
        Top</strong></a></p>
      <p align="center"><a href="part2.htm"><strong>Proceed to 
        Chapter III - Using OOP</strong></a></p>
      <p>&nbsp;</p>
      <!-- #EndEditable --></td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>

