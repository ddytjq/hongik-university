ID=E0857
URL=http://www.rit.edu/~jpw9607/gne/html/classGNE_1_1Packet.html
SIZE=17037
DATE=12/07/02
TIME=19:25:07
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE::Packet class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE::Packet  Class Reference</h1>The base packet class, used for dealing with all types of packets at a fundamental level. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Packet_8h-source.html">Packet.h</a>&gt;</code>
<p>
<p>Inheritance diagram for GNE::Packet::
<p><center><img src="classGNE_1_1Packet.gif" usemap="#GNE::Packet_map" border="0"></center>
<map name="GNE::Packet_map">
<area href="classGNE_1_1CustomPacket.html" alt="GNE::CustomPacket" shape="rect" coords="0,56,142,80">
<area href="classGNE_1_1ExitPacket.html" alt="GNE::ExitPacket" shape="rect" coords="152,56,294,80">
<area href="classGNE_1_1PingPacket.html" alt="GNE::PingPacket" shape="rect" coords="304,56,446,80">
<area href="classGNE_1_1RateAdjustPacket.html" alt="GNE::RateAdjustPacket" shape="rect" coords="456,56,598,80">
</map>
<a href="classGNE_1_1Packet-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a0">Packet</a> (int id=0)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Constructs a packet with the given ID.</em> <a href="#a0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a1" doxytag="GNE::Packet::~Packet"></a>
virtual&nbsp;</td><td valign=bottom><b>~Packet</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a2" doxytag="GNE::Packet::makeClone"></a>
virtual Packet *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a2">makeClone</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns a newly allocated exact copy of this packet.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a3">getType</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the type of this instance.</em> <a href="#a3">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a4">getSize</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the current size of this packet in bytes.</em> <a href="#a4">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a5">writePacket</a> (<a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;raw) const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Writes the packet to the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a5">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a6">readPacket</a> (<a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;raw)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Reads this packet from the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a6">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>Packet &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#a7">operator=</a> (const Packet &amp;rhs)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Copy operator you can use to help you in creating your own.</em> <a href="#a7">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>Packet *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#d0">create</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns a new instance of this class.</em> <a href="#d0">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="p0" doxytag="GNE::Packet::ID"></a>
const int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1Packet.html#p0">ID</a> = 0</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The ID for this type of packet.</em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The base packet class, used for dealing with all types of packets at a fundamental level.
<p>
All types of packets must inherit from this class to be recognized by <a class="el" href="namespaceGNE.html">GNE</a>. <a class="el" href="namespaceGNE.html">GNE</a> already implmenets some types of packets.
<p>
When you create a new packet you MUST define your own versions of all virtual functions or the program will fail.
<p>
See the example expacket on how to properly derive from a <a class="el" href="classGNE_1_1Packet.html">Packet</a> class, or look at the code for the other <a class="el" href="namespaceGNE.html">GNE</a> packets. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a name="a0" doxytag="GNE::Packet::Packet"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> GNE::Packet::Packet </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>id</em> = 0          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Constructs a packet with the given ID.
<p>
If you pass no ID, the ID for an empty packet is assumed. Normally sending blank packets are not useful, however. If you are wanting to use a blank packet for some purpose such as a end-of-data marker or for sending some message that requires no data, it is suggested that you simply derive a class from <a class="el" href="classGNE_1_1Packet.html">Packet</a> that adds no data, but has a unique ID so it can be "recognized" easier. <dl compact><dt><b>
Parameters: </b><dd>
<table border=0 cellspacing=2 cellpadding=0>
<tr><td valign=top><em>id</em>&nbsp;</td><td>
a number from <a class="el" href="namespaceGNE_1_1PacketParser.html#a2">PacketParser::MIN_USER_ID</a> to 255. <a class="el" href="namespaceGNE.html">GNE</a> packet id's are from 0 to MIN_USER_ID-1, inclusive. </td></tr>
</table>
</dl>    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a name="d0" doxytag="GNE::Packet::create"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> Packet * GNE::Packet::create </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns a new instance of this class.
<p>
This is used by the <a class="el" href="namespaceGNE_1_1PacketParser.html#a6">PacketParser::registerPacket</a> function as a callback to make new packets to parse the data into. If you derive a new packet type, you'll probably want to register it, so you should create a create function of your own. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1CustomPacket.html#d1">GNE::CustomPacket</a>, <a class="el" href="classGNE_1_1ExitPacket.html#d0">GNE::ExitPacket</a>, <a class="el" href="classGNE_1_1PingPacket.html#d2">GNE::PingPacket</a>, and <a class="el" href="classGNE_1_1RateAdjustPacket.html#d0">GNE::RateAdjustPacket</a>.    </td>
  </tr>
</table>
<a name="a4" doxytag="GNE::Packet::getSize"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::Packet::getSize </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the current size of this packet in bytes.
<p>
When overloading this function, call getSize on the parent class then add the sizes of your additional variables. If the size cannot be determined, then getSize should return a value &lt;= <a class="el" href="classGNE_1_1RawPacket.html#p0">RawPacket::RAW_PACKET_LEN</a> but &gt;= its possible size -- so in other words if the size cannot be determined, it should return the largest possible size that given packet could be. This is discouraged as much as possible since <a class="el" href="namespaceGNE.html">GNE</a> allocates packets in the data stream based on this value, and large values will hinder performance. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1CustomPacket.html#a5">GNE::CustomPacket</a>, <a class="el" href="classGNE_1_1ExitPacket.html#a3">GNE::ExitPacket</a>, <a class="el" href="classGNE_1_1PingPacket.html#a6">GNE::PingPacket</a>, and <a class="el" href="classGNE_1_1RateAdjustPacket.html#a3">GNE::RateAdjustPacket</a>.    </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::Packet::getType"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::Packet::getType </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the type of this instance.
<p>
This allows you to identify the type of packet you have when you only have a <a class="el" href="classGNE_1_1Packet.html">Packet</a>*.     </td>
  </tr>
</table>
<a name="a7" doxytag="GNE::Packet::operator="></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> Packet &amp; GNE::Packet::operator= </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const Packet &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>rhs</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy operator you can use to help you in creating your own.
<p>
There is a debug assert in this function that checks to make sure the types match. Call this operator first from your copy operator. Many <a class="el" href="namespaceGNE.html">GNE</a> packets may not support this operation, so check the documentation first -- if no operator= exists, then assume you cannot copy packets this way, unless the documentation says otherwise.<br>
 If you can't use operator= on a packet, you can use makeClone to achieve a nearly equivalent result.     </td>
  </tr>
</table>
<a name="a6" doxytag="GNE::Packet::readPacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::Packet::readPacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>raw</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reads this packet from the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
When overloading this function, call readPacket on the parent class then read your own variables.
<p>
Note that the parser has already read the packet type from raw so it can create this packet, so it should not be re-read. This object already knows its type from creation. This is only relevant to the implemenation of the actual <a class="el" href="classGNE_1_1Packet.html">Packet</a> class, and has no signifiance to derived classes, or to the end user. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1CustomPacket.html#a7">GNE::CustomPacket</a>, <a class="el" href="classGNE_1_1ExitPacket.html#a5">GNE::ExitPacket</a>, <a class="el" href="classGNE_1_1PingPacket.html#a8">GNE::PingPacket</a>, and <a class="el" href="classGNE_1_1RateAdjustPacket.html#a5">GNE::RateAdjustPacket</a>.    </td>
  </tr>
</table>
<a name="a5" doxytag="GNE::Packet::writePacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::Packet::writePacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>raw</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Writes the packet to the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
You can continue writing more packets to the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> after this method. You must make sure there is enough space in the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> to fit this new packet. When overloading this function, call writePacket on the parent class then write your own variables. 
<p>
Reimplemented in <a class="el" href="classGNE_1_1CustomPacket.html#a6">GNE::CustomPacket</a>, <a class="el" href="classGNE_1_1ExitPacket.html#a4">GNE::ExitPacket</a>, <a class="el" href="classGNE_1_1PingPacket.html#a7">GNE::PingPacket</a>, and <a class="el" href="classGNE_1_1RateAdjustPacket.html#a4">GNE::RateAdjustPacket</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Packet_8h-source.html">Packet.h</a><li>Packet.cpp</ul>
<hr><address><small>Generated on Fri Mar 8 03:03:23 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

