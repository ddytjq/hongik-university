ID=D0443
URL=http://www.jchq.net/tutorial/06_01Tut.htm
SIZE=17980
DATE=16/07/02
TIME=14:46:45
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">

<HTML>
  
  <HEAD>
    <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
    <TITLE>6.1) Overloading and Overriding</TITLE>
    <META NAME="GENERATOR" CONTENT="StarOffice/5.2 (Linux)">
    <META NAME="CREATED" CONTENT="20010320;20311100">
    <META NAME="CHANGEDBY" CONTENT="Marcus Green">
    <META NAME="CHANGED" CONTENT="20010320;20533300">
    <LINK REL="stylesheet" HREF="tutor.css">
  </HEAD>
  
  <BODY BGCOLOR="#ffffff">
    <TABLE>
      <TR>
        <TD WIDTH="560" HEIGHT="104">
        
        <P><A HREF="introj2.htm"><IMG SRC="images/btnIndex.jpg" NAME="Graphic1" ALT="Return to Tutorial Index" ALIGN="BOTTOM" WIDTH="55" HEIGHT="39" BORDER="0"></A><A HREF="introj2.htm"><BR>
             <BR>
             </A><A HREF="../index.htm"><IMG SRC="images/btnHome.jpg" NAME="Graphic2" ALT="Back to the home page of this site" ALIGN="BOTTOM" WIDTH="55" HEIGHT="39" BORDER="0"></A>
        </P> </TD>
        <TD WIDTH="420">
        
        <P ALIGN="RIGHT"><IMG SRC="images/hat.gif" NAME="Graphic3" ALT="morterboard" ALIGN="BOTTOM" WIDTH="118" HEIGHT="113" BORDER="0"></P>
        </TD>
      </TR>
      <TR>
        <TD WIDTH="560" HEIGHT="11">
        
        <H1 ALIGN="LEFT">Java2 Certification <BR>
         Tutorial </H1> </TD>
        
        <TD WIDTH="420" BGCOLOR="#ff9900">
        
        <P>&nbsp;</P> </TD>
      </TR>
    </TABLE>
    
    <P> You can discuss this topic with others at
      <A HREF="http://www.jchq.net/discus">http://www.jchq.net/discus</A><BR>
       Read reviews and buy a Java Certification book at
      <A HREF="http://www.jchq.net/bookreviews/jcertbooks.htm">http://www.jchq.net/bookreviews/jcertbooks.htm</A></P>
    <HR SIZE="5" NOSHADE="NOSHADE">
    
    <H4>Recommended book on this topic</H4>
    
    <H4>Java Design Patters A Tutorial</H4>
    
    <P ALIGN="LEFT"><B>If you really want to understand the thinking behind
      the design of many of the Java classes such as I/O AWT/Swing and others
      this book shows the underlying thought process behind this approaches.
      This Object Orientation in action, rather than in theory and in trivial
      examples. This book covers much more than you strictly need for the
      purposes of the certification exam but you will see these patterns
      constantly referred to in the world of software engineering, so you might
      want to get used to them sooner rather than later. You might also consider
      the original &quot;GOF&quot; book (see reviews at amazon).</B></P>
    
    <P ALIGN="LEFT"><B>Buy from
      <A HREF="http://www.amazon.com/exec/obidos/ASIN/0201485397/jchqjavaprogramm">Amazon.com
      </A>or from
      <A HREF="http://www.amazon.co.uk/exec/obidos/ASIN/0201485397/jchqjavaprogramm">Amazon.co.uk</A></B>
    </P>
    <HR SIZE="5" NOSHADE="NOSHADE">
    
    <P ALIGN="LEFT"><B><A HREF="http://www.amazon.co.uk/exec/obidos/ASIN/0201485397/jchqjavaprogramm"></A></B></P>
    
    <H1>6)Overloading overriding runtime type and object orientation </H1>
    
    <H3>Objective 1)</H3>
    
    <P>State the benefits of encapsulation in object oriented design and write
      code that implements tightly encapsulated classes and the relationships &quot;is
      a&quot; and &quot;has a&quot;.</P>
    
    <H3>&quot;<I>Is a</I>&quot; vs &quot;<I>has a</I>&quot; relationship</H3>
    
    <P>This is a very basic OO question and you will probably get a question on
      it in the exam. Essentially it seeks to find out if you understand when
      something is referring the type of class structure that an object belongs
      to and when it refers to a method or field that a class has.<BR>
       <BR> Thus a cat IS A type of animal and a cat HAS a tail. Of course the
      distinction can be blurred. If you were a zoologist and knew the correct
      names for groups of animal types you might say a cat IS A&nbsp;<BR>
       <BR><I>longlatinwordforanimalgroupwithtails.<BR>
       <BR></I>but for the purpose of the exam this is not a consideration.<BR>
       <BR> The exam questions tend to be of the type whereby you get a text
      description of a potential hierarchy and you get questions as to what
      ought to be a field and what ought to be a new class type as a child.
      These questions can look complex at first glance, but if you read them
      carefully they are fairly obvious.</P>
    
    <H3>Encapsulation</H3>
    
    <P>The Java 1.1 objectives did not specifically mention encapsulation,
      though you would be hard pressed to study Java and not come across the
      concept. Encapsulation involves separating the interface of a class from
      its implementation. This means you can't &quot;accidentally&quot; corrupt
      the value of a field, you have to use a method to change a value.</P>
    <TABLE WIDTH="100%" BORDER="0">
      <TR>
        <TD WIDTH="9%"><IMG SRC="images/key2.gif" WIDTH="106" HEIGHT="73" ALIGN="bottom" BORDER="0"></TD>
        <TD WIDTH="91%">
        
        <H3><FONT COLOR="#FF0000"><B>Encapsulation involves hiding data of a
        class and allowing access only through a public interface.</B></FONT>
        </H3> </TD>
      </TR>
    </TABLE>
    
    <P>To do this usually involves the creation of private variables (fields)
      where the value is updated and retrieved via methods. The standard naming
      convention for these methods is</P>
    <UL>
      <LI>
        
        <P ALIGN="LEFT">setFieldName </P> </LI>
      <LI>
        
        <P ALIGN="LEFT">getFieldName </P> </LI>
    </UL>
    
    <P>For example if you were changing the Color of a shape you might create a
      method pair in the form</P>

<PRE>public void setColor(Color c){
    cBack = c;
    }
public Color getColor(){
   return cBack;
    }</PRE>
    
    <P>The main access control keywords for variables are</P>
    <UL>
      <LI>
        
        <P ALIGN="LEFT" STYLE="margin-bottom: 0in">public </P> </LI>
      <LI>
        
        <P ALIGN="LEFT" STYLE="margin-bottom: 0in">private </P> </LI>
      <LI>
        
        <P ALIGN="LEFT">protected </P> </LI>
    </UL>
    
    <P>Do not be mislead into thinking that the access control system is to do
      with security. It is not designed to prevent a programmer getting at
      variables, it is to help avoid unwanted modification.</P>
    
    <P>The standard approach using the Color example above would be for the
      Color field <I>cBack</I> to be private. A private field is only visible
      from within the current class. This means a programmer cannot accidentally
      write code from another class that changes the value. This can help to
      reduce the introduction of bugs.</P>
    
    <P>The separation of interface and implementation makes it easier to modify
      the code within a class without breaking any other code that uses it.</P>
    
    <P>For the class designer this leads to the ability to modify a class,
      knowing that it will not break programs that use it. A class designer can
      insert additional checking routines for &quot;sanity checks&quot; for the
      modification of fields. I have worked on insurance projects where it was
      possible for clients to have an age of less than zero. If such a value is
      stored in a simple field such as an integer, there is no obvious place to
      store checking routines. If the age were only accessible via <I>set</I>
      and <I>get</I> methods it will be possible to insert checks against zero
      or negative ages in such a way that it will not break existing code. Of
      course as development continues more situations may be discovered that
      need checking against.</P>
    
    <P>For the end user of the class it means they do not have to understand
      how the internals work and are presented with a clearly defined interface
      for dealing with data. The end user can be confident that updates to the
      class code will not break their existing code.</P>
    
    <H3><B>Runtime type</B></H3>
    
    <P>Because polymorphism allows for the selection of which version of a
      method executes at runtime, sometimes it is not obvious which method will
      be run. Take the following example.</P>

<PRE>class Base {
int i=99;
public void amethod(){
        System.out.println(&quot;Base.amethod()&quot;);
        }
}

public class RType extends Base{
int i=-1;
        public static void main(String argv[]){
        Base b = new RType();//&lt;= Note the type
        System.out.println(b.i);
        b.amethod();
        }
        public void amethod(){
                System.out.println(&quot;RType.amethod()&quot;);
        }

}</PRE>
    
    <P>Note how the type of the reference is <I>b</I> <I>Base</I> but the
      type of actual class is <I>RType</I>. The call to <I>amethod</I> will
      invoke the version in <I>RType</I> but the call to output <I>b.i</I>
      will reference the field <I>i</I> in the <I>Base</I> class.</P>
    <HR SIZE="3" NOSHADE="NOSHADE">
    <TABLE WIDTH="100%" BORDER="0" CELLPADDING="2" CELLSPACING="2">
      <TR>
        <TD WIDTH="11%">
        
        <P><IMG SRC="images/Quiz.gif" NAME="Graphic5" ALIGN="BOTTOM" WIDTH="99" HEIGHT="101" BORDER="0">
        </P> </TD>
        <TD WIDTH="89%">
        
        <P>&nbsp; </P> </TD>
      </TR>
    </TABLE>
    
    <H4><B>Question 1)</B></H4>
    
    <P><B><BR>
      </B>Consider you have been given the following design<BR>
       <BR> &quot;A person has a name, age, address and sex. You are designing a
      class to represent a type of person called a patient. This kind of person
      may be given a diagnosis, have a spouse and may be alive&quot;. Given that
      the person class has already been created, what of the following would be
      appropriate to include when you design the patient class?</P>
    
    <P><BR>
       1) registration date<BR>
       2) age<BR>
       3) sex<BR>
       4)diagnosis </P>
    
    <P><BR>
       <BR> </P>
    
    <H4><B>Question 2)</B> </H4>
    
    <P>What will happen when you attempt to compile and run the following code?</P>

<PRE>class Base {
int i=99;
public void amethod(){
        System.out.println(&quot;Base.amethod()&quot;);
        }
        Base(){
             amethod();
        }

}

public class RType extends Base{
int i=-1;
        public static void main(String argv[]){
        Base b = new RType();
        System.out.println(b.i);
        b.amethod();
        }
        public void amethod(){
                System.out.println(&quot;RType.amethod()&quot;);
        }
}

1)
RType.amethod
-1
RType.amethod</PRE>
    
    <P>2)</P>

<PRE>RType.amethod
99
RType.amethod</PRE>
    
    <P><B><BR>
      </B>3)</P>

<PRE>99
RType.amethod</PRE>
    
    <P>4)</P>

<PRE STYLE="margin-bottom: 0.2in">Compile time error</PRE>
    
    <H4><B>Question 3)</B></H4>
    
    <P>Your chief Software designer has shown you a sketch of the new Computer
      parts system she is about to create. At the top of the hierarchy is a
      Class called Computer and under this are two child classes. One is called
      LinuxPC and one is called WindowsPC. The main difference between the two
      is that one runs the Linux operating System and the other runs the Windows
      System (of course another difference is that one needs constant re-booting
      and the other runs reliably). Under the WindowsPC are two Sub classes one
      called Server and one Called Workstation. How might you appraise your
      designers work? </P>
    
    <P><BR>
       1) Give the goahead for further design using the current scheme<BR>
       2) Ask for a re-design of the hierarchy with changing the Operating
      System to a field rather than Class type<BR>
       3) Ask for the option of WindowsPC to be removed as it will soon be
      obsolete<BR>
       4) Change the hierarchy to remove the need for the superfluous Computer
      Class.</P>
    
    <H4><B>Question 4)</B></H4>
    
    <P>Given the following class </P>

<PRE>class Base{
        int Age=33;
}</PRE>
    
    <P>How might you change improve the class with respect to accessing the
      field Age?</P>
    
    <P>1) Define the variable Age as private<BR>
       2) Define the variable Age as protected<BR>
       3) Define the variable Age as private and create a get method that
      returns it and a set method that updates it<BR>
       4) Define the variable Age as protected and create a set method that
      returns it and a get method that updates it</P>
    
    <H4><B>Question 5)</B></H4>
    
    <P>Which of the following are benefits of encapsulation</P>
    
    <P>1) All variables can be manipulated as Objects instead of primitives<BR>
       2) by making all variables protected they are protected from accidental
      corruption<BR>
       3) The implementation of a class can be changed without breaking code
      that uses it<BR>
       4) Making all methods protected prevents accidental corruption of data</P>
    
    <H4><B>Question 6)</B></H4>
    
    <P>Name three principal characteristics of Object Oriented programming?</P>
    
    <P>1) encapsulation, dynamic binding, polymorphism<BR>
       2) polymorphism, overloading, overriding<BR>
       3) encapsulation, inheritance, dynamic binding<BR>
       4) encapsulation, inheritance, polymorphism</P>
    
    <H4><B>Question 7)</B></H4>
    
    <P>How can you implement encapsulation in a class</P>
    
    <P>1) make all variables protected and only allow access via methods<BR>
       2) make all variables private and only allow access via methods<BR>
       3) ensure all variables are represented by wrapper classes<BR>
       4) ensure all variables are accessed through methods in an ancestor class
    </P>
    
    <H1>Answers</H1>
    
    <H4><B>Answer 1)</B></H4>
    
    <P><B><BR>
      </B>1) registration date<B><BR>
      </B>4) diagnosis<BR>
       <BR> Registration date is a reasonable additional field for a patient, and the
      design specifically says that a patient should have a diagnosis. As the
      patient is a type of person, it should have the fields age and sex
      available (assuming they were not declared to be private).</P>
    
    <H4><BR>
    <B>Answer 2)</B></H4>
    
    <P>2)</P>

<PRE>RType.amethod 
99
RType.amethod</PRE>
    
    <P>If this answer seems unlikley, try compiling and running the code. The
      reason is that this code creates an instance of the RType class but
      assigns it to a reference of a the Base class. In this situation a
      reference to any of the fields such as i will refer to the value in the
      Base class, but a call to a method will refer to the method in the class
      type rather than its reference handle. </P>
    
    <H4><B>Answer 3) </B> </H4>
    
    <P><BR>
       2) Ask for a re-design of the hierarchy with changing the Operating
      System to a field rather than Class type</P>
    
    <H4><BR>
    <B>Answer 4)</B></H4>
    
    <P>3) Define the variable Age as private and create a <I>get</I> method
      that returns it and a <I>set</I> method that updates it</P>
    
    <H4><BR>
    <B>Answer 5)</B></H4>
    
    <P><B><BR>
      </B>3) The implementation of a class can be changed without breaking code
      that uses it</P>
    
    <H4><BR>
    <B>Answer 6)</B></H4>
    
    <P><B><BR>
      </B>4) encapsulation, inheritance, polymorphism<B><BR>
       <BR></B>I got this question at a job interview once. I got the job. Can't be
      certain you will get anything similar in the exam, but its handy to know.</P>
    
    <H4><BR>
    <B>Answer 7)</B></H4>
    
    <P><B><BR>
      </B>2) make all variables private and only allow access via methods </P>
    
    <P ALIGN="CENTER" STYLE="margin-bottom: 0in"><B>Other sources on this
      topic</B></P>
    <TABLE WIDTH="100%" BORDER="1" CELLPADDING="2" CELLSPACING="2">
      <TR>
        <TD WIDTH="100%">
        
        <P><B>This topic is covered in the Sun Tutorial at </B><BR>
          <A HREF="http://java.sun.com/docs/books/tutorial/java/concepts/index.html">http://java.sun.com/docs/books/tutorial/java/concepts/index.html</A><BR>
           <BR>
          <B>Richard Baldwin Covers this topic at<BR>
          </B><A HREF="http://www.Geocities.com/Athens/Acropolis/3797/Java004.htm#an initial description of oop">http://www.Geocities.com/Athens/Acropolis/3797/Java004.htm#an
            initial description of oop<BR>
             </A>(This is general stuff on OOP rather than concentrating on &quot;is
          a&quot; &quot;has a&quot;)<B><BR>
           <BR>
           Jyothi Krishnan on this topic at<BR>
          </B><A HREF="http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj19">http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj19<BR>
             <BR>
             </A><B>Java 1.1 Unleashed</B><BR>
          <A HREF="http://www.itlibrary.com/reference/library/1575212986/htm/ch05.htm">http://www.itlibrary.com/reference/library/1575212986/htm/ch05.htm<BR>
             </A>(See the section on encapsulation)</P> 
<P><B> Chapter 6 from the Roberts, Heller and Earnest book </b></br>  
<A HREF="http://developer.java.sun.com/developer/Books/certification/page1.html">http://developer.java.sun.com/developer/Books/certification/page1.html<br>
</TD>      
</TR>
    </TABLE>
    
    <P>Last updated<BR>
       12 June 2001<BR>
       copyright &copy; Marcus Green 2001</P>
  </BODY>
</HTML>

