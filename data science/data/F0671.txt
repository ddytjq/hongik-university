ID=F0671
URL=http://www.angelfire.com/ny3/visualbasic/17.html
SIZE=3142
DATE=09/07/2002
TIME=13:24:22
DATASET=Visual Basic
HTML=<style TYPE="text/css">
   A{text-decoration: none;}
   A:hover { color: blue; text-decoration: underline;  }
</style>

<p align=center>
<font face="tahoma">
<font size="2">
<font color="red">
<B>Modular Programming</b>
</font>
</p>

<p align=left>
<font face="tahoma">
<font size="2">
Up to this point you should be thinking that you know more then enough VB knowledge to make efficient programs. Well your actually missing one thing, thats why i have dedicated this section to Modular Programming (.bas files). The best way to code is to write small codes, they're easier to read, you can find bugs easier, therefore the better, more reliable programs you will make.
</p>

<p align=center>
<img src="http://www.angelfire.com/ny3/visualbasic/images/vbbas.jpg" This is what a standard module looks like...
</p>

<p align=center>
<font face="tahoma">
<font size="2">
<font color="blue">
<img src="http://www.angelfire.com/ny3/visualbasic/images/tip.jpg"> <B>Tip:</b> This way of programming is called <i>Structured Programming</i>, its just a method where you break up program codes into small procedures
</font>
</p>


<p align=left>
<font face="tahoma">
<font size="2">
Here 's an example of why you would want to use Structured programming in your program:<Br>
<Br>
&nbsp;&nbsp;&nbsp; Private Sub Command1_Click()<Br>
<Br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call User_Name<Br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call UserID<Br>
<Br>
&nbsp;&nbsp;&nbsp; End Sub<Br>
<Br>
This code, if it wasn't structured would take more then two lines of code to do. Not only will it be shorter, but you would be able to use it throughout your program w/o having to rewrite the code or copy & pasteing the User_Name & UserID codes.<Br>

<p align=center>
<font face="tahoma">
<font size="2">
<font color="red">
<img src="http://www.angelfire.com/ny3/visualbasic/images/note.jpg"> <B>Note:</b> The "Call" Keyword just triggers the execution of another procedure, meaning that you would have User_Name & UserID defined in your .bas
</font>
</p>

<p align=left>
<font face="tahoma">
<font size="2">
If you have ever DLed a bas from a site, then you probably have noticed the keywords <B>Private & Public</b>... The Private keyword limits the calling of a procedure within <i>that</i> module. The Public keyword doesn't limit the calling of a procedure, and therefore can be <i>called</i> from anywhere in that project.
</p>

<p align=left>
<font face="tahoma">
<font size="2">
<B>Subroutines</b> work when they are called by other procedures, but do <i>not</i> return values<Br>
<Br>
<B>Functions</b> work when they are called by other procedures, <i>and</i> return values (such as described in previous section)<Br>
<Br>
Examples:<Br>
<Br>
Calling a Subroutine<Br>
Call Names ()<Br>
<Br>
Calling a Function<Br>
Call DoTax (Tax As TextBox) As Integer<Br>
</p>

<p align=left>
<font face="tahoma">
<font size="2">
This really just covers the basics, I will add to it soon enough... For now move on...
</p>

<p align=center>
<font face="tahoma">
<A HREF ="16.html" TARGET="MainWindow"><font color="blue">Back</a>
<A HREF ="18.html" TARGET="MainWindow"><font color="blue">Next</a>
</p>





