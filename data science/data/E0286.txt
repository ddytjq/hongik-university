ID=E0286
URL=http://www.intap.net/~drw/cpp/cpp04_01.htm
SIZE=7810
DATE=12/07/02
TIME=19:19:31
DATASET=C
HTML=
<html>
<head> 
<title>
online C++ tutorial: What is a Control Statement?
</title>
</head>

<body bgcolor="#ffffff"
       link = "#ff0000"
      alink = "#00ff00"
      vlink = "#660000" >


<table width="100%" border=0>
<tr>
<td align=left>
<a href="cpp03_01.htm"><img border=0 src="pictures/buttons/prevs.gif" width=51 height=34 alt="&lt;&lt;=="></a>
<a href="cpp03_05.htm"><img border=0 src="pictures/buttons/prevp.gif" width=37 height=34 alt="&lt;="></a>
</td>
<td align=center>
<a href="index.htm">
<img border=0 width=122 height=34 src="pictures/buttons/toc.gif"
    alt="[table of contents]"></a>
<a href="/cgi-bin/drw/cpp/search.cgi">
<img border=0 width=46 height=34 src="pictures/buttons/search.gif"
    alt="[search]"></a>
<a href="glossary.htm">
<img border=0 width=61 height=34 src="pictures/buttons/glossary.gif"
    alt="[glossary]"></a>
<a href="feedback.htm">
<img border=0 width=65 height=34 src="pictures/buttons/feedback.gif"
    alt="[feedback]"></a>
</td>
<td align=right>

<a href="cpp04_02.htm"><img border=0 src="pictures/buttons/nextp.gif" width=37 height=34 alt="=&gt;"></a>
<a href="cpp05_01.htm"><img border=0 src="pictures/buttons/nexts.gif" width=51 height=34 alt="==&gt;&gt;"></a>
</td>
</tr>
</table>
<hr>
<table width="100%"><tr><td align=left><img src="pictures/buttons/cppsm.gif" width=143 height=37 alt="[online C++ tutorial]"></td><td align=right><b>Section 4: Control Statements </b></td></tr></table>
<center><h2>Section 4.1: What is a Control Statement?</h2></center>
<h3> The flow of control </h3>

<p>
When a programmer is crafting a program, it is good practice to 
break the program down into pieces that can be thought of 
independently. Once the program has been completed, we can think 
of its execution as being a series of these pieces that work
together in a certain sequence. These pieces then pass the 
control of the program between each other. While one piece has the
control, the other pieces are inactive. This is known as the flow 
of control in a program.

If our program had three parts, called <b>Start</b>, <b>Middle</b>,
and <b>End</b>, the flow of control could look like:
<p>
<img src="pictures/04_01.jpg" width=453 height=355 alt="[flow of control diagram]">


<p>
<h3> control statements </h3>

Control Statements, then, are ways for a programmer to control what 
pieces of the program are to be executed at certain times. 
The syntax of Control statements are very similar to regular 
english, and are very similar to choices
that we make every day. There are two basic types of control 
statements: branching statements and loops.

<p>
<h3> branching statements </h3>
We will first look at branching statements.
Let's say Julien is shopping at a mall and 
he finds a CD that he wants to buy. Julien then checks his pocket to 
see if he has enough money to pay for the CD. When he pulls his money
out of his pocket Julian may be thinking: "if I have more money 
than the price of the CD then I will buy the CD." In 
<a href="glossary.htm#pseudocode">pseudocode</a>
that thought could be translated into:

<pre>
if (my_money &gt; cost_of_CD) then
	buy_CD
else
	get_a_job
end if;
</pre>

<p>
Note that the pseudocode statement <b>end if</b> means
"end the previous <b>if</b> statement." This is to make it
clear what statements are inside the <b>if</b> statement and what 
statements are outside of the <b>if</b> statement.

<p>
Depending on a certain 
<a href="glossary.htm#condition">condition</a>
a certain series of events will be executed. Another type of 
branching statement is called a <b>switch</b> statement. A 
<b>switch</b> statement is just a shorter way of writing a lot of 
<b>if</b> statements.  Switch statements will be explained in more
detail in the next subsection.

<p>
<h3> nesting control statements </h3>
In the preceding situation, 
if Julien doesn't have enough money, before going out to get a job,
he could look for a friend
to borrow the money from. Now the 
<a href="glossary.htm#pseudocode">pseudocode</a> 
for this could be:

<pre>
if (my_money &gt; cost_of_CD) then
	buy_CD
else
	if (see_a_friend) then
		borrow_money
	else
		get_a_job
	end if;
end if;
</pre>

Now there is one control statement that is inside of another
control statement. This is known as
<a href="glossary.htm#nested">nesting</a>.

<p>
<h3> loops </h3>
Let's pretend now that Julien was buying a house instead of a
CD. If Julien wanted to buy the house without taking a loan from
the bank, he would have to wait until he had enough money to buy
the house. The pseudocode for this could be:

<pre>
if (my_money &gt; cost_of_house) then
	buy_house
end if;
</pre>

But this means that Julien would only check once if he had 
enough money to buy the house. What we want to describe is the
fact that Julien needs to keep waiting until he has enough money
to buy the house.


<pre>
while (my_money &lt; cost_of_house) 
	work_more
end while;
buy_house;
</pre>

This is a loop statement. Another loop statement
is the <b>for</b> command. 
Let's say Julien wanted to add up how much 
money he would make over the next year. Let's say Julien is paid
$500 twice each month. The pseudocode to figure this out could
be:

<pre>
int total=0;
for x = 1 to 24
	total = total + 500
next x;
<b>output</b> total;
</pre>

A <b>for</b> statement execute a specified number of times. In this 
instance it executes 24 times (12 months * 2 pay periods per month).
In this example, it would actually be easier to write this code as:

<pre>
total = 24 * 500;
<b>output</b> total;
</pre>

But, what if Julien earns interest on any money that he saves? Now
a <b> for </b> statement will be a handy tool. Let's decide that
Julien spends $400 a month on rent, $75 a month on food, and $100
a month on other expenses. Let's also assume that Julien earns 2%
per month on any money that he saves. Now our pseudocode 
could look like:

<pre>
int monthly_expenses= 400 + 75 + 100;
int monthly_income = 1000;
float interest_rate = .02

// compute the amount Julien will have saved after one year
int total = 0;
int interest_earned =0;
for x = 1 to 12
	interest_earned = total * interest_rate;
	total = total + interest_earned + monthly_income - monthly_expenses
next x;

// display the value
<b> output </b> total;
</pre>

Control statements allow a programmer to craft a program so that
certain parts of code execute multiple times, or not at all based 
on the current state of the program. Control statements are the 
most basic form of logical control within a program.
<hr>
<table width="100%" border=0>
<tr>
<td align=left>
<a href="cpp03_01.htm"><img border=0 src="pictures/buttons/prevs.gif" width=51 height=34 alt="&lt;&lt;=="></a>
<a href="cpp03_05.htm"><img border=0 src="pictures/buttons/prevp.gif" width=37 height=34 alt="&lt;="></a>
</td>
<td align=center>
<a href="index.htm">
<img border=0 width=122 height=34 src="pictures/buttons/toc.gif"
    alt="[table of contents]"></a>
<a href="/cgi-bin/drw/cpp/search.cgi">
<img border=0 width=46 height=34 src="pictures/buttons/search.gif"
    alt="[search]"></a>
<a href="glossary.htm">
<img border=0 width=61 height=34 src="pictures/buttons/glossary.gif"
    alt="[glossary]"></a>
<a href="feedback.htm">
<img border=0 width=65 height=34 src="pictures/buttons/feedback.gif"
    alt="[feedback]"></a>
</td>
<td align=right>

<a href="cpp04_02.htm"><img border=0 src="pictures/buttons/nextp.gif" width=37 height=34 alt="=&gt;"></a>
<a href="cpp05_01.htm"><img border=0 src="pictures/buttons/nexts.gif" width=51 height=34 alt="==&gt;&gt;"></a>
</td>
</tr>
</table>
</body>
</html>

