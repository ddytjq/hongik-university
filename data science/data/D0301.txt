ID=D0301
URL=http://www.geocities.com/lkp550/jscript/lesson3.htm
SIZE=9078
DATE=16/07/02
TIME=14:42:28
DATASET=Java
HTML=<html>
<head>
<title>JavaScript - Lesson Three</title>
</head>

<body background="jscriptbg.jpg">
<font face="arial" size=3>
<h1 align=center>Lesson Three</h1>
<hr>

<p>A way of making HTML more dynamic is to use <b>events</b>, which are actions that take place when the user makes a movement. For example, if a user clicks their mouse on a button, an event processes the request.

<img src="form.jpg" align=right vspace=5 hspace=5><p>Events are most commonly used in processing forms. The image to the right shows two tags that allows users to generate an event, the <b>FORM</b> tags and the <b>INPUT</b> tags. The two INPUT types shown are <b>"text"</b>, which creates a text box for the user to put their name or address, and <b>"radio"</b>, which creates round buttons for the user to make multiple choices. You can assign a name to your FORM and INPUT tags by typing <b>NAME="..."</b> inside each tag. This way, you can reference your the tags that you have created with your JavaScript programs.

<p>The programming that takes care of the form is called an <b>event handler</b>. An event handler takes a mouse click and processes the request with the proper programming. One form of event handler is the <b>alert()</b> method. A way of using an alert() method is <b>onClick="alert('You clicked the button!')"</b>. You can also use a variable, such as <b>onClick="var message='You clicked the button!'; alert(message)"</b>. One thing to remember, after the <i>onClick=</i>, if you use double-quotes, you must use single-quotes within the doubles, otherwise the doubles will cancel each other out. This method will produce a text box with an "OK" button at the bottom. To see how this works, <a href="#prompt" onClick="var message='You clicked on the link! Please press OK.'; alert(message)">click here</a>.

<a name="prompt"><p></a>Another method is the <b>prompt()</b> method. To use prompt, you would type, <b>variable_name = prompt(message, default_text);</b>. This displays a dialog box with a message, a text box, an OK button, and a Cancel button. To see how this works, <a href="#demo" onClick="var age = prompt('Please enter your age','Enter age here'); alert('Your age is ' + age + '!')">click here</a>.

<a name="demo"><p></a><img src="events.jpg" align="left" hspace=5 vspace=5>To the left is the codes for another demonstration using both prompt and alert methods. The page opens, asks you for your name, says "Hello", allows you to type a number in the text field, repeats the number you entered, tells you that the value has changed, then, when you leave, says "Goodbye". To see how this works, <a href="GreetVisitor.htm">click here</a>.

<p>As you may have noticed, if you leave your name blank, your name becomes "null". This is because the user never provided any input for the promp() method. You will learn how to override this in later chapters.

<p>It may seem like all we know how to do is display things by creating links. Many of the lessons will show templates to encourage you to try these codes yourself rather than to copy what we do. Which brings us to our next topic, links. Remember, many HTML documents contain what are called "hyperlinks". Hyperlinks, once clicked, lead you to another page or Web pages. You can create an image to act like a hyperlink. Don't get this confused with a button. This is called an "image map", which we will be discussing soon.

<p>Buttons are FORM properties. Image maps are an extention of links. <b>Links</b> are anchors for a location of a page or Web page. Normally distinguished as blue, underlined text, a link has it's own destination. You create a link by inserting the <b>A HREF="..."</B>, which acts as an anchor, followed by text and an <b>/A</B> tag.

<p>An anchor uses either an <b>absoute Universal Resource Locator(URL)</B>, such as "http://www.MyWebSite.com/index.html", or it uses a <b>relative URL</b>, such as "MyWebSite.html". Another relative URL would be one that you could access subfolders that are tied to your Web page, such as "/AboutMe/History.html". If you decide to use BASE tags in your Web page, then the relative URLs are relative only to that BASE tag.

<p>Links have their own events. If you click a link, it takes you to another page or site. There are other events you can add to links. One of such is called the <b>confirm()</b> method. This method displays a dialog box that contains an "OK" button and a "Cancel" button. This will return the value <i>true</i> if the user presses the OK button or <i>false</i> if the user presses the cancel button. To see how this works, <a href="#mouse" onClick="confirm('Please click OK or Cancel!')">click here</a>.

<a name="mouse"><p></a>Two other events is the <b>MouseOver</b> and the <b>MouseOut</b> events. A simple and popular property of these is the <b>status=' ';</b> property. <a href="" onMouseOver="status='This is a MouseOver event'; return true;">This link</a> shows how the MouseOver event works, and <a href="" onMouseOver="status='This is a MouseOver event'; return true;" onMouseOut="status='This is the MouseOut event'; return true;">this link</a> shows how both events work <b>(NOTE: These may not work well or at all on newer versions of Internet Explorer or Netscape.)</b>.

<p><img src="Home.jpg" align="right" hspace=5 vspace=5>Now that we've learened so much, we can create an <b>image map</b>. An image map is an image that is divided into regions called <b>hot zones</b>. The image to the left shows the code for creating an image map. First, you need two or more images that will be used in the map. Next, we created the functions in the HEAD of the document that will take care of changing of the image during MouseOver and resetting the image on MouseOut. Then, in the BODY, we added the IMG SRC tag that will insert the first picture we want the user to see. Included in this tag is the property <b>usemap</b> that tells the program what map we will be using. Next, we created the map that will be the base of what we are trying to create. In the next tag, the AREA tag, is where it all comes together. We chose the shape <b>rect</b> to cover the image we are using. You can also use <b>circle</b> and <b>poly</b> to cover circles and polygons. Then, we gave the coordinates of the rectangle to show the active area. The coordinates were given in <b>pixels</b>, or picture elements. We included the HREF so that browsers that aren't fully JavaScript compatible will be able to run the map. Then, we added the MouseOver and MouseOut events so that when the user moves their cursor over the image, the image will change and then change back. Finally, we inserted an onClick event to take care of any mouse clicks so the link wouldn't try to go anywhere.

<p>To see how this map works, <a href="Home.htm">click here</a>.

<hr>
<h2 align=center>Putting it all together!</h2>
<p>This is a new feature we are adding to our tutorials so that you can see how what you've learned ties together. Some of the examples are ours, some are from other sites. Below is a program from JavaScript Source. It is a program that brings the user back to their home page. For example, if you connect to the internet and the first page that loads is Yahoo, pressing the button will bring you to Yahoo. Try it, then press your "Back" browser button to return here. Try creating this yourself. If you run into problems, click your "View" menu and click "Source" to see how it was done. You may have to scroll down to the bottom to see the script.

<!-- Original:  Tim Stringfellow (xtimothyx@hotmail.com ) -->
<!-- Web Site:   http://www.angelfire.com/me4/thisone/ -->
<center>
<form>
<INPUT TYPE="button" VALUE="Your Home" onClick="parent.location='about:home'">
</form>
</center>
<hr>

<p><b><u>Question:</u></b> Cool! This seems like it will be fun to learn. But how do I make JavaScript work like Java?

<p><b><u>Answer:</u></b> Fortunately, JavaScript has some of the same data type and operators. In the next lesson, we'll take a look at how these work.
<hr>
<center><a href="http://www.geocities.com/lkp550/jscript/lesson2.htm">Lesson Two</a> | <a href="http://www.geocities.com/lkp550/JAVASCRIPT.htm">Home</a> | <a href="http://www.geocities.com/lkp550/jscript/lesson4.htm">Lesson Four</a><br>
<br>
<b>If you have any questions or comments about this lesson, feel free to <a href="http://expertprofile.yahoo.com/lkp550?.tpid=383000187">click here</a> and leave me your message.</b></center>

</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026499641" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001068&t=1026499641" ALT=1 WIDTH=1 HEIGHT=1>

