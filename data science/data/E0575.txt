ID=E0575
URL=http://www.rit.edu/~jpw9607/ctut/part1.htm
SIZE=23928
DATE=12/07/02
TIME=19:22:22
DATASET=C
HTML=<html><!-- #BeginTemplate "/Templates/main.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>C/C++ Tutorial Page 1</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../style.css" type="text/css">
<meta name="keywords" content="DJGPP, Allegro, programming, JetFight, Project V2143, C++, tutorials, linklist, MSVC, Microsoft Visual C++, Itana, GNE, Deathworms, MUUDPIC, Java, links, games, libraries, source, code, C, network, multiplayer">
<meta name="description" content="Gillius's Programming.  C/C++ tutorials, games, java, allegro, and libraries.">
</head>
<body bgcolor="#000000" text="#FFFFFF" link="#FFFF00" vlink="#008080" alink="#990099">
<table width="100%" border="0" cellpadding="0" cellspacing="5">
  <tr> 
    <td colspan="2" class="titleBar">Gillius's Programming</td>
  </tr>
  <tr> 
    <td width="130" height="621" valign="top"> 
      <table border="0" cellpadding="3" cellspacing="0" name="NavBar" width="130">
        <tr> 
          <td valign="top" class="leftTitle">Sections</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../index.htm">Home / News</a><br>
            <a href="../tutorial.htm">Tutorials</a><br>
            <a href="../games.htm">Games Corner</a><br>
            <a href="../java/index.htm">Java</a><br>
            <a href="../filesandprog.htm">The Archive</a><br>
            <a href="../links.htm">Links</a> </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="http://boards.eesite.com/board.cgi?boardset=60999">Fourms</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Current Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"> 
            <p><a href="../gne/index.htm">GNE</a> v.49a<br>
              <span class="leftDesc">--Game Networking Engine</span></p>
            <p><a href="../itana/index.htm">Itana</a> v.71a<br>
              <span class="leftDesc">--2D multiplayer space game</span></p>
          </td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle">Complete Projects</td>
        </tr>
        <tr> 
          <td valign="top" class="leftText"><a href="../bgui2/index.htm">BGui2</a> 
            v.2.0.2<br>
            <a href="../deathworms/index.htm">Deathworms</a><br>
            <a href="../muudpic/index.htm">MUUDPIC</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../contact.htm">Contact 
            Gillius</a></td>
        </tr>
        <tr> 
          <td valign="top" class="leftTitle"><a href="../resume.htm">Gillius's 
            Resum&eacute;</a></td>
        </tr>
        <tr> 
          <td valign="top">&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td> 
            <form action="http://pub.alxnet.com/poll" METHOD="POST" >
              <input type="hidden" name="id" value="2061268">
              <input type="hidden" name="q" value="submit">
              <table border="1" bgcolor="#AAAAAA" cellpadding="3" cellspacing="0">
                <tr> 
                  <td bgcolor="#202020" align="middle" class="pollTitle"> Location</td>
                </tr>
                <tr> 
                  <td> 
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                      <tr> 
                        <td class="pollQuestion">What part of the world do you 
                          live in?</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="1">
                          North America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="2">
                          South America</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="3">
                          Europe</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="4">
                          Africa</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="5">
                          West/North Asia (like Russia)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="6">
                          East/South Asia (like India and Japan)</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="7">
                          Australia / Indonesia</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="8">
                          Middle East</td>
                      </tr>
                      <tr> 
                        <td class="pollResponses"> 
                          <input type="radio" name="rd" value="9">
                          Other</td>
                      </tr>
                      <tr> 
                        <td align="middle">
<input type="submit" value="Vote">
                        </td>
                      </tr>
                      <tr> 
                        <td align="middle"><a href="http://pub.alxnet.com/poll?id=2061268&q=view" class="pollLink" >Current 
                          results</a></td>
                      </tr>
                    </table>
                  </td>
                </tr>
                <tr> 
                  <td align="middle"><a href="http://www.alxnet.com/services/poll/" class="pollLink">Alxnet 
                    Free Web Tools</a></td>
                </tr>
              </table>
            </form>
            <a href="../poll.htm">View old poll results</a></td>
        </tr>
        <tr> 
          <td>&nbsp;</td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td valign="middle" align="center" height="64"> 
            <!-- Start of TheCounter.com Code -->
            <script type="text/javascript" language="javascript">
s="na";c="na";j="na";f=""+escape(document.referrer)
</script>
            <script type="text/javascript" language="javascript1.2">
s=screen.width;v=navigator.appName
if (v != "Netscape") {c=screen.colorDepth}
else {c=screen.pixelDepth}
j=navigator.javaEnabled()
</script>
            <script type="text/javascript" language="javascript">
function pr(n) {document.write(n,"\n");}
NS2Ch=0
if (navigator.appName == "Netscape" &&
navigator.appVersion.charAt(0) == "2") {NS2Ch=1}
if (NS2Ch == 0) {
r="&size="+s+"&colors="+c+"&referer="+f+"&java="+j+""
pr("<A HREF=\"http://www.TheCounter.com\" TARGET=\"_top\"><IMG"+
" BORDER=0 SRC=\"http://c2.thecounter.com/id=1557583"+r+"\"><\/A>")}
</script>
            <noscript><a href="http://www.TheCounter.com" target="_top"><img
src="http://c2.thecounter.com/id=1557583" alt="TC" border=0></a> </noscript> 
            <!-- End of TheCounter.com Code -->
            <br>
            since 5/14/01</td>
        </tr>
      </table>
    </td>
    <td valign="top" align="left"><!-- #BeginEditable "content" --> 
      <p align="left"><a name="Main Function"></a>The main function 
        is the place where the code exectuion begins. Unlike BASIC and Pascal, 
        a function needs to be declared for code execution.</p>
      <pre align="left">void main() {
}</pre>
      <p align="left">The void means that the function does not 
        return any data (called a procedure in BASIC or PASCAL when it doesn't 
        return anything.) The main is its name, and the () state that this function 
        takes no parameters. The brackets indicate the beginning and end of the 
        function/procedure.</p>
      <p align="left">Similar to BASIC and Pascal: in BASIC anything 
        typed outside a function is assumed to be the main code. In Pascal, BEGIN 
        END. are equalvent to this code.</p>
      <p align="left">A note to C users--most C compilers will 
        give a warning about void being used on main. You can ignore this for 
        now, but if it becomes annoying just change the &quot;void&quot; to &quot;int&quot;, 
        and place the command &quot;return 0;&quot; at the end of your code in 
        the brackets like this (the true reason for this will be given later in 
        Main Function II):</p>
      <pre>int main() {
  return 0;
}</pre>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Comments"></a>Comments in C help to explain what 
        a program is doing. The syntax is fairly simple:</p>
      <pre>/*This is a comment in the
    C or C++ language*/</pre>
      <pre>void main() { //Comments like these only appear in C++
}</pre>
      <p>The /* */ method works for multiple lines. C++ has a shortcut 
        method, using just //, which is like the single quote from BASIC, and 
        only comments until the end of a line. Mostly I will be using the // comments 
        which are much faster and easier to type.</p>
      <p>ADDEDENUM: It has come to my attention that some new C 
        compilers, espically when bundled with C++ ones, like gcc, will take the 
        // comment method despite not being standard C. You might wish to check 
        your compiler to see if it takes this shortcut, but keep in mind it's 
        not standard C and may not work on ALL compilers.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p align="left"><a name="Output I"></a>Simple output to a 
        text screen is achieved in C through the printf statement and in C++ with 
        cout.</p>
       
        <pre>#include &lt;stdio.h&gt;</pre>
      <pre>int main() {
  printf(&quot;Hello World!\n&quot;);
  return 0; /* this and the int is to get rid of
               the annoying warning most compilers give*/
}</pre>
      <p align="left">If using C++, you can use the above program 
        (REMEMBER: all of C commands work with C++), but C++ allows for an extra 
        feature called cout, which is really a class. Cout will be discussed in 
        depth in a later tutorial.</p>
       
        <pre>#include &lt;iostream.h&gt;</pre>
      <pre>void main() {
  cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;
}</pre>
      <p align="left">An explanation of #include is needed here. 
        C starts with no basic commands, and includes what you use, to include 
        only what files are absolutely necessary to run the program. The file 
        stdio.h has printf and iostream.h (C++ ONLY) has the cout.</p>
      <p align="left">These programs both output the string indicated 
        there with the quotes. As you can notice each line of code ends with a 
        semicolon. Whitespace does not matter in C++ whatsoever between &quot;terms&quot; 
        and theoricially an entire program can be written on each line or an entire 
        program with only one word per line, like this perhaps:</p>
       
        <pre>#include &lt;iostream.h&gt;</pre>
       
        <pre>void main() {
  cout &lt;&lt; &quot;Hello World!&quot;
       &lt;&lt; endl;
}</pre>
      <p align="left">As you can see the line does not really end 
        until the compiler encounters a semicolon. Some programmers prefer to 
        seperate the lines like that on long output statements.</p>
      <p align="left">Some programmers from other languages might 
        recognize the &lt;&lt; and &gt;&gt; as bitwise shifts. This is true when 
        used variables, and this concept will be explained in later lessons.</p>
      <p align="left">Now an explanation how these statements work. 
        Printf is much like print using from BASIC or write from Pascal. The reason 
        why printf is like print using instead of just print will be explaned 
        in the Output II lesson. The endl in the cout and the \n in the printf 
        terminates the line, like what writeln does from Pascal. Each parameter 
        for cout is seperated by &lt;&lt;, in this example the string &quot;Hello 
        World!&quot; and the end-of-line character, endl.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p align="left"><a name="Variables I"></a>Variables in C 
        need to be declared, but unlike Pascal, can be declared at any time during 
        a procedure in C++, but unfortunately in C it must be declared at the 
        beginning of the procedure. The program below shows valid delcarations 
        in C++:</p>
       
        <pre>void main() {
  int c;            //This declares an integer
  c = 50;           //This sets c to 50
  int d = 75;       //Combo declaration and initalization
  float f = 17.235; //A real number type variable
  char g = 'g';     //A character type variable
}</pre>
      <p align="left">However, to do this in C, where the variables 
        have to be first, you must convert the program to this, since all declarations 
        must come before any executable code. This is also good programming style, 
        to always declare variables first anyways, despite the language, however 
        there are times where you only need a variable temporarily for a very 
        short time (such as a for loop described later), where C++'s declarations 
        can come handy. Notice that initalization is not considered executable 
        code -- it is more like &quot;preloaded&quot; into the variable.</p>
       
        <pre>int main() {
  int c;            //This declares an integer
  int d = 75;       //Combo declaration and initalization
  float f = 17.235; //A real number type varaible
  char g = 'g';     //A character type varaible</pre>
       
        <pre>  //Declarations complete, now to executable code:
  c = 50;           //This sets c to 50
}</pre>
      <p>Variables are pretty straight forward and do not need 
        much explanation, but a few notes on variable types. Integers in most 
        compilers can only handle ranges of -2^32 to 2^32, which is roughly +/- 
        2 billion. This is good for most applications but they cannot handle decimals, 
        like float can. Floats can store pretty much any number to a certain accuracy, 
        since they are basically stored like scientific notation. Char variables 
        only hold a letter or an integer between -128 and 127, but notice that 
        characters are in single quotes and not double quotes, which are strings. 
        Strings, despite what BASIC/Pascal lead you to believe, are really arrays 
        of characters, and will be discussed in a later section.</p>
      <p>Any name given to something in C is case-sensitive. Many 
        characters can be used in the names, however most programmers only use 
        the letters, and the underscore, _, for spaces. Numbers can be used in 
        the names, but the name cannot start with one.</p>
      <pre>//Valid Names
 MyFunction
 My_Procedure
 Display600Variables
 ProfitMargin</pre>
      <pre>//Invalid Names
 600Variables</pre>
      <p>Most programmers, when using multiple words in a name, 
        capitalize each word, or use the underscore, _.</p>
      <p>Converting a character to its ASCII value or vice versa 
        is much simpler in C than in BASIC or Pascal, since in reality they are 
        the same thing. Char variables always store a number--it's just that the 
        compiler interprets it as a character. So the two statements below are 
        the EXACT same thing:</p>
      <pre>void main() {
  char x = 65; //ASCII 65 is 'A'
  char g = 'A';//x and g are the same thing now
}</pre>
      <p>Working with varaibles in C is much like any other language:</p>
      <pre>void main() {
  int x = 0; int y = 5; /* Notice multiple commands on one
                           line, since whitespace does not
                           count*/
  x = y; //Some obvious operation examples follow
  x = y + 5;
  x = 500 * 50;
  y = x / 50;
  y = y + 1; //Adds one to y
  x = 10 % 3 //% returns the remainder, in this case x will be 1
}</pre>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Output II"></a>Output with variables with C are 
        a little more complex than in C++. The C++ method will be shown first 
        since it is simpler to understand.</p>
      <pre>#include &lt;iostream.h&gt; //For cout command
void main() {
  int x = 50; int y = 10;
  x = x + y;
  cout &lt;&lt; &quot;The current value of x is: &quot; &lt;&lt; x &lt;&lt; endl;
    //Each part of the output seperated by &lt;&lt;'s
}</pre>
      <p>This is similar to Pascal's writeln statement, which took 
        basically any parameter seperated with commas, except these are just &lt;&lt;'s. 
        BASIC's output is also similar to this. In C this process is a little 
        more like print using from BASIC, and a little more complex:</p>
      <pre>#include &lt;stdio.h&gt; //for printf()</pre>
      <pre>void main() {
  int x = 50; int y = 10;
  x = x * y;
  printf(&quot;The current value of x is: %i\n&quot;, x);
}</pre>
      <p>The printf takes a format string like BASIC's print using. 
        The %i is replaced by the value of x, the first parameter. Extra parameters 
        to printf are passed in the order the variables appear in the format string, 
        for example:</p>
      <p>printf(&quot;The value of x is: %i 
        and the value of y is: %i\n&quot;, x, y);</p>
      <p>There are more format specifiers than %i. These get more 
        complex, but these are the simple and most used ones:</p>
      <p>%i -- outputs an integer<br>
        %f -- outputs a float<br>
        %c -- outputs a character<br>
        %% -- outputs a percent sign instead of a variable</p>
      <p>In addition to the % format specifiers there are special 
        characters which can appear in any string, not just in a printf. These 
        are a few of them:</p>
      <p>\n -- end-of-line character<br>
        \&quot; -- a double quote<br>
        \' -- a single quote</p>
      <p>Throughout the rest of the tutorial I will mostly be using 
        couts, since they are easier to understand. However even for C++ programmers 
        it is important to understand printf, since it is used in many programs 
        and is required in some cases (I use it sometimes to conserve memory and 
        for speed, as cout is slow and requires a lot more memory.)</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Variables II"></a>There are some more complex 
        and shortcut ways to work with variables than specified in Variables I. 
        Also variables can be compared and used in if statements. If statements 
        in C work just like those in BASIC or Pascal but just with a few syntactial 
        changes.</p>
      <pre>#include &lt;iostream.h&gt;</pre>
      <pre>void main() {
  int x = 5;
  int y = 10;
  x *= 5;    //This is the same as x = x * 5;
  x += y;    //Same as x = x + y;
  x %= 3;    //x = x % 3; This shortcut works for all operators,
             //  even the odd ones like %.
  x--;       //This simply subracts 1 from x like x=x-1;
  x++;       //Adds one to x</pre>
      <pre>  if (x &gt; 0) //Let's see what we've done
    cout &lt;&lt; &quot;X is positive&quot;;
  else if (x &lt; 0)
    cout &lt;&lt; &quot;X is negative&quot;;
  else
    cout &lt;&lt; &quot;X is zero&quot;;
  cout &lt;&lt; endl;
}</pre>
      <p>Shortcuts can come in handy, espically the ++ and -- operators, 
        which execute much faster since the CPU has a special increment/decrement 
        operation just for this case. The if statement is not too new to experience 
        programmers, and even the syntax is very similar. Notice that the endl 
        is on its seperate line -- this is not nessacary, but it is faster for 
        the programmer to type and a little less redundant. Notice there are no 
        braces, {}, on the if statements, but that is because they are only one 
        line long (remember a line is defined as a semi-colon NOT with the enter 
        key!) But if a more complex structure is needed the syntax is not much 
        different:</p>
      <pre>void main() {
  int x = 50; int y = x + 10;
  if (x &gt; 10) {
    cout &lt;&lt; &quot;X is over 10&quot;;
    y = x;
  }
}</pre>
      <p>The only thing needed for multiple statements is the braces.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <hr>
      <p><a name="Input I"></a>Input in C is difficult and personally 
        I don't use it over cin from C++, however both topics will be covered 
        here. Cin will be covered first again due to simplicity.</p>
      <pre>#include &lt;iostream.h&gt;</pre>
      <pre>void main() {
  int x;
  cout &lt;&lt; &quot;Enter an integer: &quot;;
    //endl not needed since cin will end it when the user
    //presses the enter key
  cin &gt;&gt; x; //Notice the opposite direction of the operator
  if (x &lt; 0)
    cout &lt;&lt; &quot;You entered a negative integer!&quot; &lt;&lt; endl;
}</pre>
      <p>The biggest point of this program is cin, and the different 
        operators. Cout uses the insertion operator &lt;&lt;, while cin uses the 
        extraction operator, &gt;&gt;. Really these are operators like + or - 
        in C++, but are used only with classes. The names for the operators come 
        from the fact that in C++, cout and cin are streams, and the data is &quot;inserted&quot; 
        to or &quot;extracted&quot; from the stream. However, in C the input is 
        a little changed.</p>
      <pre>#include &lt;stdio.h&gt;</pre>
      <pre>void main() {
  int x; char f;
  printf(&quot;Enter an integer: &quot;);
  scanf(&quot;%i&quot;, &amp;x);
  if (x &lt; 0)
    printf(&quot;You entered a negative integer!\n&quot;);
}</pre>
      <p>Notice that scanf, which reads data from the keyboard, 
        is much like printf and needs format specifiers, which is why C input/output 
        is harder than cin/cout with C++. Also notice the &amp; in front of the 
        variable name, which is NOT part of the name. What this does is send a 
        pointer to the variable to the function so it can modify it. Pointers 
        are an advanced topic and will be discussed in a much later section.</p>
      <p>Multiple input can be entered on one line but it is not 
        reccomended since it is confusing for the user, but in C++ the data should 
        be entered with a space between each variable.</p>
      <p>cout &lt;&lt; &quot;Enter two integers 
        seperated by spaces: &quot;;<br>
        cin &gt;&gt; x1 &gt;&gt; x2; //The user should enter something like 50 
        90</p>
      <p>In C it gets a little more complicated:</p>
      <p>printf(&quot;Enter two integers seperated 
        by spaces: &quot;);<br>
        scanf(&quot;%i %i&quot;, &amp;x1, &amp;x2);</p>
      <p>Notice again how scanf works like printf.</p>
      <p align="center"><a href="index.htm#TOC"><strong>Back To 
        Top</strong></a></p>
      <p align="center"><a href="part2.htm"><strong>Move onto the 
        first section of part 2</strong></a></p>
      <p>&nbsp;</p>
      <!-- #EndEditable --></td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>

