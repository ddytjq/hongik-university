ID=E0893
URL=http://www.rit.edu/~jpw9607/gne/html/classGNE_1_1PingPacket.html
SIZE=15714
DATE=12/07/02
TIME=19:25:32
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE::PingPacket class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE::PingPacket  Class Reference</h1>Using the <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> is one way to measure ping. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PingPacket_8h-source.html">PingPacket.h</a>&gt;</code>
<p>
<p>Inheritance diagram for GNE::PingPacket::
<p><center><img src="classGNE_1_1PingPacket.gif" usemap="#GNE::PingPacket_map" border="0"></center>
<map name="GNE::PingPacket_map">
<area href="classGNE_1_1Packet.html" alt="GNE::Packet" shape="rect" coords="0,0,107,24">
</map>
<a href="classGNE_1_1PingPacket-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a0">PingPacket</a> (bool makeReq=true)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Creates a <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> with a preassigned request ID which is pulled from an internal source.</em> <a href="#a0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a1" doxytag="GNE::PingPacket::~PingPacket"></a>
virtual&nbsp;</td><td valign=bottom><b>~PingPacket</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a2" doxytag="GNE::PingPacket::isRequest"></a>
bool&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a2">isRequest</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Is this <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> a ping request?</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a3">makeReply</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Changes this <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> from a ping request to a ping reply.</em> <a href="#a3">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a class="el" href="classGNE_1_1Time.html">Time</a>&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a4">getPing</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>If this packet is a ping reply that is from one of our requests, this finds the time elapsed since its creation.</em> <a href="#a4">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a5" doxytag="GNE::PingPacket::makeClone"></a>
virtual <a class="el" href="classGNE_1_1Packet.html">Packet</a> *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a5">makeClone</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns a newly allocated exact copy of this packet.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a6" doxytag="GNE::PingPacket::getSize"></a>
virtual int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a6">getSize</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the current size of this packet in bytes.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a7" doxytag="GNE::PingPacket::writePacket"></a>
virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a7">writePacket</a> (<a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;raw) const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Writes the packet to the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a8" doxytag="GNE::PingPacket::readPacket"></a>
virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#a8">readPacket</a> (<a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;raw)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Reads this packet from the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#d0">recoverLostRequests</a> (<a class="el" href="classGNE_1_1Time.html">Time</a> limit)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Every time you create a packet, the request ID is placed into a request table so that the time difference can be measured later.</em> <a href="#d0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#d1">reqsPending</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the number of pending requests.</em> <a href="#d1">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="d2" doxytag="GNE::PingPacket::create"></a>
<a class="el" href="classGNE_1_1Packet.html">Packet</a> *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#d2">create</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns a new instance of this class using the constructor to pass in false, so this returns an object in an uninitialized state and suitable only to call readPacket on.</em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="p0" doxytag="GNE::PingPacket::ID"></a>
const int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1PingPacket.html#p0">ID</a> = 4</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The ID for this type of packet.</em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Using the <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> is one way to measure ping.
<p>
Other methods exist to find ping and latency (latency is one-way time, whereas ping is two-way). You could use other methods depending on if data sent in the game is an implied response (and therefore a "built-in" ping), or if the peers are time-syncronized and timestamps are sent on game packets this can be used to measure latency with every incoming packet.
<p>
So <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> is just a very simple system of measuring ping and is handy for measuring ping while connecting, or when making a simple "query" connection like when a client is just trying to get game info. Ping capability was not integrated into the <a class="el" href="classGNE_1_1Connection.html">Connection</a> class to give you the largest flexibility on how to measure latency and ping in your games.
<p>
Since the PingPackets will be placed into the queue and received as normal, this will be measuring effective ping rather than the actual time it takes for the packet to travel there and back, giving a more realistic view of lag.
<p>
The way to use PingPackets: <ul>
<li>Create a new <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a>. The constructor will make a ping request with the proper unique request ID. <li>Send the packet to whoever you want, any way you want. <li>When reading the incoming packet stream, check for PingPackets.<br>
 Discover if they are requests or replies by calling isRequest.<br>
 If they are requests, call makeReply and send it back.<br>
 If they are replies, call getPing to measure the round trip time. <li>If you send packets over an unreliable connection, call recoverLostRequests to declare late packets as "lost" and recover any used memory in the request table. </ul>
Check out the exping example for an example and more explaination on how to use <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a>. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a name="a0" doxytag="GNE::PingPacket::PingPacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> GNE::PingPacket::PingPacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">bool&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>makeReq</em> = true          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates a <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> with a preassigned request ID which is pulled from an internal source.
<p>
Only ping requests are made using the constructor -- you should use getReply when you get a ping request to make the ping response packet. The <a class="el" href="classGNE_1_1PingPacket.html#d2">PingPacket::create</a> function passes in false to get an uninitalized <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> for reading. You will probably only ever use the default form of the constructor. If you pass false, the state of this object is undefined after creation and is suitable only to use readPacket on.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a name="a4" doxytag="GNE::PingPacket::getPing"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="classGNE_1_1Time.html">Time</a> GNE::PingPacket::getPing </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
If this packet is a ping reply that is from one of our requests, this finds the time elapsed since its creation.
<p>
Calling this function will remove the request ID from the request table, so this function will only work once for each reply. If the request ID was not found, then an elapsed time of 0 will be returned.     </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::PingPacket::makeReply"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::PingPacket::makeReply </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Changes this <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> from a ping request to a ping reply.
<p>
If the <a class="el" href="classGNE_1_1PingPacket.html">PingPacket</a> is already a reply, this function has no net effect.     </td>
  </tr>
</table>
<a name="d0" doxytag="GNE::PingPacket::recoverLostRequests"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::PingPacket::recoverLostRequests </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1Time.html">Time</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>limit</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Every time you create a packet, the request ID is placed into a request table so that the time difference can be measured later.
<p>
This takes up some memory. It is possible that a ping reply is never received, espically if sending PingPackets over an unreliable connection. This function will remove any packets that have been pending for longer than the time specified. It will return the number of packets that were considered lost based on the specified pending time limit and remove these requests from the table. If a reply for one of these lost requests comes back, getPing will be unable to find them and return an elapsed time of 0.
<p>
When <a class="el" href="namespaceGNE.html">GNE</a> is shutdown the request table will be cleared out so you don't have to ever call this function unless you want to find out how many more packets have been lost, or if you want to free some memory.     </td>
  </tr>
</table>
<a name="d1" doxytag="GNE::PingPacket::reqsPending"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::PingPacket::reqsPending </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the number of pending requests.
<p>
This number increases by 1 every time a request is made, and goes down by one with a successful call to getPing. The number will also decrease if recoverLostReqests is called and finds late requests.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="PingPacket_8h-source.html">PingPacket.h</a><li>PingPacket.cpp</ul>
<hr><address><small>Generated on Fri Mar 8 03:03:23 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

