ID=E0929
URL=http://www.rit.edu/~jpw9607/gne/html/classGNE_1_1CustomPacket.html
SIZE=15092
DATE=12/07/02
TIME=19:25:54
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>GNE::CustomPacket class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body bgcolor="#ffffff">
<!-- Generated by Doxygen 1.2.13.1 -->
<center>
<a class="qindex" href="main.html">Main Page</a> &nbsp; <a class="qindex" href="namespaces.html">Namespace List</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="namespacemembers.html">Namespace Members</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; <a class="qindex" href="pages.html">Related Pages</a> &nbsp; </center>
<hr><h1>GNE::CustomPacket  Class Reference</h1>Many times, espically during connection, you want to send some more "free-form" data that may or may not all be related and will only be sent once. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="CustomPacket_8h-source.html">CustomPacket.h</a>&gt;</code>
<p>
<p>Inheritance diagram for GNE::CustomPacket::
<p><center><img src="classGNE_1_1CustomPacket.gif" usemap="#GNE::CustomPacket_map" border="0"></center>
<map name="GNE::CustomPacket_map">
<area href="classGNE_1_1Packet.html" alt="GNE::Packet" shape="rect" coords="0,0,123,24">
</map>
<a href="classGNE_1_1CustomPacket-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td colspan=2><br><h2>Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="a0" doxytag="GNE::CustomPacket::CustomPacket"></a>
&nbsp;</td><td valign=bottom><b>CustomPacket</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a1" doxytag="GNE::CustomPacket::~CustomPacket"></a>
virtual&nbsp;</td><td valign=bottom><b>~CustomPacket</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#a2">getData</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> for reading or writing.</em> <a href="#a2">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#a3">reset</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>This method resets the underlying data, and prepares it for write access.</em> <a href="#a3">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual <a class="el" href="classGNE_1_1Packet.html">Packet</a> *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#a4">makeClone</a> () const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns a newly allocated exact copy of this packet.</em> <a href="#a4">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#a5">getSize</a> () const</td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#a6">writePacket</a> (<a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;raw) const</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Writes the packet to the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a6">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top>virtual void&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#a7">readPacket</a> (<a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;raw)</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Reads this packet from the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.</em> <a href="#a7">More...</a><em></em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Methods</h2></td></tr>
<tr><td nowrap align=right valign=top>int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#d0">getMaxUserDataSize</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns the maximum possible size of the user's data in this packet.</em> <a href="#d0">More...</a><em></em></font><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="d1" doxytag="GNE::CustomPacket::create"></a>
<a class="el" href="classGNE_1_1Packet.html">Packet</a> *&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#d1">create</a> ()</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>Returns a new instance of this class.</em></font><br><br></td></tr>
<tr><td colspan=2><br><h2>Static Public Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="p0" doxytag="GNE::CustomPacket::ID"></a>
const int&nbsp;</td><td valign=bottom><a class="el" href="classGNE_1_1CustomPacket.html#p0">ID</a> = 1</td></tr>
<tr><td>&nbsp;</td><td><font size=-1><em>The ID for this type of packet.</em></font><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Many times, espically during connection, you want to send some more "free-form" data that may or may not all be related and will only be sent once.
<p>
It may not make sense to create a completely new packet type just to send a few things one time. This packet type will allow you to send whatever you want. Basically, <a class="el" href="classGNE_1_1CustomPacket.html">CustomPacket</a> is just a packet that contains a <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>. You can use the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> to put in data and pull it out. Remember <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> does endian and processor-type conversions for you.<br>
 See the documentation for <a class="el" href="classGNE_1_1Packet.html">Packet</a> for more info on some of these functions. 
<p>
<hr><h2>Member Function Documentation</h2>
<a name="a2" doxytag="GNE::CustomPacket::getData"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp; GNE::CustomPacket::getData </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> for reading or writing.
<p>
If a <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> already exists through a call to getData or by a readPacket call, this method will create a new <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> ready for writing.<br>
 This <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> will last until this object is destroyed or readPacket is called.     </td>
  </tr>
</table>
<a name="d0" doxytag="GNE::CustomPacket::getMaxUserDataSize"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::CustomPacket::getMaxUserDataSize </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the maximum possible size of the user's data in this packet.
<p>
Use this value rather than <a class="el" href="classGNE_1_1RawPacket.html#p0">RawPacket::RAW_PACKET_LEN</a>. The value returned is the maximum size the hosted <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> can be.     </td>
  </tr>
</table>
<a name="a5" doxytag="GNE::CustomPacket::getSize"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int GNE::CustomPacket::getSize </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>
See also: </b><dd>
<a class="el" href="classGNE_1_1Packet.html#a4">Packet::getSize</a>() </dl>
<p>
Reimplemented from <a class="el" href="classGNE_1_1Packet.html#a4">GNE::Packet</a>.    </td>
  </tr>
</table>
<a name="a4" doxytag="GNE::CustomPacket::makeClone"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="classGNE_1_1Packet.html">Packet</a> * GNE::CustomPacket::makeClone </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns a newly allocated exact copy of this packet.
<p>
Due to the nature of <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> not knowing its size on reading (this should be inferred by the packet types in it), this only copies the data up to the current position. So makeClone works perfectly on packets that are being used for writing, but only clones the data read so far on packets that are being used for reading.<br>
 Since makeClone is used by <a class="el" href="namespaceGNE.html">GNE</a> when sending packets, the RawPackets were just used for writing this function works acceptably. 
<p>
Reimplemented from <a class="el" href="classGNE_1_1Packet.html#a2">GNE::Packet</a>.    </td>
  </tr>
</table>
<a name="a7" doxytag="GNE::CustomPacket::readPacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::CustomPacket::readPacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>raw</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reads this packet from the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
The data in this packet will be destroyed and replaced by the new data. 
<p>
Reimplemented from <a class="el" href="classGNE_1_1Packet.html#a6">GNE::Packet</a>.    </td>
  </tr>
</table>
<a name="a3" doxytag="GNE::CustomPacket::reset"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::CustomPacket::reset </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp;          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This method resets the underlying data, and prepares it for write access.
<p>
Essentially, this method "recreates" the <a class="el" href="classGNE_1_1CustomPacket.html">CustomPacket</a> instance.     </td>
  </tr>
</table>
<a name="a6" doxytag="GNE::CustomPacket::writePacket"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void GNE::CustomPacket::writePacket </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>&nbsp; <em>raw</em>          </td>
          <td class="md" valign="top">)&nbsp;</td>
          <td class="md" nowrap> const<code> [virtual]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Writes the packet to the given <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a>.
<p>
The <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> data should only have been used for writing since its creation or its last reset, since the length of the <a class="el" href="classGNE_1_1RawPacket.html">RawPacket</a> is needed, and this is only known to RawPackets used for writing only. 
<p>
Reimplemented from <a class="el" href="classGNE_1_1Packet.html#a5">GNE::Packet</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="CustomPacket_8h-source.html">CustomPacket.h</a><li>CustomPacket.cpp</ul>
<hr><address><small>Generated on Fri Mar 8 03:03:22 2002 for GNE by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.gif" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.2.13.1 written by <a href="mailto:dimitri@stack.nl">Dimitri van Heesch</a>,
 &copy;&nbsp;1997-2001</small></address>
</body>
</html>

