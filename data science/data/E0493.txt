ID=E0493
URL=http://www.research.att.com/~bs/3rd_printing11.html
SIZE=14908
DATE=12/07/02
TIME=19:21:32
DATASET=C
HTML=<html>
<head>
<title>Stroustrup: Errata for 9th and 10th printings of The C++ Programming Language</title>
</head>
<body bgcolor="FFFBFB">
<center>
<h1>Errata for 9th and 10th printings of The C++ Programming Language</h1>
</center>
Errata for
<a href="homepage.html">
Bjarne Stroustrup</a>:
<a href="3rd.html">
The C++ Programming Language (3rd edition)</a>,
Addison-Wesley, 1997. ISBN0-201-88954-4.
Errata for the 9th and 10th printings.
<hr>
<h2>Errors and Clarifications</h2>
<p>
Preface:
<p>
Chapter 1:
<p>
pg 10	s/C is retained as a subset./Except for closing a few
	serious loopholes in the type system (see Appendix B),
	C is retained as a subset./
<p>
pg 11	s/A formally approved international C++ standard is expected in 1998./
	The ISO C++ standard (ISO/IEC 14882) was ratified in 1998./
<p>
Chapter 2:
<p>
Chapter 3:
<p>
pg 61	s/!is.eof() &&/!is.eof() ||/
<p>
Chapter 4:
<p>
pg 74	Clarification: Replace the last paragraph of 4.5 by:

	"If you want a floating-point literal of type float,
	you can define one using the suffix f or F:
<pre>
	3.14159265f    2.0f    2.997925F    2.9e-3f
</pre>
	If you want a floating-point literal of type long double,
	you can define one using the suffix l or L:
<pre>
	3.14159265L    2.0L    2.997925L    2.9e-3L
</pre>
<p>
Chapter 5:
<p>
pg 90	s/character literals/string literals/
<p>
Chapter 6:
<p>
pg 124:	Replace the first paragraph of 6.2.4 by:
	"The bitwise logical operators &, |, ^, ~, >>, and  <<
	are applied to objects of integral types and enumerations - that is,
	bool, char, short, int, long, unsigned counterparts, and enums.
	The usual arithmetic conversions (C.6.3) are performed to determine
	the type of the result."
<p>
pg 131	s/undefined behavior./nonportable implementation-defined behavior./
<p>
Chapter 7:
<p>
pg 149	move "double to long double" from promotions to stndard conversions
<p>
Chapter 8:
<p>
pg 180	The definition of My_lib::my_fct() should be:
<pre>
	void My_lib::my_fct(String& v)	// ok; String is My_lib::String meaning His_string::String 
	{
		// ...
	}
</pre>
<p>
pg 183	replace
<pre>
	#include< cstdio>
	using namespace std;;
</pre>
with
<pre>
	#include< cstdio>
	using std::printf;
	// ...
</pre>
<p>
pg 193	s/std::cin/&std::cin/
<p>
Chapter 9:
<p>
pg 219	s/The destructor of an object created before/
	The destructor of a constructed statically allocated object
	(a global, function static, or a class static) created before/
<p>
Chapter 10:
<p>
Chapter 11:
<p>
pg 272	s/An object constructed by explicit or implicit use of a constructor
	is automatic/An object constructed by explicit or implicit use of a
	constructor in an expression is automatic/
<p>
pg 282	clarification:
	s/ impose./impose (access through a pointer is can be relatively expensive)./
<p>
pg 283	/const max_matrix_temp = 7;/const int max_matrix_temp = 7;/
<p>
pg 284	Clarification: Replace the first paragraph of 11.7.1 by
<p>
	"By default, a single argument constructor also defines an
	implicit conversion. For some types, that is ideal.
	For example, a complex can be initialized with an int:
<pre>
		complex z = 2;	// initialize z with complex(2)
</pre>
	In other cases, the implicit conversion is undesirable and
	error-prone. For example, if we could initialize a string
	with an int size someone could write:
<pre>
		string s = 'a';	// make s a string with int('a') elements
</pre>
	It is quite unlikely that this was what the person defining s
	meant."
<p>
pg 286	s/const string&/string&/ twice
<p>
pg 286	s/const_iterator/iterator/
<p>
pg 288	s/Iter for_each(/Fct for_each(/
<p>
pg 290	s/24.2.4/24.3.6/
<p>
pg 300	s/as if y and p/as if x and p/
<p>
Chapter 12:
<p>
Chapter 13:
<p>
pg 333	s/a pointer T*/a pointer Link*/
<p>
pg 342	s/interface to void*/interface to Vector< void*>/
<p>
pg 347	s/13.2.3/C.13.3/
<p>
Chapter 14:
<p>
pg 365	s/{ fclose(p); }/{ if (p) fclose(p); }/
<p>
pg 387 s/[9] Avoid throwing exceptions from copy constructors; 14.4.6.1/
	/[9] Leave operands in valid states before throwing an exception
	from an assignment; 14.4.6.1./
<p>
Chapter 15:
<p>
pg 395	simpler first code fragment:
<pre>
	p->Task::next = 0;	// ok
	p->Displayed::next = 0;	// ok

</pre>
<p>
pg 395	the destructor should be plain:
<pre>
	virtual ~Storable() { }
</pre>
<p>
pg 416:	s/hash_map< type_info*,/hash_map< const type_info*,/
<p>
pg 423	s/,size_t)/)/
<p>
Chapter 16:
<p>
pg 432	s/< cwtype>/< cwctype>/
<p>
Chapter 17:
<p>
pg 474	s/16.3.6)/16.3.6) except capacity() and reserve()/
<p>
pg 482:	a better illustration:
<pre>
	pair< int,double> f(char c, int i)
	{
		pair< char,int> x(c,i);
		// ...
		return x;	// pair< char,int> to pair< int.double> conversion required
	}
</pre>
<p>
pg 489	replace "Erasing end() is harmless." by
	"A call m.erase(b,e) where e is m.end() is harmless (provided
	b refers to an element of m or is m.end()). However, a call
	m.erase(p) where p is m.end()
	is a serious error that could corrupt the container."
<p>
pg 492	s/pow(i,2)/pow(2,i)
<p>
pg 501	s/(b.size()*max_load <= v.size())/(size_type(b.size()*max_load) <= v.size())/
<p>
pg 500	s/hash_map::/hash_map< Key,T,H,EQ,A>::/
<p>
pg 502	s/hash_map::/hash_map< Key,T,H,EQ,A>::/ twice
<p>
pg 502	s/b.clear()/fill(b.begin(),b.end(),(Entry*)0);/
<p>
pg 503	better:
<pre>
typedef char* Pchar;
template< > size_t Hash< Pchar>::operator()(const Pchar& key) const
{
	size_t res = 0;
	const char* p = key;
	while (*p) res = (res<<1)^*p++;	// use int value of characters
	return res;
}
</pre>
<p>
Chapter 18:
<p>
pg 513	s/iterator_type/iterator/ twice
<p>
pg 519	s/first_argument_type& x/argument_type& x/
<p>
pg 520	better:
<pre>
template < class T> struct less_than : public binder2nd< less< T> > {
	explicit less_than(const T& x) : binder2nd< less< T> >(less< T>(),x) { }
};
</pre>
<p>
pg 528	better:
<pre>
bool in_quote(const string& s)
{
	typedef string::const_iterator I;
	I p = search(quote.begin(),quote.end(),s.begin(),s.end());	// find s in quote
	return p!=quote.end();	
}
</pre>
<p>
pg 530	s/output_iterator/ostream_iterator/
<p>
pg 531	replace identity example by:
<pre>
template< class T> T identity(const T& x) { return x; }

template< class In, class Out> Out ccopy(In first, In last, Out res)
{
	return transform(first,last,res,identity< iterator_traits< In>::value_type>);	// see sec19.2.2
}
</pre>
The the explicit qualification of identity
is needed to get a specific function from the function template.
The iterator_traits template (19.2.2) is used to get In's element type.
<p>
pg 531	replace the delete_ptr example by
<pre>
struct Delete_ptr {	// use function object to get inlining
	template< class T> T* operator()(T* p) { delete p; return 0; }
};

void purge(deque< Shape*>& s)
{
	transform(s.begin(),s.end(),s.begin(),Delete_ptr());
}
</pre>
<p>
pg 537	s/generate(v2,&v2[900],Randint)/generate(v2,&v2[900],Randint())/
<p>
pg 545	s/ lexicographical_compare(s1.begin(),s1.end(),v1,v1+strlen(v1),Nocase)/
	lexicographical_compare(s1.begin(),s1.end(),v1,v1+strlen(v1),Nocase())/
<p>
Chapter 19:
<p>
pg 551	s/void advance(In i, Dist n)/void advance(In& i, Dist n)/
<p>
pg 556	s/vi+vi.size()/vi.begin()+vi.size()/
<p>
pg 563	s/c->begin()-curr/curr-c->begin()/ twice
<p>
pg 565	s/typename C::// five times
<p>
pg 565	s/,lst.end()//
<p>
pg 566	Improved version of g():
<pre>
	void g(vector< int>& vi)
	{
		Checked_iter< vector< int> > p(vi,vi.begin());
		// ..
		int i = p.index();					// get current position
		vi.resize(100);						// p becomes invalid
		p = Checked_iter< vector< int> >(vi,vi.begin()+i);	// restore current position
	}
</pre>
<p>
pg 568	s/is const void* for all standard allocators./is void* for all standard allocators./
<p>
pg 569	s/typename A::template rebind/typename A::rebind/
<p>
pg 570	A better Chunk:
<pre>
	struct Chunk {
		enum { size = 8*1024-16 };	// slightly less than 8K so that a chunk will fit in 8K
		char mem[size];			// allocation area first to get stringent alignment
		Chunk* next;
	};
</pre>
<p>
Chapter 20:
<p>
pg 595	s/range_error/out_of_range/
<p>
pg 597	s/range_error/out_of_range/
<p>
pg 601	s/< cwtype>/< cwctype>/
<p>
pg 601	s/< wtype.h>/< wctype.h>/
<p>
pg 602	s/range_error/length_error/
<p>
Chapter 21:
<p>
pg 609	After the first code segment, add:
	"Class basic_ios prohibits copy construction and assignment (11.2.2).
	This implies that ostreams and istreams cannot be copied.
	Therefore, if you need to change the target of a stream you must
	either change stream buffers (21.6.4) or indirect through a pointer
	(11.2.2)."
<p>
pg 610	s/cerr.operator<<("x = ").operator<<(x)/operator<<(cerr,"x = ").operator<<(x)/
<p>
pg 617	s/a null operation./a null operation as far as the variable being read into is concerned./
<p>
pg 622	s/ios_base::clear()/clear()/
<p>
pg 622	/ios_base member exceptions()/basic_ios member exceptions()/
<p>
pg 626	s/floatfield;/floatfield,/
<p>
pg 626	s/fmtflags unitbuf;/unitbuf;/
<p>
pg 626	replace the definition of the two-argument version of fmtflags with
<pre>
	// clear and set flags in mask:
	fmtflags setf(fmtflags f, fmtflags mask) { return flags((flags()&~mask)|(f&mask)); }
</pre>
<p>
pg 630	s/bitfield/bitset/
<p>
pg 633	s/cout::setprecision(n)/cout.precision(n)/
<p>
pg 633	s/s.setprecision(n)/s.precision(n)/
<p>
pg 634	s/put '\0' and flush/put '\0'/
<p>
pg 634	s/n digits after decimal point/n digits (21.4.3)/
<p>
pg 636	/Bound_form Form::operator()(double d)/Bound_form Form::operator()(double d) const /
<p>
pg 644	s/charT,traits/Ch,Tr/ twice
<p>
pg 646	Move "basic_streambuf();" to the protected interface on page 647
<p>
pg 650	s/cin.imbue(std::locale::global())/cin.imbue(std::locale())/
<p>
Chapter 22:
<p>
pg 671	s/v_even = d[slice(0,d.size()/2+d.size()%2,2)]/v_even = d[slice(0,d.size()/2,2)]/
<p>
pg 673	s/slice(i,d1,d2)/slice(i,d2,d1)/ thrice
<p>
pg 674	s/mul(const valarray/mul(Cslice_iter/
<p>
pg 674	s/res(i)] = mul(m.row(i),v)/res[i] = mul(m.row(i),v)/
<p>
pg 685	the correct declaration of srand is():
<pre>
void srand(unsigned int i);	// seed random number generator by i
</pre>
<p>
Chapter 23:
<p>
Chapter 24:
<p>
pg 757	s/Iter_for_T> print_all(Iter_for_T/Iter_for_T> void print_all(Iter_for_T/
<p>
Chapter 25:
<p>
pg 772	s/virtual add_fuel/virtual void add_fuel/
<p>
pg 773	s/virtual dispatch_to/virtual void dispatch_to/
<p>
pg 777	add a constructor to Error_response:
<pre>
	Error_response(const string& s) :message(s) { }
</pre>
<p>
Appendix A:
<p>
Appendix B:
<p>
pg 825	/enumeration values to ints/ints to enumerations/
<p>
Appendix C:
<p>
pg 829	s/??? ?//
<p>
pg 832	s/undefined/implementation defined/ 4 times in comments
<p>
pg 834	s/Plausible results are 255 and -1/Plausible results are 127 and -1/
<p>
pg 855	Add < > to friend names:
.P1
<pre>
template <class C> class Basic_ops {	// basic operators on containers
	friend bool operator==<>(const C&, const C&);	// compare elements
	friend bool operator!=<>(const C&, const C&);
	// ...
};
</pre>
<p>
pg 856	s/Like a member, a friend declared within a template is itself a
	template and is defined using the template parameters of its class./
	The <> after the function names indicates that these friend functions
	are supposed to be template functions./ (late standards change)
<p>
pg 863	replace the bottom example by
<pre>
template< class T> void sort(vector< T>& v)
{
	sort(v.begin(),v.end());	// use standard library sort() (without explicitly saying std::)
}

class Container {
	vector< int> v;	// elements
public:
	void sort()	// sort elements
	{
		::sort(v);	// sort(vector< int>&) which calls std::sort() rather than Container::sort()
	}	
	// ...
};
</pre>
Had sort(vector< T>&) called sort() using the std::sort()
notation, the result would have been the same and the code would
have been clearer.

<p>
pg 867	advice [5]:
	Use keywords and digraphs to represent programs on systems where
	{, }, [, ], |, or ! are missing and trigraphs if \ is missing; C.3.1.
<p>
<hr>
<h2>Typos</h2>
<p>
Preface:
<p>
Chapter 1:
<p>
pg 2	s/Isac/Isak/
<p>
pg 17	s/Eric/Erich/
<p>
Chapter 2:
<p>
Chapter 3:
<p>
Chapter 4:
<p>
Chapter 5:
<p>
pg 100	s/A pointer of any type/A pointer to any type/
<p>
Chapter 6:
<p>
Chapter 7:
<p>
pg 214	s/#include statements for/#include directive for/
<p>
Chapter 8:
<p>
pg 187	s/Range_Error/Range_error/
<p>
Chapter 9:
<p>
pg 202	s/compliers/compilers/
<p>
Chapter 10:
<p>
pg 255 s/``its'' reference or named object go out/``its'' reference or named object goes out/
<p>
Chapter 11:
<p>
pg 298	s/operator+(int)/X operator+(int)/
<p>
pg 298	s/operator+(X)/Y operator+(X)/
<p>
Chapter 12:
<p>
pg 318	s/Data is better kept private/Data members are better kept private/
<p>
pg 325	s/of a of a/of a/ in 12.7[2]
<p>
Chapter 13:
<p>
Chapter 14:
<p>
Chapter 15:
<p>
pg 409	s/A dynamic_cast requires a pointer or reference to a
   	polymorphic type to do a downcast or a crosscast./
	A dynamic_cast requires a pointer or reference to a
   	polymorphic type in order to do a downcast or a crosscast./
<p>
pg 426	s/keywords you can/keywords as you can/ in 15.8[7]
<p>
pg 426	s/overwrite a Base*/override a Base*/
<p>
Chapter 16:
<p>
pg 460	s/(3)/(c) in 16.5[10]
<p>
Chapter 17:
<p>
Chapter 18:
<p>
pg 516 s/Alternatively, we could pesent/Alternatively, we could present/
<p>
pg 526	s/int*::/const char*::/
<p>
Chapter 19:
<p>
pg 561	s/3.7.1/3.7.2/
<p>
pg 572	s/rebind()/rebind/
<p>
Chapter 20:
<p>
pg 598	s/expanding string as needed/expanding the string as needed/
<p>
pg 602	s/to localize values in a string/to locate values in a string/
<p>
pg 602	s/(possibly empty) parenthesized sequences/(possibly empty)
	parenthesized sequence/
<p>
Chapter 21:
<p>
pg 618	s/at at/at/
<p>
pg 622	s/so an input operation didn't return a value from the stream./
	so that an input operation wouldn't return a value from the stream./
<p>
pg 627	s/mystream/myostream/
<p>
pg 634	s/n digits after decimal point/n digits (21.4.3, 21.4.6.1)/
<p>
pg 635	s/std::// and add "using namespace std;"
<p>
pg 643	s/are created/is created/
<p>
pg 651	s/When the the state/When the state/
<p>
pg 654	s/textural/textual/
<p>
Chapter 22:
<p>
pg 686	s/10,000/100,000/
<p>
Chapter 23:
<p>
pg 700	s/indeed a to be desirable aim/indeed to be a desirable aim/
<p>
Chapter 24:
<p>
pg733	s/24.2.4/24.3.6/
<p>
Chapter 25:
<p>
Appendix A:
<p>
pg 810	in base-specifier: "virtual" is in the wrong font twice
<p>
Appendix B:
<p>
Appendix C:
<p>
pg 866	s/vector::sort()/List::sort()/
<p>
</body>
</html>


