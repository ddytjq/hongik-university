ID=E0210
URL=http://www.le.ac.uk/cc/iss/tutorials/cprog/ccccvar1.html
SIZE=15224
DATE=12/07/02
TIME=19:18:39
DATASET=C
HTML=<!-- Filename: ccccvar1.html -->
<!-- Author: mc39/rjm1 -->
<!-- Supplied by: Richard Mobbs -->
<!-- Created: 24-08-95 -->
<!-- Expires: 24-08-96 -->

<HTML>

<HEAD>

<TITLE>Computer Centre: Introduction to C programming Course</TITLE>

</HEAD> 

<BODY>

<H1><IMG ALT="[CWC logo]" ALIGN=middle SRC="http://www.le.ac.uk/images/compcen.gif" > Data Types</H1>


<HR>
<H2>Objectives</H2>
<P>Having read this section you should be able to:
<OL>
<LI>declare (name) a local variable as being one of C's five data types
<LI>initialise local variables
<LI>perform simple arithemtic using local variables
</OL>
<HR>
<P>

Now we have to start looking into the details of the <B>C</B> language. How easy you find the rest of this section will depend on whether you have ever programmed before - no matter what the language was. There are a great many ideas common to programming in any language and <B>C</B> is no exception to this rule.

<P>So if you haven't programmed before, you need to take the rest of this section slowly and keep going over it until it makes sense. If, on the other hand, you have programmed before you'll be wondering what all the fuss is about It's a lot like being able to ride a bike!

<P>The first thing you need to know is that you can create <I>variables</I> to store <I>values</I> in. A variable is just a named area of storage that can hold a single value (numeric or character). <B>C</B> is very fussy about how you create variables and what you store in them. It demands that you declare the name of each variable that you are going to use and its <I>type</I>, or <I>class</I>, before you actually try to do anything with it.

<P>In this section we are only going to be discussing <I>local</I> variables. These are variables that are used within the current program unit (or function) in a later section we will looking at <I>global</I> variables - variables that are available to all the program's functions.

<P>
<HR>
<P>

There are five basic data types associated with variables:<P>

<UL>
<LI><B>int</B> - integer: a whole number.
<LI><B>float</B> - floating point value: ie a number with a fractional part.
<LI><B>double</B> - a double-precision floating point value.
<LI><B>char</B> - a single character.
<LI><B>void</B> - valueless special purpose type which we will examine closely in later sections.
</UL>

One of the confusing things about the <B>C</B> language is that the range of values and the amount of storage that each of these types takes is not defined. This is because in each case the 'natural' choice is made for each type of machine.You can call <I>variables</I> what you like, although it helps if you give them sensible names that give you a hint of what they're being used for - names like <TT>sum</TT>, <TT>total</TT>, <TT>average</TT> and so on. If you are translating a formular then use variable names that reflect the elements used in the formula. For example, <TT>2&188;r</TT> (that should read as &QUOT;2 pi r&QUOT; but that depends upon how your browser has been set-up) would give local variables names of <B><TT>pi</TT></B> and <B><TT>r</TT></B>. Remember, <B>C</B> programmers tend to prefer short names!

<P><B>Note:</B> <I>all <B>C</B>'s variables must begin with a letter or a &QUOT;_&QUOT; (underscore) character</I>.

<P>
<HR>
<P>
<A NAME="IN"></A>

<H3>Integer Number Variables</H3>

The first type of variable we need to know about is of class type  <B><TT>int</TT></B> - short for integer. An <B><TT>int</TT></B> variable can store a value in the range -32768 to +32767. You can think of it as a largish positive or negative whole number: no fractional part is allowed. To declare an <B><TT>int</TT></B> you use the instruction:<P>

<B><TT>int <I>variable name</I>;</TT></B><P>

For example:<P>

<B><TT>int a;</TT></B><P>

declares that you want to create an <B><TT>int</TT></B> variable called <B><TT>a</TT></B>.
<P>To assign a value to our integer variable we would use the following <B>C</B> statement:

<P><B><TT>a=10;</TT></B>

<P>The <B>C</B> programming language uses the &quot;=&quot; character for <I>assignment</I>. A statement of the form <B><TT>a=10;</TT></B> should be interpreted as <I>take the numerical value 10 and store it in a memory location associated with the integer variable a</I>. The &quot;=&quot; character should not be seen as an equality otherwise writing statements of the form:

<P><B><TT>a=a+10;</TT></B>

<P>will get mathematicians blowing fuses! This statement should be interpreted as <I>take the current value stored in a memory location associated with the integer variable a; add the numerical value 10 to it and then replace this value in the memory location associated with a</I>.

<P>
<HR>
<P>
<A NAME="DN"></A>

<H3>Decimal Number Variables</H3>

As described above, an integer variable has no fractional part. Integer variables tend to be used for counting, whereas <I>real</I> numbers are 
used in arithmetic. <B>C</B> uses one of two keywords to declare a variable 
that is to be associated with a decimal number: <B><TT>float</TT></B> and <B><TT>double</TT></B>. They are each offer a different level of precision as outlined below.
<P>
<DL>
<DT><B>float</B>
<DD>A float, or floating point, number has about seven digits of precision and a range of about 1.E-36 to 1.E+36. A float takes four bytes  to store.<P>
<P>
<DT><B>double </B>
<DD>A double, or double precision, number has about 13 digits of precision and a range of about 1.E-303 to 1.E+303. A double takes eight bytes to store.
</DL>
<P>For example:
<P><B><TT>float total;</TT></B>
<P><B><TT>double sum;</TT></B>
<P>To assign a numerical value to our floating point and double precision variables we would use the following <B>C</B> statement:
<P><B><TT>total=0.0;</TT></B>
<P><B><TT>sum=12.50;</TT></B>
<P>
<HR>
<P>
<A NAME="CV"></A>

<H3>Character Variables</H3>

<B>C</B> only has a concept of numbers and characters. It very often comes 
as a surprise to some programmers who learnt a beginner's language such as 
BASIC that <B>C</B> has no understanding of <I>strings</I> but a string is 
only an <I>array</I> of characters and <B>C</B> does have a concept of arrays which we shall be meeting later in this course.

<P>To declare a variable of type character we use the keyword <TT><B>char</B></TT>. - A single character stored in one byte.
<P>For example:
<P><B><TT>char c;</TT></B>

<P>To assign, or store, a character value in a <TT><B>char</B></TT> data type is easy - a character variable is just a symbol enclosed by single quotes. For example, if <B><TT>c</TT></B> is a <TT><B>char</B></TT> variable you can store the letter <B>A</B> in it using the following <B>C</B> statement:
<P><TT><B>c='A'</B></TT>

<P>Notice that you can only store a single character in a <B><TT>char</TT></B> variable. Later we will be discussing using character  strings, which has a very real potential for confusion because a string constant is written between double quotes. But for the moment remember that a <TT><B>char</B></TT> variable is <B>'A'</B> and not <B>"A"</B>.

<P>
<HR>
<P>
<A NAME="AS"></A>

<H3>Assignment Statement</H3>

Once you've declared a variable you can use it, but not until it has been declared - attempts to use a variable that has not been defined will cause a compiler error. Using a variable means storing something in it. You can store a value in a variable using:<P>

<B><TT>name = value;</TT></B><P>

For example:<P>

<B><TT>a=10;</TT></B><P>

stores the value <B><TT>10</TT></B> in the <B><TT>int</TT></B> variable <B><TT>a</TT></B>. What could be simpler? Not much, but it isn't actually very useful! Who wants to store a known value like 10 in a variable so you can use it later? It is 10, always was 10 and always will be 10. What makes variables useful is that you can use them to store the result of some arithmetic.

<P>Consider four very simple mathematical operations: add, subtract, multiply 
and divide. Let us see how <B>C</B> would use these operations on two float variables <TT><B>a</B></TT> and <TT><B>b</B></TT>.

<DL>
<DT>add
<DD><TT><B>a+b</B></TT>
<DT>subtract
<DD><TT><B>a-b</B></TT>
<DT>multiply
<DD><TT><B>a*b</B></TT>
<DT>divide
<DD><TT><B>a/b</B></TT>
</DL>

Note that we have used the following characters from <B>C</B>'s <A HREF="ccccchar.html">character set</A>:
<PRE>
<B>
+     for add
-     for subtract
*     for multiply
/     for divide</B></PRE>

BE CAREFUL WITH ARITHETIC!!! What is the answer to this simple 
calculation?
<P><TT><B>a=10/3</B></TT>
<P>The answer depends upon how <TT><B>a</B></TT> was declared. If it was declared as type <TT><B>int</B></TT> the answer will be 3; if <TT><B>a</B></TT> is of type <TT><B>float</B></TT> then the answer will be 
3.333. It is left as an exercise to the reader to find out the answer for <TT><B>a</B></TT> of type <TT><B>char</B></TT>.

<P>Two points to note from the above calculation:
<OL>
<LI><B>C</B> ignores fractions when doing integer division!
<LI>when doing <TT><B>float</B></TT> calculations integers will be converted into <TT><B>float</B></TT>. We will see later how <B>C</B> handles type conversions.
</OL>
<P>
<HR>
<P>
<A NAME="AO"></A>

<H3>Arithmetic Ordering</H3>

Whilst we are dealing with arithmetic we want to remind you about something 
that everyone learns at junior school but then we forget it. Consider the following calculation:

<P><TT><B>a=10.0 + 2.0 * 5.0 - 6.0 / 2.0</B></TT>

<P>What is the answer? If you think its 27 go to the bottom of the class! Perhaps you got that answer by following each instruction as if it was being 
typed into a calculator. A computer doesn't work like that and it has its 
own set of rules when performing an arithmetic calculation. All mathematical 
operations form a hierachy which is shown <A HREF="ccccchar.html#arithmetic">here</A>. In the above calculation the 
multiplication and division parts will be evaluated first and then the 
addition and subtraction parts. This gives an answer of 17.

<P><I><B>Note:</B> To avoid confusion use brackets</I>. The following are 
two different calculations:

<P><TT><B>a=10.0 + (2.0 * 5.0) - (6.0 / 2.0)</B></TT>
<BR><TT><B>a=(10.0 + 2.0) * (5.0 - 6.0) / 2.0</B></TT>

<P>You can freely mix <B><TT>int</TT></B>, <B><TT>float</TT></B> and <B><TT>double</TT></B> variables in expressions. In nearly all cases the lower precision values are converted to the highest precision values used in the expression. For example, the expression <B><TT>f*i</TT></B>, where <B><TT>f</TT></B> is a <B><TT>float</TT></B> and <B><TT>i</TT></B> is an <B><TT>int</TT></B>, is evaluated by converting the <B><TT>int</TT></B> to a <B><TT>float</TT></B> and then multiplying. The final result is, of course, a <B><TT>float</TT></B> but this may be assigned to another data type and the conversion will be made automatically. If you assign to a lower precision type then the value is truncated and not rounded. In other words, in nearly all cases you can ignore the problems of converting between types.

<P>This is very reasonable but more surprising is the fact that the data type <TT><B>char</B></TT> can also be freely mixed with <B><TT>ints</TT></B>, <B><TT>floats</TT></B> and <B><TT>doubles</TT></B>. This will shock any programmer who has used another language, as it's another example of <B>C</B> getting us closer than is customary to the way the machine works. A character is represented as an <A HREF="http://www.le.ac.uk/cc/iss/glossary/ccgla.html#33">ASCII</A> or some other code in the range O to 255, and if you want you can use this integer code value in arithmetic. Another way of thinking about this is that a <B><TT>char</TT></B> variable is just a single-byte integer variable that can hold a number in the range O to 255, which can optionally be interpreted as a character. Notice, however, that <B>C</B> gives you access to memory in the smallest chunks your machine works with, i.e. one byte at a time, with no overheads.

<P>
<HR>
<P>
<A NAME="SD"></A>

<H3>Something To Declare</H3>

Before you can use a variable you have to declare it. As we have seen above, to do this you state its <I>type</I> and then give its <I>name</I>. For example, <B><TT>int i;</TT></B> declares an integer variable. You can declare any number of variables of the same type with a single statement. For example:<P>

<B><TT>int a, b, c;</TT></B><P>

declares three integers: <B><TT>a</TT></B>, <B><TT>b</TT></B> and <B><TT>c</TT></B>. You have to declare all the variables that you want to use at the start of the program. Later you will discover that exactly where you declare a variable makes a difference, but for now you should put variable declarations after the opening curly bracket of the <B><TT>main</TT></B> program.<P>

<P>Here is an example program that includes some of the concepts outlined 
above. It includes a slightly more advanced use of the <B><TT>printf</TT></B> function which will covered in detail in the next part of this course:

<PRE>/*
/*
    Program#int.c

    Another simple program
    using int and printf
*/

#include <stdio.h>

main()
{
    int a,b,average;
    a=10;
    b=6;
    average = ( a+b ) / 2 ;
    printf("Here ");
    printf("is ");
    printf("the ");
    printf("answer... ");
    printf("\n");
    printf("%d.",average);
}
</PRE>

[<A HREF="int.c">program</A>]

<P><HR><P>
<H3>More On Initialising Variables</H3>

You can assign an initial value to a variable when you declare it. For example:<P>

<B><TT>int i=1;</TT></B><P>

sets the <B><TT>int</TT></B> variable to one as soon as it's created. This is just the same as:<P>

<PRE>
<B>
int i;
i=l;
</B>
</PRE>

but the compiler may be able to speed up the operation if you initialise the variable as part of its declaration. Don't assume that an uninitialised variable has a sensible value stored in it. Some <B>C</B> compilers store 0 in newly created numeric variables but nothing in the <B>C</B> language compels them to do so.
<P><HR><P>
<H3>Summary</H3>

Variable names:<P>
<UL>
<LI>should be lowercase for local variables
<LI>should be UPPERCASE for symbolic constants (to be dicsussed later)
<LI>only the first 31 characters of a variables name are significant
<LI>must begin with a letter or _ (under score) character
</UL>


<HR>

<A HREF="http://www.le.ac.uk/">
<IMG ALT="[Leicester University]" ALIGN=middle SRC="http://www.le.ac.uk/buttons/lhomebut.gif"></A>


<A HREF="http://www.le.ac.uk/CWIS/AS/CC/cc.html">
<IMG ALT="[]" ALIGN=middle SRC="http://www.le.ac.uk/buttons/ccbut.gif">
 Computer Centre</A>   

<A HREF="cccc.html">
<IMG ALT="[]" ALIGN=middle SRC="http://www.le.ac.uk/buttons/backbut.gif">
Introduction C Programming</A>


<HR>
<ADDRESS>Information Suppliers: <A HREF="http://www.le.ac.uk/rjm1.html">Richard Mobbs</A>, Head of Information Services, Leicester University Computer
 Centre and Marina Carter, Postgraduate Student, Loughborough University.
</ADDRESS>

<ADDRESS>Last Updated: August 1995</ADDRESS>

</BODY>

</HTML>

