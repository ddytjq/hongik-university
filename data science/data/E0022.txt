ID=E0022
URL=http://www.hh.se/stud/d98rolb/ansi/fprintf().html
SIZE=17954
DATE=12/07/02
TIME=19:16:29
DATASET=C
HTML=<html>
<head>
  <title>fprintf()</title>
  <meta name="Generator" content="GuideML V1.6">
  <meta http-equiv="Content-Type" content="text/html">
</head>
<body>
<a href="main.html"><img src="toc.gif" alt="CONTENTS" border=0></a><a href="alphalist.html"><img src="index.gif" alt="INDEX" border=0></a><a href="fopen().html"><img src="prev.gif" alt="PREV" border=0></a><a href="fputc().html"><img src="next.gif" alt="NEXT" border=0></a><a href="http://www.hh.se/stud/d98rolb/programming.html"><img src="home.gif" alt="HOME" border=0></a>
<hr>
<pre>
fprintf-Formatted print

Synopsis

        #include &#060;stdio.h&#062;

        length = fprintf(fp,fmt,arg1,arg2,...);

        int length;              /* number of characters generated */
        FILE *fp;              /* file pointer */
        const char *fmt;      /* format string */
        type *argn;              /* arguments */

Description

        This function produces an output stream of ASCII characters, and
        sends the output to the level 2 file specified by the fp argument.

        The fmt argument points to a string that contains ordinary
        characters and conversion specifications that indicate how you
        want the arguments arg1, arg2, and so on to be printed.  The
        ordinary characters are copied to the output, but the conversion
        specifications are replaced with the correctly formatted values of
        the arguments arg1, arg2, and so on. The first conversion
        specification is replaced with the formatted value of arg1, the
        second specification is replaced with the  value of arg2, and so
        on.  In some cases, as described below, a conversion specification
        may process more than one argument.

        Each conversion specification must begin with a percent character
        (%).  To place an ordinary percent into the output stream, precede
        it with another percent in the fmt string.  That is, %% will send
        a single percent character to the output stream.  A specification
        has the following format:

            %[flags][width][.precision][size]type

        The brackets ([]) indicate optional fields.  Each field is defined
        as follows:

            flags
                controls output justification and the printing of signs,
                blanks, decimal places, and hexadecimal prefixes.

                If any flag characters are used, they must appear after
                the percent.  Valid flags are as follows:

                - (minus)
                    causes the result to be left-justified within the
                    field specified by width or within the default width.

                + (plus)
                    causes a plus or minus sign to be placed before the
                    result.  This flag is used in conjunction with the
                    various numeric conversion types.  If it is absent,
                    the sign character is generated only for a negative
                    number.

                blank
                    causes a leading blank for a positive number and a
                    minus sign for a negative number.  This flag is
                    similar to the plus.  If both the plus and the blank
                    flags are present, the plus takes precedence.

                # (pound)
                    causes special formatting.        With the o, x, and X
                    types, the pound flag prefixes any nonzero output with
                    0, 0x, or 0X, respectively.  With the f, e, and E
                    conversion types, the pound flag forces the result to
                    contain a decimal point.  With the g and G types, the
                    pound flag forces the result to contain a decimal
                    point and retain trailing zeroes.

                0 (zero)
                    pads the field width with leading zeros instead of
                    spaces for the d, i, o, u, x, X, e, E, f, g, and G
                    conversion types.  If the minus flag is also used, the
                    zero flag is ignored.  If a precision is specified,
                    the zero flag is ignored for conversion types d, i, o,
                    u, x, and X.  Behavior of the zero flag is undefined
                    for the remaining conversion types.

            width
                specifies the field width, which is the minimum number of
                characters to be generated for this format item.

                The width is a nonnegative number that specifies the
                minimum field width.  If fewer characters are generated by
                the conversion operation, the result is padded on the left
                or right (depending on the minus flag described above).  A
                blank is used as the padding character unless width begins
                with a zero.  In that case, zero padding is performed.
If
                the minus flag appears, padding is performed with blanks.
                width specifies the minimum field width, and it will not
                cause lengthy output to be truncated.  Use the precision
                specifier for that purpose.

                If you do not want to specify the field width as a
                constant in the format string, you can code it as an
                asterisk (*), with or without a leading zero.  The
                asterisk indicates that the width value is an integer in
                the argument list.  See the examples for more information
                on this technique.

            precision
                specifies the field precision, which is the required
                precision of numeric conversions or the maximum number of
                characters to be copied from a string, depending on the
                type field.

                The meaning of the precision item depends on the field
                type, as follows:

                    Type               Meaning
                    ----               -------
                     c                       The precision item is ignored.
                     d, i, o, u, x, X  The precision is the minimum number
                                       of digits to appear.  If fewer
                                       digits are generated, leading
                                       zeroes are supplied.
                     e, E, f               The precision is the number of
                                       digits to appear after the decimal
                                       point.  If fewer digits are
                                       generated, trailing zeroes are
                                       supplied.
                     g, G               The precision is the maximum number
                                       of significant digits.
                     s                       The precision is the maximum
number
                                       of characters to be copied from the
                                       string.

                As with the width item, you can use an asterisk for the
                precision to indicate that the value should be picked up
                from the next argument.

            size
                can be either L for long double, l for large size, or h
                for small size.  When used with the d, i, o, u, x, or X
                conversion specifiers, h and l select argument types of
                short * and long *, respectively.  When used with the e,
                E, f, g, or G conversion specifiers, the L specifies a
                long double argument instead of a double.

            type
                specifies the type of argument conversion to be done.
                Valid conversion types are as follows:

                    c
                        specifies single-character conversion.        The
                        associated argument must be an integer.  The
                        single character in the right-most byte of the
                        integer is copied to the output.
                    d
                        specifies decimal-integer conversion.  The
                        associated argument must be an integer, and the
                        result is a string of digits preceded by a sign.
                        If the plus and blank flags are absent, the sign
                        is produced only for a negative integer.  If the
                        large size modifier is present, the argument is
                        taken as a long integer.
                    e
                        specifies double-precision floating-point
                        conversion.  The associated argument must be a
                        double-precision floating-point number, and the
                        result has the form:

                            -d.dde-ddd

                        d is a single decimal digit, dd is one or more
                        digits, and ddd is an exponent of at least two
                        digits.  The first minus sign is omitted if the
                        floating-point number is positive, and the second
                        minus sign is omitted if the exponent is positive.
                        The plus and blank flags dictate whether there
                        will be a sign character emitted if the number is
                        positive.  The number of digits before the decimal
                        point depends on the magnitude of the number, and
                        the number after the decimal point depends on the
                        requested precision.  The value is rounded to the
                        specified number of digits.  If no precision is
                        specified, the default is six decimal places.
                    E
                        specifies double-precision floating-point
                        conversion.  This is exactly the same as type e
                        except that the result has the form:

                            -d.ddE-ddd
                    f
                        specifies double-precision floating-point
                        conversion.  The associated argument must be a
                        double-precision floating-point number, and the
                        result has the form:

                            -dd.dd

                        dd indicates one or more decimal digits.  The
                        minus sign is omitted if the number is positive,
                        but a sign character will still be generated if
                        the plus or blank flag is present.  The number of
                        digits before the decimal point depends on the
                        magnitude of the number, and the number after the
                        decimal point depends on the requested precision.
                        If no precision is specified, the default is six
                        decimal places.  If the precision is specified as
                        0, or if there are no nonzero digits to the right
                        of the decimal point, then the decimal point is
                        omitted unless the pound (#) flag is specified.
                    g
                        specifies double-precision floating-point
                        conversion (general form).  The associated
                        argument must be a double-precision floating-point
                        number, and the result is in the e or f format,
                        depending on which gives the most compact result.
                        The e format is used only when the exponent is
                        less than -4 or greater than the specified or
                        default precision.  Trailing zeroes are
                        eliminated, and the decimal point appears only if
                        any nonzero digits follow it.
                    G
                        specifies double-precision floating-point
                        conversion (general form).  This is identical to
                        the g format, except that the E type is used
                        instead of the e type.
                    i
                        specifies decimal-integer conversion.  The
                        associated argument must be an integer, and the
                        result is a string of digits preceded by a sign.
                        If the plus and blank flags are absent, the sign
                        is produced only for a negative integer.  If the
                        large size modifier is present, the argument is
                        taken as a long integer.
                    n
                        specifies the argument will be a pointer to an
                        integer into which is written the number of
                        characters written so far by this call to the
                        fprintf function.  If the large size flag is on,
                        the argument must be a pointer to a long integer.
                        If the small size flag is on, the argument must be
                        a pointer to a short integer.
                    o
                        specifies octal-integer conversion.  The
                        associated argument is taken as an unsigned
                        integer, and it is converted to a string of octal
                        digits. If the large size modifier is present, the
                        argument must be a long integer.
                    p
                        specifies pointer conversion.  The associated
                        argument is taken as a data pointer, and it is
                        converted to hexadecimal representation.  Under
                        AmigaDOS, the pointer is printed as 8 hexadecimal
                        digits, with leading zeroes if necessary.
                    P
                        specifies pointer conversion.  This is the same as
                        the p format, except that uppercase letters are
                        used as hexadecimal digits.  This conversion type
                        is an extension to the  standard.  Do not use
                        this extension if you want your program to be
                        -compatible.
                    s
                        specifies string conversion.  The associated
                        argument must point to a null-terminated character
                        string.  The string is copied to the output, but
                        the null byte is not copied.
                    u
                        specifies unsigned decimal integer conversion.
                        The associated argument is taken as an unsigned
                        integer, and it is converted to a string of
                        decimal digits.  If the large size modifier is
                        present, the argument must be a long integer.
                    x
                        specifies hexadecimal-integer conversion.  The
                        associated argument is taken as an unsigned
                        integer, and it is converted to a string of
                        hexadecimal digits with lowercase letters.  If the
                        large size modifier is present, the argument is
                        taken as a long integer.
                    X
                        specifies hexadecimal-integer conversion.  This is
                        the same as the x format, except that uppercase
                        letters are used as hexadecimal digits.


Returns

        This function returns the number of output characters generated.
        If an error occurs, the fprintf function returns a negative value
        and places additional information in the external integers <a href="errno.html"> errno </a>.

Example

        /* This example prints a message indicating whether */
        /* the function argument is positive or negative.   */
        /* In the second printf, the width and precision    */
        /* are 15 and 8, respectively.                            */

        #include &#060;stdio.h&#062;
        #include &#060;math.h&#062;

        void pneg(double value)
        {
            char *sign;

            if (value &#060; 0)
            {
                sign = &quot;negative&quot;;
            }
            else
            {
                sign = &quot;not negative&quot;;
            }
            fprintf(stdout,&quot;The number %E is %s.n&quot;,value,sign);
            fprintf(stdout,&quot;The number %*.*E is %s.n&quot;,15,8,value,sign);
        }

        void main(void)
        {
            pneg(37.8);
            pneg(-18.2);
        }

See Also

        <a href="errno.html"> errno </a>, <a href="fscanf().html"> fscanf </a>, <a href="printf().html"> printf </a>, <a href="scanf().html"> scanf </a>, <a href="sprintf().html"> sprintf </a>, <a href="sscanf().html"> sscanf </a>
</pre>
<hr>
<a href="main.html"><img src="toc.gif" alt="CONTENTS" border=0></a><a href="alphalist.html"><img src="index.gif" alt="INDEX" border=0></a><a href="fopen().html"><img src="prev.gif" alt="PREV" border=0></a><a href="fputc().html"><img src="next.gif" alt="NEXT" border=0></a><a href="http://www.hh.se/stud/d98rolb/programming.html"><img src="home.gif" alt="HOME" border=0></a>
</body>
</html>

