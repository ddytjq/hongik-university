ID=F0868
URL=http://www.visualbasicbooks.com/advVB6samplepg24.html
SIZE=7875
DATE=09/07/2002
TIME=13:26:50
DATASET=Visual Basic
HTML=<html>

<head>



<meta name="description"
content="Visual Basic books for all levels of visual basic programmers are featured and reviewed regularly. Only those Visual Basic books of highest quality appear on this site.">
<meta name="keywords" content="visual basic books,visual basic,vb books,visual basic sites,programming,win32 api,database,beginner,amazon,bookstore">

<title>Visual Basic Books</title>
</head>

<body bgcolor="#6373B5" text="#616161" link="#0000ff" vlink="#666666" alink="#CC9900">
<center>
<!-- BEGIN RICH-MEDIA BURST! CODE --> 
       <script language="JavaScript"> 
       <!-- /* © 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
       var TheAdcode = 'ad5645a'; 
       var bN = navigator.appName; 
       var bV = parseInt(navigator.appVersion); 
       var base='http://www.burstnet.com/'; 
       var Tv=''; 
       var agt=navigator.userAgent.toLowerCase(); 
       if (bV>=4) 
         {ts=window.location.pathname+window.location.search; 
          i=0; Tv=0; while (i< ts.length) 
             { Tv=Tv+ts.charCodeAt(i); i=i+1; } Tv="/"+Tv;} 
         else   {Tv=escape(window.location.pathname); 
          if( Tv.charAt(0)!='/' ) Tv="/"+Tv; 
                 else if (Tv.charAt(1)=="/")
       Tv=""; 
         if( Tv.charAt(Tv.length-1) == "/") 
           Tv = Tv + "_";} 
       if (bN=='Netscape'){ 
            if ((bV>=4)&&(agt.indexOf("mac")==-1))
       {  document.write('<s'+'cript src="'+ 
             base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
             +Tv+'">'); 
            document.write('</'+'script>');    
       } 
            else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
               TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
               document.write('<img src="' + base + 'cgi-bin/ads/' + 
               TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
               ' border=0 alt="Click Here"></a>');} 
        } 
       if (bN=='Microsoft Internet Explorer') 
        document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
       + 
         TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
         'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
         'frameborder=0 scrolling=no></ifr'+'ame>'); 
       // --> 
       </script> 
       <noscript><a href="http://www.burstnet.com/ads/ad5645a-map.cgi" target=_top> 
       <img src="http://www.burstnet.com/cgi-bin/ads/ad5645a.cgi" 
        width=468 height=60 border=0 alt="Click Here"></a> 
       </noscript> 
       <!-- END BURST CODE --> 
</center>


<table border="0" bgcolor="" cellpadding="0" cellspacing="0">
<tr><td><p align="center"><img src="../images/vblogo.jpg" border="0" alt="vb logo"></td></tr>
<tr> 
<td rowspan="3" valign="top" height="1"> <p>&nbsp;</p>

<p align="left"><font face= "verdana" color="#000000"><b>Visual Basic Books</b></font><br>
<a href="index.html"><font color="#ffffff">Home</font></a><br>
<a href="beginner.html"><font color="#ffffff">Visual Basic Beginner Books</font></a><br>
<a href="database.html"><font color="#ffffff">Visual Basic Database Books</font></a><br>
<a href="activex.html"><font color="#ffffff">Visual Basic ActiveX Books</font></a><br>
<a href="advanced.html"><font color="#ffffff">Visual Basic Advanced Books</font></a><br>
<a href="vbinternet.html"><font color="#ffffff">VB Internet Programming Books</font></a><br>


</p>
<p><font color="#000000" face="verdana"><b>Resources</b></font><br>
<a href="links.html"><font color="#FFFFFF">Visual Basic Links</font></a><br>
<a href="addlink.html"><font color="#FFFFFF">Add a Link</font></a><br>
<a href="esubscribe.html"><font color="#FFFFFF">Subscribe to Mailing List</font></a>

</p>

<p>


</font>


<td bgcolor="#ffffff" valign="middle"><h1 align="center"><img src="../images/anibook.gif" alt="" width="32" height="32"><font face="trebuchet ms, arial, helvetica" color="#000000"> Visual Basic Books </font><img src="../images/anibook.gif" alt="" width="32" height="32"></h1>

</td>






</tr><tr>
<td bgcolor="#ffffff" colspan="1" valign="top">



<table border="0" cellpadding="5"><tr><td>


<font  color="#000000" FACE="Verdana, Arial, Helvetica" SIZE="-1">

<center><H1> Advanced Microsoft Visual Basic 6 Chapter 1</h1></center>



<P>Knowing this, we can check the argument types using <I>VarType</I>. In the code above, we’re checking to see if we’re being passed a string expression. If the answer is yes, we’re then checking to see that the string represents a valid date (even an ambiguous one). If again the answer is yes, we convert the input string into a date and then use <I>InStr </I>to see if the year in the converted date appears in the original input string. If it doesn’t, we must have been passed an ambiguous date.</P>
<P>Here’s that last paragraph rephrased and broken down a bit. Remember that a <I>Date </I>always holds an exact year because it actually holds an offset from December 30, 1899. Therefore, <I>Year(a_Date_variable)</I> will always give us back a full four-digit year (assuming that <I>a_Date_variable</I> represents a date after the year 999). On the other hand, the string that &quot;seeds&quot; the <I>Date </I>variable can hold only an offset—98 in the example. Obviously then, if we convert 98 to a <I>Date</I> (see Chapter 8 for more on this topic), we’ll get something like 1998 or 2098 in the resulting <I>Date </I>variable. When converted to a string, those years are either &quot;1998&quot; or &quot;2098&quot;—neither of which appears in &quot;01 01 98.&quot; We can say with some conviction, therefore, that the input string contains an ambiguous date expression, or even that its data type (&quot;ambiguous date&quot;) is in error and will throw a type mismatch error. </P>
<P>All this date validation can be put inside a <I>Validate </I>routine, of course:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>Private Sub Fu(ByVal v As Variant)<BR>
<BR>
    Dim d As Date<BR>
<BR>
    Call Validate(v, d)<BR>
<BR>
    ' Use d here – we don't get here if there's a problem with 'v'...<BR>
<BR>
End Sub</P></DIR>

</FONT><P>In this <I>Validate </I>routine <I>d</I> is set to cast(<I>v</I>) if <I>v</I> is not ambiguous. If it is ambiguous, an exception is thrown. An exciting addition to this rule is that the same technique can also be applied to Visual Basic’s built-in routines via Interface Subclassing.</P>
<P>How often have you wanted an <I>Option NoImplicitTypes</I>? I have, constantly. Here’s how you can almost get to this situation:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>Private Sub SomeSub()<BR>
<BR>
    MsgBox DateAdd("yyyy", 100, "01 01 98")<BR>
<BR>
End Sub<BR>
<BR>
<BR>
Public Function DateAdd( _<BR>
                         ByVal Interval As String _<BR>
                       , ByVal Number As Integer _<BR>
                       , ByVal v As Variant _<BR>
                      )<BR>
<BR>
    Call Vali_Date(v)<BR>
    <BR>
    DateAdd = VBA.DateTime.DateAdd(Interval, Number, CDate(v))<BR>
<BR>
End Function<BR>
<BR>
<BR>
Private Sub Vali_Date(ByVal v As Variant)<BR>
<BR>
     ' If 'v' is a string containing a valid date expression ...<BR>
    If vbString = VarType(v) And IsDate(CStr(v)) Then<BR>
        <BR>
        ' If we've got a four digit year then we're OK, <BR>
        ' else we throw an err.<BR>
        If 0 = InStr(1, CStr(v), _<BR>
                     Format$(Year(CDate(v)), "0000"), 1) Then<BR>
            Err.Raise Number:=13<BR>
        End If<BR>
            <BR>
    End If<BR>
<BR>
End Sub</P></DIR>

</FONT><P>In this code, the line <I>MsgBox DateAdd(...) </I>in <I>SomeSub</I> will result in a runtime exception being thrown because the date expression being passed is ambiguous (&quot;01 01 98&quot;). If the string were made &quot;Y2K Safe&quot;—that is, 01 01 1998—the call will complete correctly. We have altered the implementation of <I>DateAdd</I>; you could almost say we inherited it and beefed up its type checking.</P>
<P>Obviously this same technique can be applied liberally so that all the VBA type checking (and your own type checking) is tightened up across procedure calls like this. The really nice thing about doing this with Visual Basic’s routines is that instead of finding, say, each call to <I>DateAdd</I> to check that its last argument is type safe, you can build the test into the replacement <I>DateAdd </I>procedure. One single replacement tests all calls. In fact, you can do this using a kind of <I>Option NoImplicitTypes.</P>
</I><P>Use this somewhere, perhaps in your main module:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>#Const NoImplicitTypes = True</P></DIR>

</FONT><P>Then wrap your validation routines appropriately:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>Private Sub Vali_Date(ByVal v As Variant)<BR>
<BR>
    #If NoImplicitTypes = True Then<BR>
<BR>
    ' If 'v' is…<BR>
    If …     <BR>
    End If<BR>
<BR>
    #End If<BR>
<BR>
End Sub<BR>
</P></DIR>

</FONT>

<center><a href="advVB6samplepg25.html">next page....</a></center>

</td></tr></table></table><tr><td bgcolor="#991100"><center>
<font FACE="Verdana, Arial, Helvetica" SIZE="-1"><font color="#FFFFFF">Email us your comments:<a href="mailto:contact@vbbooks.freeservers.com"><img src="../images/emailed.gif"alt="mail" border=0></a><br>Fax: 1(916)404-7719<br>&copy;1999 Valassis Enterprises. All rights reserved.</font>

<P>
<!--Start of WSTR Block-->
<script language=JavaScript>id=1530</script>
<script language=JavaScript src="http://www.meixler-tech.com/wstr/js.cgi"></script>
<!--End of WSTR Block-->
</center>


</body>
</html>

