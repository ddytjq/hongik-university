ID=E0820
URL=http://www.linuxdoc.org/HOWTO/C++Programming-HOWTO-11.html
SIZE=3013
DATE=12/07/02
TIME=19:24:46
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>C++ Programming HOW-TO: Debugging</TITLE>
 <LINK HREF="C++Programming-HOWTO-12.html" REL=next>
 <LINK HREF="C++Programming-HOWTO-10.html" REL=previous>
 <LINK HREF="C++Programming-HOWTO.html#toc11" REL=contents>
</HEAD>
<BODY>
<A HREF="C++Programming-HOWTO-12.html">Next</A>
<A HREF="C++Programming-HOWTO-10.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc11">Contents</A>
<HR>
<H2><A NAME="s11">11. Debugging</A></H2>

<P>Finding the exact source to a bug can be a troublesome process, however
there is several techniques used for debugging:
<UL>
<LI>Printing to standard out - for simple cases, print the values of
several variables, see what they contain - and find out where exactly your
program crashes</LI>
<LI>Using a debugger, a debugger lets you set breakpoints, and make
backtraces in your code, while it's running. Most IDEs come with a debugger,
for GNU systems there is gdb.</LI>
<LI>Use compiler features, on most compilers you can enable more warnings,
for example on g++, use -Wall</LI>
</UL>
<P>Sites to help debugging:
<UL>
<LI> Debugging C and C++ in a UNIX enironment: 
<A HREF="http://www.liacs.nl/~jdassen/onderwijs/stuva/debug/debug.html">http://www.liacs.nl/~jdassen/onderwijs/stuva/debug/debug.html</A></LI>
<LI> MPatrol - a useful memory debugging tool: 
<A HREF="http://www.cbmamiga.demon.co.uk/mpatrol">http://www.cbmamiga.demon.co.uk/mpatrol</A></LI>
<LI> NJAMD - another useful memory debugging tool: 
<A HREF="http://sourceforge.net/projects/njamd/">http://sourceforge.net/projects/njamd/</A></LI>
<LI> LeakTracer - a simple yet powerful tool to find memory leaks: 
<A HREF="http://www.andreasen.org/LeakTracer/">http://www.andreasen.org/LeakTracer/</A></LI>
</UL>
<P>
<P>
<P>
<H2><A NAME="ss11.1">11.1 Debug files</A>
</H2>

<P>To debug any C++ or C programs include the file 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">debug.h</A> and in your 'Makefile' define DEBUG_STR, DEBUG_PRT,
DEBUG_MEM to turn on the traces from the debug.h functions.  When you remove
the '-DDEBUG_STR' etc.. then the debug function calls are set to ((void)0)
i.e. NULL, hence it has no impact on final production release version of
project. You can generously use the debug functions in your programs and it
will not increase the size of production executable.
<P>See the file 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">debug.cpp</A> for implementation of
debug routines.
<P>And see the file 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">my_malloc.cpp</A> for a sample
which uses debug.h and debug functions.
<P>See the sample 
<A HREF="C++Programming-HOWTO-23.html#Appendix A">Makefile</A> .
<P>
<P>
<HR>
<A HREF="C++Programming-HOWTO-12.html">Next</A>
<A HREF="C++Programming-HOWTO-10.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc11">Contents</A>
</BODY>
</HTML>

