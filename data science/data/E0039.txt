ID=E0039
URL=http://www.codeguru.com/cpp_mfc/gm.html
SIZE=43883
DATE=12/07/02
TIME=19:16:42
DATASET=C
HTML=<HTML>
<HEAD>   
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">   
    <META NAME="Author" CONTENT="Tom Archer">
    <TITLE>C++ & MFC - Table of Contents</TITLE>   
    <META Name="description" Content="Source codes with MFC">
    <META Name="keywords" Content="SOURCE CODE MFC">

    <SCRIPT LANGUAGE="JavaScript">
<!--
var axel = Math.random() + "";
var ord = axel * 1000000000000000000 + "?";

//This part of script alleviates a Netscape document.write bug
<!-- 
NS4 = document.layers;
if (NS4) {
origWidth = innerWidth;
origHeight = innerHeight;
}
function reDo() {
if (innerWidth != origWidth || innerHeight != origHeight) 
location.reload();
}
if (NS4) onresize = reDo;
//-->
</SCRIPT>

</HEAD>



<body>

<!-- begin logo and top banner ad table -->

<TABLE width=100% cellpadding="0" cellspacing="0">

  <TR align="left">
    <TD COLSPAN="3" VALIGN="TOP" align="left">
      <A HREF="http://www.earthweb.com" TARGET="_top">
        <IMG SRC="/images/eweb_banner.gif" BORDER="0" ALT="EarthWeb">
      </a>
    </TD>
  </TR>

  <TR>
<!--BljAds
    <TD VALIGN="TOP" align=left>
      <A HREF="/">
        <IMG SRC="/images/logo_cobrand.gif" BORDER="0" ALT="Developer.com">
      </a>
    </TD>

    <TD>
      <img src="/images/dotclear.gif" WIDTH="40" HEIGHT="1">
    </TD>
-->
    <TD align="TOP">
    <center>
      <IFRAME SRC="http://ad.doubleclick.net/adi/N339.Internet.com/B974922;sz=468x60;ord=2002.07.12.18.16.11?" WIDTH=470 HEIGHT=62 MARGINWIDTH=0 MARGINHEIGHT=0 HSPACE=0 VSPACE=0 FRAMEBORDER=0 SCROLLING=no BORDERCOLOR='#000000'>
<SCRIPT language='JavaScript1.1' SRC="http://ad.doubleclick.net/adj/N339.Internet.com/B974922;abr=!ie;sz=468x60;ord=2002.07.12.18.16.11?">
</SCRIPT>
<NOSCRIPT>
<A HREF="http://ad.doubleclick.net/jump/N339.Internet.com/B974922;abr=!ie4;abr=!ie5;sz=468x60;ord=2002.07.12.18.16.11?">
<IMG SRC="http://ad.doubleclick.net/ad/N339.Internet.com/B974922;abr=!ie4;abr=!ie5;sz=468x60;ord=2002.07.12.18.16.11?" BORDER=0 WIDTH=468 HEIGHT=60 ALT="Alt Text">Alt Text</A>
</NOSCRIPT>
</IFRAME><IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/23779/468x60-1/Oracle_RUP_ORA09M_1a/InternetRONBanner468x60.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>

<!-- Counter Position Eliminated -->

    </center>
    </TD>
  </TR>

</TABLE>
<hr>
<!-- end logo and top banner ad table -->

<!-- begin lower outer table -->

<TABLE cellpadding="0" cellspacing="0" border="0">
<TR>
<TD bgcolor=#efefef VALIGN="TOP" WIDTH="90">




<table border=1 cellspacing=0 cellpadding=0>
<tr><td>

<table border=0 cellpadding=5 cellspacing=0 width=150>
   <tr>
     <td align="center">
      <A HREF="/">
        <IMG SRC="/images/logo_cobrand.gif" BORDER="0" ALT="Developer.com">
      </a>
      </td>
   </tr>
   <tr>
     <td align="center">
     <A HREF="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/4370/125x125-1/House_Career_Channel_11g/webopediajobs-125.gif/38366531313035623364326631636530" target="_top"><IMG SRC="http://www.codeguru.com/RealMedia/ads/Creatives/House_Career_Channel_11g/webopediajobs-125.gif"  WIDTH=125 HEIGHT=125 ALT=""  BORDER="0"></A><img src="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/4370/125x125-1/House_Career_Channel_11g/webopediajobs-125.gif/38366531313035623364326631636530?_RM_EMPTY_" Width="1" Height="1" Border="0">
     </td>
   </tr>
</table>

</td></tr>
<tr><td align="center">
  <table width="100%" border=0 cellpadding=5 cellspacing=0><tr><td align="center"><font size=-1>
  <a href="http://www.bizrate.com/mkt.xpml?mkt_id=503249" target="new">Shop for Software</a></font>
  </td></tr></table>
</td></tr>
<tr><td>
  <table width=130 border=0 cellpadding=5 cellspacing=0>
    <tr>
      <td>
        <!-- SEARCH FORM-->
        <form method="post" action="http://search.internet.com/codeguru.earthweb.com">
          <input type="hidden" name="IC_StartNumber" value="0">
          <input type="hidden" name="IC_BatchSize" value="10">
          <input type="hidden" name="IC_RelevanceThreshold" value="30">
          <input type="hidden" name="IC_QueryDatabase"  value="codeguru.earthweb.com">
          <input type="text"   name="IC_QueryText" value="" size="10">
          <input type="submit" value="Search">
        </form>
        <!-- END OF SEARCH FORM -->
      </td>
    </tr>
  </table>

  <table border=0 cellpadding=5 cellspacing=0 width=150>
    <tr><td><span class="navBarH1">CodeGuru Sites</span></td></tr>
    <tr><td nowrap>
        <small>
          <a href="/index.shtml">Visual C++ / MFC / C++</a><br>
          <a HREF="/csharp/index.shtml">.NET (C# and more)</a><br>
          <a href="/vb/index.shtml">Visual Basic</a><br>
          <a href="http://www.gamelan.com">Gamelan (Java)</a><br>
          <a href="http://www.jars.com">JARs (Java Applets)</a><br>
          <hr>
        </small>
        
        
    <a href="/SubmissionsGuidelines.html">
    <font face="verdana, helvetica" color="#000000" size=1>
       submission guidelines
    </font></a>
<br>

<hr>

    </td></tr>


    <tr><td><span class="navBarH1">Interact</span></td></tr>
    <tr><td nowrap>
        <small>
          <a href="/cgi-bin/bbs/wt/wwwthreads.pl">Discussion Boards</a><br>
          <a href="http://e-newsletters.internet.com">Newsletters (subscribe)</a><br>
          <a href="/Guestbook/guestbook.shtml">Guestbook</a><br>
          <a href="/cgi-bin/recommend.cgi">Recommend Us!</a><br>
          <hr>
        </small>
    </td></tr>


    <tr><td><span class="navBarH1">Of Interest</span></td></tr>
    <tr><td nowrap>
        <small>
       <a href="/announcements/dotnetbooks.html">Books on .NET</a><!--<img src="/images/new.gif">--><br>
       <a HREF="/bookReviews/index.shtml">Book Reviews</a><br>
       <a href="/newsletters/index.shtml">Newsletters (archived)</a><br> 
          <a href="/about.shtml">About Us</a><br>
          <hr>
        </small>
    </td></tr>

    <tr><td><span class="navBarH1">Article Sections</span></td></tr>

    <tr><td>
      <span class="navBarH2">C++</span>
      <br>
      <small>
        <a href="/algorithms/index.shtml">algorithms & formulas</a></br>
        <a href="/cpp_mfc/index.shtml">c++ & mfc</a><br>
        <a href="/date_time/index.shtml">date & time</a><br>
        <a href="/string/index.shtml">string</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">COM-based Technologies</span>
      <br>
      <small>
        <a href="/atl/index.shtml">atl & wtl</a><br>
        <a href="/activex/index.shtml">com & activex</a><br>
        <a href="/complus/index.shtml">com+</a><br>
        <a href="/shell/index.shtml">shell programming</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Controls</span>
      <br>
      <small>
        <a href="/buttonctrl/index.shtml">button control  </a><br>
        <a href="/combobox//index.shtml">combobox  </a><br>
        <a href="/editctrl/index.shtml">edit control  </a><br>
        <a href="/imagelist/index.shtml">imagelist control </a><br>
        <a href="/listbox/index.shtml">listbox control  </a><br>
        <a href="/listview/index.shtml">listview control  </a><br>
        <a href="/menu/index.shtml">menu  </a><br>
        <a href="/controls/index.shtml">other controls </a><br>
        <a href="/propertysheet/index.shtml">property sheet  </a><br>
        <a href="/richedit/index.shtml">rich edit control  </a><br>
        <a href="/staticctrl/index.shtml">static control  </a><br>
        <a href="/statusbar/index.shtml">status bar </a><br>
        <a href="/toolbar/index.shtml">toolbar  </a><br>
        <a href="/treeview/index.shtml">treeview control </a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Data</span>
      <br>
      <small>
    <!--
        <a href="/ado/index.shtml">ado & oledb</a><br>
        <a href="/odbc/index.shtml">odbc</a><br>
        <a href="/mfc_database/index.shtml">mfc database classes</a><br>
        <a href="/office_db/index.shtml">office products</a><br>
        <a href="/oracle/index.shtml">oracle</a><br>
        <a href="/serialization/index.shtml">serialization</a><br>
        <a href="/sqlserver/index.shtml">sql server</a><br>
    -->
        <a href="/mfc_database/index.shtml">database</a><br>
        <a href="/data-misc/index.shtml">miscellaneous</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Frameworks</span>
      <br>
      <small>
    <!--
        <a href="/component_frameworks/index.shtml">component frameworks</a><br>
        <a href="/printing_frameworks/index.shtml">printing frameworks</a><br>
        <a href="/ui_frameworks/index.shtml">ui frameworks</a><br>
    -->
        <a href="/advancedui/index.shtml">ui & printing frameworks</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Graphics & Multimedia</span>
      <br>
      <small>
        <a href="/bitmap/index.shtml">bitmaps & palettes</a><br>
        <a href="/directx/index.shtml">directx</a><br>
        <a href="/gdi/index.shtml">gdi</a><br>
        <a href="/multimedia/index.shtml">multimedia</a><br>
        <a href="/opengl/index.shtml">opengl</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Internet & Networking</span>
      <br>
      <small>
        <a href="/ieprogram/index.shtml">ie programming</a><br>
        <a href="/internet/index.shtml">internet protocols</a><br>
        <a href="/isapi/index.shtml">isapi</a><br>
        <a href="/network/index.shtml">network protocols</a><br>
      </small>
    </td></tr>
	
    <tr><td>
      <span class="navBarH2">Miscellaneous</span>
      <br>
      <small>
        <a href="/misc/index.shtml">miscellaneous</a><br>
        <a href="/samples/index.shtml">samples</a><br>
      </small>
    </td></tr>

    <!--
    <tr><td><span class="navBarH2">Security</span></td></tr>
    <tr><td><small>
      <a href="/cryptoapi/index.shtml">crypto api</a><br>
      <a href="/encryption/index.shtml">encryption/decryption</a><br>
      <br>
    </small></td></tr>
    -->

    <tr><td>
      <span class="navBarH2">Visual Studio</span>
      <br>
      <small>
    <!--
        <a href="/addins/index.shtml">add-ins</a><br>

        <a href="/tips/index.shtml">editor tips</a><br>
        <a href="/macros/index.shtml">macros</a><br>
    -->
        <a href="/debug/index.shtml">debugging</a><br>
        <a href="/devstudio_macros/index.shtml">add-ins & macros</a><br>
        <a href="/tips/index.shtml">editor tips</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Windows Programming</span>
      <br>
      <small>
        <a href="/ce/index.shtml">ce</a><br>
        <a href="/clipboard/index.shtml">clipboard</a><br>
        <a href="/dll/index.shtml">dll</a><br>
        <a href="/files/index.shtml">file & folder</a><br>
        <a href="/help/index.shtml">help systems</a><br>
        <a href="/printing/index.shtml">printing</a><br>
        <a href="/win32/index.shtml">win32</a><br>
        <a href="/system/index.shtml">system</a><br>
      </small>
    </td></tr>

    <tr><td>
      <span class="navBarH2">Windows &amp; Dialogs</span>
      <br>
      <small>
        <a href="/console/index.shtml">console</a></br>
        <a href="/dialog/index.shtml">dialog</a><br>
        <a href="/docking/index.shtml">docking window</a><br>
        <a href="/doc_view/index.shtml">doc/view</a><br>
        <a href="/splitter/index.shtml">splitter</a><br>
      </small>
      <hr>
    </td></tr>

    </table>

<!-- JOB BUTTON --> 
    <table border=0 cellpadding=5 cellspacing=0 width=150>
    <tr><td align="center">
       <a href="http://jobs.internet.com" target="new">
         <IMG SRC="http://www.codeguru.com/jobs.gif" alt="[Internet Jobs]">
       </a>
    </td></tr>
    </table>

  </td>
</tr>
</table>

<!--/navbar>


<!-- blank column for spacing -->

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

<!-- end blank column for spacing -->

<!-- begin content column -->

<TD VALIGN="TOP" >

<!--
<table cellpadding="0" cellspacing="0">
<tr>
-->

<!-- begin main content column -->


<!-- closign of column, row, and table are in subfoot file -->





<script type="text/javascript" language="javascript"> 
if (screen.width==640 || screen.width==800)
{
   document.write("<link rel=stylesheet href='/global/global800.css'>"); 
} 
else 
{ 
   document.write("<link rel=stylesheet href='/global/global.css'>"); 
} 
</script>


<CENTER><H3><FONT COLOR="#AOAO99">
Elementary Use of the Program "make"
</FONT></H3></CENTER><HR>
<!-- Author and contact details -->

<p>This article was contributed by
<A HREF="mailto:gisan2@libero.it">Luigi Santillo</A>.</p>

<!-- For which environment is this code specific??? -->
<p><u>Environment:</u> DOS/Unix console

<p>These days, programmers generally develop using some GUI IDE; however, it may happen that one is given only traditional command-line tools. In this case, using the classic program "make" to generate/update a program, especially when source code is spread across many unit files, may be a solution.</p>

<p>I will briefly show where "make" fits in the process of developing an application and introduce a simple "makefile" for a C++ program made of three unit files; finally, I will outline a simple method to automate the generation of makefiles.</p>

<p>The approach I suggest is aimed towards the development of C++ console applications, and is presented using the GNU tools on Windows; however, it can be adapted to other compiled programming languages/tools/systems as long as a compiler and a "make" are available.</p>

<p>Index:</p>

<ul>
<li>Doing it all by hand</li>
<li>Using "make"</li>
<li>Automatically generating simple makefiles</li>
<li>Some extra thoughts</li>
<li>About the program gm</li>
<li>About the GNU tools</li>
<li>Downloads</li>
<li>History</li>
</ul>

<h3>Doing It All by Hand</h3>

<p>
Consider the following program (it is a multi-source program consisting of three unit files. hello.cpp and print.cpp are source files; print.hpp is a user header file):</p>

<pre>
<span class="codeComment">// hello.cpp                   // print.hpp                // print.cpp</span>
#include "print.hpp"           #ifndef print_hpp           #include &lt;iostream&gt;
                               #define print_hpp           #include "print.hpp"
<span class="codeComment">///////////////////////        ///////////////////////     ///////////////////////</span>
int                            void                        void
main()                         print(const char*);         print(const char* s)
{                              <span class="codeComment">///////////////////////</span>     {
  print("Hello world!");       #endif                        std::cout &lt;&lt; s &lt;&lt; '\n';
}                                                          }
</pre>

<p>The basic operations needed to generate the binary file (which I'll call hello.exe) are:</p>

<ul>
<li>Compile all source files (hello.cpp and print.cpp), generating object files (hello.o and print.o).</li>
<li>Link the object files making the binary.</li>
</ul>

<p>Using GNU tools (I assume that the binary files of the tools are in c:\gnu\bin, which is included in the path and that C++ standard header files are in c:\gnu\include\g++), one would use the commands:</p>

<pre>
g++ hello.cpp -c -o hello.o -Ic:/gnu/include/g++/
g++ print.cpp -c -o print.o -Ic:/gnu/include/g++/
g++ hello.o print.o -o hello.exe
</pre>

<p>The first says to use g++ to compile hello.cpp, generating hello.o. The options used have this meaning:</p>

<ul>
<li>c = only compile file, do not invoke linker</li>
<li>o = next comes the name of the output</li>
<li>I = after the "I" comes the place where you can look for header files not found in the current directory</li>
</ul>

<p>The second command is the same as the first, but is referred to as print.cpp.</p>

<p>The third command says to link hello.o and print.o, generating hello.exe.</p>

<p>Note: I'll write Unix-style paths, using a slash to delimit directories, because that is safer when dealing with GNU tools (even if they are running on Windows).</p>

<p>If, later, one of the source files is edited (say hello.cpp), one has to do the following to update the binary file:</p>

<ul>
<li>Compile only the updated source file (hello.cpp).</li>
<li>Link the object files making the binary.</li>
</ul>

<p>So the commands are:</p>

<pre>
g++ hello.cpp -c -o hello.o -Ic:/gnu/include/g++/
g++ hello.o print.o -o hello.exe
</pre>

<p>Generally, besides sources, an application also has user headers (just one in this case, print.hpp) storing information to be shared among source files (in the example, the declaration of function "print"), and so included in one or more sources.</p>

<p>Upon editing a header file, one is actually editing each of the sources that include it, even if the time stamp of the sources did not change. This is somehow an extension of the notion of editing a source file to include the case of editing one of its header files. Additionally, header files may themselves include other headers; thus, in the end, a source file shall be considered updated not only when its time stamp or that of an header has changed, but even when the stamp of an header of an header changes.</p>

<p>Of course, when a header is edited, all source files including it have to be compiled, and the binary accordingly updated.</p>

<p>In other words, should I ever modify print.hpp, I would need to recompile both hello.cpp and print.cpp and, of course, update the binary.</p>

<h3>Using "make"</h3>

<p>The task of keeping a binary up to date can be much simpler if there is a file telling:</p>

<ul>
<li>Which header is included by each source file (so that one knows when a source file has been updated).</li>
<li>How a source file is translated into the corresponding object (that is, which commands are to be used to compile).</li>
<li>How the object files are linked to make the binary.</li>
</ul>

<p>And a program that, given the above information, will:</p>

<ul>
<li>Check if there is anything to be compiled.</li>
<li>Check if the binary has to be updated.</li>
</ul>

<p>The file I outlined above contains more or less what goes into a simple "makefile", and the program that interprets makefiles is "make".</p>

<p>Here is the makefile for the "hello" program. Lines with a a leading "#" are comments; those with leading white spaces are indented using a tab character.</p>

<pre>
<span class="codeComment">######################################################################
# Makefile for program : hello
# this file is written : manually
######################################################################


# generating/updating the binary file</span>

hello.exe : hello.o print.o
  g++ hello.o print.o -o hello.exe

<span class="codeComment"># Remarks:
# 1. Consider the first line: the file placed on the left of the
#    colon (':') is the "target" (here, hello.exe)
#
# 2. Files placed on the right of the colon tell the "dependency" of
#    the target (that is, if at least one of them is newer than the
#    target itself, update the target)
#
# 3. Lines following the first one are indented (here there is only
#    one such line) and tell which commands are to be executed to
#    update the target; in this case the command is the one that
#    links the objects.
# --------------------------------------------------------------------

# generating/updating object file hello.o</span>

hello.o : hello.cpp print.hpp
  g++ hello.cpp -c -o hello.o -Ic:/gnu/include/g++/

<span class="codeComment"># Remarks:
# target is hello.o, it depends upon hello.cpp and print.hpp and
# is updated by compiling the source file hello.cpp

# --------------------------------------------------------------------


# generating/updating object file print.o</span>

print.o : print.cpp print.hpp
  g++ print.cpp -c -o print.o -Ic:/gnu/include/g++/

<span class="codeComment">######################################################################
#end of file</span>
</pre>

<p>Assuming the above is saved on disk as "makefile", let's see how "make" uses it.</p>

<p>The first "time" make is invoked -- by the way this is done by typing "make" -- assume that only the unit files exist (there is no binary file named hello.exe and none of the object files hello.o and print.o).</p>

<p>"make" finds instructions about generating hello.exe; because the file does not exist, it has to be made. Also, the file depends on two object files.</p>

<p>The object files do not exist, so "make" looks for instructions on how to make them; if none are found, an error results. In our case, "make" finds that hello.o depends on hello.cpp and print.hpp. There is no need to search for how to generate these unit files because they exist. So, the instructions to generate hello.o are executed.</p>

<p>Something similar occurs for print.o.</p>

<p>After that, "make" goes back to generating the binary and executes the instructions required to link it.</p>

<p>Consider now the case when one edits hello.cpp, and runs "make".</p>

<p>As before, "make" finds that hello.exe depends on hello.o and print.o. The files both exist, but when it checks the time stamp of hello.o, it realizes that the object file is older than the source it depends on, so it will update the object hello.o; accordingly, it will update the binary.</p>

<p>If print.hpp is edited and "make" invoked, the program will update both object files (and then the binary as well) because the user header file is listed in the dependency of both the objects.</p>

<p>This is what one would have done manually, so I guess that both "make" and the makefile may be trusted when updating binaries.</p>

<h3>Automatically Generating Simple Makefiles</h3>

<p>Manually writing a makefile is easy when the program to be generated is simple; thus, next step is to write a program that, given the unit files, generates a simple makefile for me.</p>

<p>Here is how such a program, say named "gm" (generate makefile), could work.</p>

<p>gm is given the name of the sole source file hosting function "main" (I term this the "main source"; such a file also exists for every ANSI C++ program). In the "hello" example, the main source is: hello.cpp.</p>

<p>Right away, gm knows that:</p>

<ul>
<li>The binary file is named "hello.exe" (that is, it has the same name of main source, but with a ".exe" extension).</li>
<li>There is an object file named "hello.o" (the same name as source file, but with an ".o" extension), to be compiled.</li>
<li>The binary depends on the object hello.o.</li>
<li>The object depends on "hello.cpp".</li>
</ul>

<p>Next, gm will examine the source "hello.cpp", looking for links to other unit files (that is, user headers or source files). It comes across the include directive related to "print.hpp". That file is a user header file (because it appears enclosed in double quotes), thus gm will:</p>

<ul>
<li>Add print.hpp to the list of headers included by hello.cpp (in other words, it will add print.hpp to the dependency of hello.o).</li>
<li>Examine the header file print.hpp as soon as it finishes with hello.cpp.</li>
</ul>

<p>There are no other links in hello.cpp, so the operation of scanning it is over; examination of print.hpp begins. There is no link in this file, so no further information is collected. Because there are no other units to scan, gm prints the makefile and terminates.</p>

<p>Here is the output:</p>

<pre>
<span class="codeComment">######################################################################
# Makefile for program : hello
# generated by program : gm.exe
######################################################################

# target to generate/update binary file</span>
hello.exe : hello.o
  g++ hello.o -o hello.exe

hello.o : hello.cpp print.hpp
  g++ hello.cpp -c -o hello.o -Ic:/gnu/include/g++/

<span class="codeComment">######################################################################
#end of file</span>
</pre>

<p>Note that the makefile is not complete; it lacks information about the other source file. In fact, if you type the command "make", the linker will complain that the definition of the "print" function is missing.</p>

<p>Assume now that one adds the following line to the user header file:</p>

<pre>
<span class="codeComment"># pragma defs_in print.cpp</span>
</pre>

<p>So, now the header file is:</p>

<pre>
<span class="codeComment">// print.hpp
#ifndef print_hpp
#define print_hpp
#pragma defs_in print.cpp // this is the extra line
///////////////////////</span>
void
print(const char*);
<span class="codeComment">///////////////////////
#endif</span>
</pre>

<p>Let's run gm again. This time, when it examines the header print.hpp, it will find the link pointing to print.cpp and so will scan that source too.</p>

<p>So, there is another source file (besides hello.cpp). This means that:</p>

<ul>
<li>The binary depends on hello.o and print.o</li>
<li>There is another target in the makefile, named "print.o", and it depends on print.cpp.</li>
</ul>

<p>gm will then scan print.cpp and find:</p>

<ul>
<li>The include directive pointing to "iostream".</li>
<li>the include directive pointing to "print.hpp".</li>
</ul>

<p>The first link is ignored because, related to a standard header file (in fact, the file name is wrapped by angle brackets), the second link points to a file previously examined, so won't be scanned again. However, it tells that print.hpp is to be added to the list of headers included by print.cpp (in other words, print.o will depend upon print.hpp, too).</p>

<p>Because there are no other files to scan, gm prints the makefile and terminates. This time the output is:</p>

<pre>
<span class="codeComment">######################################################################
# Makefile for program : hello
# generated by program : gm.exe
######################################################################

# target to generate/update binary file</span>
hello.exe : hello.o print.o
  g++ -o hello.exe hello.o print.o

hello.o : hello.cpp print.hpp
  g++ hello.cpp -c -o hello.o -Ic:/gnu/include/g++/

print.o : print.cpp print.hpp
  g++ print.cpp -c -o print.o -Ic:/gnu/include/g++/

<span class="codeComment">######################################################################
#end of file</span>
</pre>

<p>
This is about what I expected.

<h3>Some Extra Thoughts</h3>

<p>I will now introduce a few things that will make the picture just a little bit more complicated, but hopefully more realistic.</p>

<p>Consider the case when the user header file "print.hpp" itself includes a user header file, for instance "foo.hpp". As I already said, one expects that foo.hpp will be added to the list of header files included by each source file that "includes" print.hpp (in my example, hello.cpp and print.cpp), so that it will end up in the dependency of the corresponding object files. The program gm will look for headers of headers, and will correctly add them to the dependency.</p>

<p>Consider now, the situation where hello.cpp is in one directory, for instance "c:/develop", while print.hpp and print.cpp are in another place, say "c:/mylib". However, gm is launched from "c:/develop" (that is, from the location of the main source).</p>

<p>A good question is: How does gm locate the files print.hpp and print.cpp?</p>

<p>In other words, until now all files were in the same directory; thus, I had directives without a path. Now, shall the include directive for print.hpp and the "pragma defs_in" directive for print.cpp be modified, so that they have a path in front of them?</p>

<p>The answer is: They could be modified, but they should not.</p>

<p>In fact, changing the directives would be editing unit files to keep directives up to date with the personal directory structure you chose on some system. This means that you are editing units for purposes not related to the programming language and so is best avoided; anyway, it would soon become tedious.</p>

<p>The solution I use is the following: Write, in a file, the paths where non-local pieces of code are stored (in my example there is only the path c:/mylib), and then hand the name of this file (which I term the "configuration" file), together with the one of the main source, to gm.</p>

<p>gm will read the configuration file and use its information to trace files that it can find in the directory where it is launched from; that is, files it can find in the same directory of the main source.</p>

<p>If it is unable to locate a unit, the user will be warned but execution continues (you'll soon learn the reason why it is better not to stop execution upon not finding a unit).</p>

<p>Because there is a configuration file, it could be used to store values that help parameterize gm; for instance, compiler options or linker options (the first I can think of are names of libraries). Actually, the name of the compiler itself could be kept there (instead of being built in the program gm).</p>

<p>A configuration file could be (lines with a leading "#" are comments, thus discarded):</p>

<pre>
<span class="codecomment"># paths where non-local units are stored: one path on each line
# note that each path may be absolute or relative and always ends
# with a slash</span>
c:/mylib/
c:/another_lib/
subdir/

<span class="codecomment"># macros related to GNU tools and to the Windows system
# the BIN_EXT is because of Windows
# note that the extension begins with a dot</span>
BIN_EXT   = .exe
COMPILER  = g++
LINKER    = g++
CMP_OPT   = -Ic:/gnu/include/g++/ -Wall -ggdb
LNK_OPT   =
</pre>

<p>As you can see there are two paragraphs:</p>

<ul>
<li>The first has the paths for non-local files.</li>
<li>The second has "macros", sort of constants that will be copied into the makefile and used here to make files look shorter.</li>
</ul>

<p>Here is, in detail, the information each macro conveys:

<pre>
BIN_EXT  = extension of binary files (clearly, an OS-related issue)
COMPILER = name of compiler
LINKER   = name of linker
CMP_OPT  = options to be used by the compiler
LNK_OPT  = options to be used by the linker
</pre>

<p>Given the above, the makefile produced by gm is:</p>

<pre>
<span class="codeComment">######################################################################
# Makefile for program : hello
# generated by program : gm.exe
######################################################################

# macros</span>
BIN_EXT  = .exe
COMPILER = g++
LINKER   = g++
CMP_OPT  = -Ic:/gnu/include/g++/ -Wall -ggdb
LNK_OPT  =

<span class="codeComment"># object files</span>
OBJS = hello.o print.o

<span class="codeComment"># target to generate/update binary file</span>
hello$(BIN_EXT) : $(OBJS)
  $(LINKER) $(OBJS) -o hello$(BIN_EXT) $(LNK_OPT)

hello$OBJ_EXT) : hello.cpp print.hpp
  $(COMPILER) hello.cpp -c -o hello.o $(CMP_OPT)

print$OBJ_EXT) : print.cpp print.hpp
  $(COMPILER) print.cpp -c -o print.o $(CMP_OPT)

<span class="codeComment">######################################################################
#end of file</span>
</pre>

<p>There was no suitable linker option above, so here is a situation where one is needed.</p>

<p>Assume this:</p>

<ul>
<li>I wish to place the "print" function in a library named "test" (actually, the name of the library is "libtest.a").</li>
<li>I use program "ar" to create the library (the command is ar -sr libtest.a print.o).</li>
<li>The file libtest.a (the library) is in the subdirectory "libs/".</li>
</ul>

<p>The options to allow linking against this user library are "-Llib/ -ltest" (that is: tell where non-local libraries are, and tell which library should be linked).</p>

<p>If I have the definition of "print.o" stored in a library, chances are that I do not have the source code for the function (that is, print.cpp can't be found by gm). When gm runs, because it still finds a link pointing to "print.cpp" in the user header file "print.hpp", a warning message will show up, telling that print.cpp could not be examined. Of course, there will be no target describing how the object file print.o has to be generated; however, your application will be linked as expected because the apparently missing definition is actually found, by the linker, in the library file libtest.a. This is the reason why not finding a unit is not considered a fatal error by gm.</p>

<p>Note that if instead you have both the library definition of the function and the source file, even if you add the required linker options, the file print.o will be generated and used when linking (in place of the definition stored in the library).</p>

<p>There are two different ways to make sure the library is used, even if print.cpp is around:</p>

<ul>
<li>Remove the pragma defs_in directive pointing to print.cpp.</li>
<li>"Hide" the source file where gm can't find it.</li>
</ul>

<h3>About the Program gm</h3>

<p>The gm I'm shipping is a C++ implementation of the few ideas expressed above; of course, gm is a console application and as such should be used from a DOS box.</p>

<p>There are a few things about the code you should be aware of:</p>

<ul>
<li>The code is distributed under the GNU license.</li>
<li>I only have limited experience, so my code is simple and, hopefully, easy to modify.</li>
<li>The code uses ANSI C++ (as much as g++ 2.95 allows me to), so it should be portable.</li>
<li>gm writes its output in the file named "makefile".</li>
<li>Compiling with the macro VERBOSE defined (that is, list "-DVERBOSE" among the compiler options) yields some additional output (sent to the console), which I used when debugging.</li>
<li>Issues related to the names of files are addressed in "filename.hpp" and "filename.cpp".</li>
<li>Do not forget to edit the configuration file I supply. It needs to be tailored to your installation of the compiler.</li>
<li>To change the extension of header files and source files recognized as unit files by gm, edit the file "gm.hpp".</li>
</ul>

<p>I provide no binary file; instead, there is a script (build.bat) that can be used to generate one. Here is how:</p>

<ul>
<li>Make sure "c:\gnu\bin" (or the equivalent on your system) is in the path.</li>
<li>Type "build DIR", assuming that "DIR" the directory where the g++ includes are stored on your system. For instance, on my system, DIR is "c:/gnu/include/g++/".</li>
</ul>

<p>As soon as you have a "gm.exe" file, edit the configuration file "gm.con", changing the location of C++ header files according to your system; then use it on gm.cpp by typing the command "gm gm.cpp gm.con". Take a look at the makefile produced. It should be the almost the same as the file "makefile.ok" which I ship; "almost" because of the C++ standard headers' location issue.</p>

<p>An alternative way to build the binary file is to edit "makefile.ok", changing the location of the C++ system header files, and then using the command "make -f makefile.ok".</p>

<h3>About the GNU Tools</h3>

<p>The programs I used are ports to Windows, by MinGW, of:</p>

<ul>
<li>The GNU make (generally shipped together with the compiler).</li>
<li>The GNU C++ compiler: g++ (it is part of "gcc", so it comes bundled with that program).</li>
<li>The GNU binary utility (found in the "binutils"): ar.</li>
</ul>

<p>These are all free (in the GNU sense), well-documented, and easily available on the Web. Here are just a couple of places where  you can get them:</p>

<ul>
<li><a href="http://www.mingw.org" target="new">at the mingw.org site</a></li>
<li><a href="http;//www.delorie.com/gnu" target="new">at delorie.com's gnu site</a></li>
</ul> 

<p>Any search engine will yield more locations.</p>

<h3>Downloads</h3>

<p>
The archive "gm.tgz" (Winzip will extract it) contains the source code of the program "gm". The subdirectory "example" contains the three-file version of the "hello world" program I used in this document, and a configuration file for gm, named gm.con (albeit you should tailor it to your system by editing the location of system headers).</p>

<p><A HREF="gm.tgz">
Download source - 16 Kb</A></p>

<p><b>DISCLAIMER: You use the code contained in the archive at your own risk; in no way shall I be held responsible of any damage caused by using it.</b></p>

<h3>History</h3>
Date Posted: June 24, 2002<BR>

<!-- Only use the following if the article is updated -->
<!-- Date Last Updated:  [today's date in the format month day, year] -->

<!--comments-->
<h3>Comments:</h3><ul>
<!--startlist-->
<li><a href="/mfc/comments/39257.shtml">Very useful</a> - Alex  Farber (2002/06/27)

<li><a href="/mfc/comments/39121.shtml">Compiling resource files into Proxy/Stub DLLs</a> - Tron (2002/06/25)

<li><a href="/mfc/comments/39068.shtml">Looks like you can help</a> - Alok Govil (2002/06/24)

</ul>
<P>
<strong><a href="/cgi-bin/addpage/addpage.cgi?cfg=addcomment&action=Comment">
Add Comment</a></strong>
<P>

</td>

      <!--BLJAds - Added right side tower ad -->
<TD VALIGN="TOP">
<A HREF="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/1920/125x800/Oracle_RUP_ORA09M_1a/InternetcomRONSky120x600.html/38366531313035623364326631636530?2002.07.12.18.16.12"> <IMG SRC="http://ad.doubleclick.net/ad/N339.Internet.com/B974922.2;sz=120x600;ord=2002.07.12.18.16.12?" BORDER=0 WIDTH=120 HEIGHT=600 ALT=""></A>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/1920/125x800/Oracle_RUP_ORA09M_1a/InternetcomRONSky120x600.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>

<p>

<!-- Commerce bar -->
<table border="0" cellpadding="3" width="140">

<tr bgcolor="black"><td>
<font face="Arial" color="white" size="1" >
<b><center>internet.commerce</center></b></font>
</td></tr>
<tr bgcolor="lightgrey"><td>
<font face="Arial" size="1" >
<a href="http://www.internet.com/partners/">Be a Commerce Partner</A><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30532/cp1/ImpactBuilderPro_com_5d/buildflashonline.html/38366531313035623364326631636530">Build Flash Online</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30532/cp1/ImpactBuilderPro_com_5d/buildflashonline.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19612/cp2/Tradepub.com_12d/tech.html/38366531313035623364326631636530">Tech Magazines-Free</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19612/cp2/Tradepub.com_12d/tech.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/8691/cp3/EMedia_2d/EMediaMagFreeSub.html/38366531313035623364326631636530">EMedia Mag Free Sub</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/8691/cp3/EMedia_2d/EMediaMagFreeSub.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30539/cp4/PriceGrabber.com_2d/ComparisonShopping.html/38366531313035623364326631636530">Comparison Shopping</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30539/cp4/PriceGrabber.com_2d/ComparisonShopping.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19618/cp5/Computer_Training_Schools_7d/ComputerTraining.html/38366531313035623364326631636530">Computer Training</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19618/cp5/Computer_Training_Schools_7d/ComputerTraining.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/8698/cp6/Imsisoft_2a/ForWebGraphics.html/38366531313035623364326631636530">For Web Graphics</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/8698/cp6/Imsisoft_2a/ForWebGraphics.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30545/cp7/Trellian_8d/PromoteYourWebsite.html/38366531313035623364326631636530">Promote Your Website</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30545/cp7/Trellian_8d/PromoteYourWebsite.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19625/cp8/Erain_1e/flash.html/38366531313035623364326631636530">FlashMX Tools/Bundles</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19625/cp8/Erain_1e/flash.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/8704/cp9/ProSavvy_14c/prosavy.html/38366531313035623364326631636530">Find a Consultant</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/8704/cp9/ProSavvy_14c/prosavy.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30552/cp10/DealTime_3b/dealtime.html/38366531313035623364326631636530">Compare Prices</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/30552/cp10/DealTime_3b/dealtime.html/38366531313035623364326631636530?_RM_EMPTY_" WIDTH=1 HEIGHT=1><BR>

</font>
</td></tr>
</table>
<br>


</TD>

</tr>
</table>
<!-- begin footer information -->
<br>
<CENTER>
<A HREF="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19632/468x60-2/House_Instant_Messaging_2a/imp2002fall-leo.gif/38366531313035623364326631636530" target="_top"><IMG SRC="http://www.codeguru.com/RealMedia/ads/Creatives/House_Instant_Messaging_2a/imp2002fall-leo.gif"  ALT="Instant Messaging Planet Fall"  BORDER="0"></A><img src="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/cpp_mfc/gm.html/19632/468x60-2/House_Instant_Messaging_2a/imp2002fall-leo.gif/38366531313035623364326631636530?_RM_EMPTY_" Width="1" Height="1" Border="0">
<br>
<FONT SIZE="-1">EarthWeb is a service of INT Media Group, Incorporated.<br>
Copyright 2002 INT Media Group, Incorporated. All Rights Reserved.<BR>
<A HREF="http://www.internet.com/help/feedback.html">Feedback</A>, &nbsp;
<A HREF="http://www.itmarketer.com">Advertising Info</A>, &nbsp;
<A HREF="http://www.internet.com/corporate/legal.html">Legal Notices</A>,&nbsp;
<A HREF="http://www.internet.com/corporate/reprints.html#Licensing">Licensing</A>, 
<A HREF="http://www.internet.com/corporate/reprints.html#Reprints">Reprints</A>, &amp; 
<A HREF="http://www.internet.com/corporate/reprints.html#Permissions">Permissions</A>, &nbsp;
<A HREF="http://www.internet.com/corporate/privacy/privacypolicy.html">Privacy Policy</A>.
<BR>
<A HREF="http://www.internet.com"><IMG SRC="/images/internetcom.gif"
ALT="http://www.internet.com/" WIDTH="161" HEIGHT="18"
BORDER="0"></A></FONT>
</CENTER>

</BODY>
</HTML>





