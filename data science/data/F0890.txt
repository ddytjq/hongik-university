ID=F0890
URL=http://www.visualbasicbooks.com/advVB6samplepg3.html
SIZE=7785
DATE=09/07/2002
TIME=13:27:12
DATASET=Visual Basic
HTML=<html>

<head>



<meta name="description"
content="Visual Basic books for all levels of visual basic programmers are featured and reviewed regularly. Only those Visual Basic books of highest quality appear on this site.">
<meta name="keywords" content="visual basic books,visual basic,vb books,visual basic sites,programming,win32 api,database,beginner,amazon,bookstore">

<title>Visual Basic Books</title>
</head>

<body bgcolor="#6373B5" text="#616161" link="#0000ff" vlink="#666666" alink="#CC9900">
<center>
<!-- BEGIN RICH-MEDIA BURST! CODE --> 
       <script language="JavaScript"> 
       <!-- /* © 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
       var TheAdcode = 'ad5645a'; 
       var bN = navigator.appName; 
       var bV = parseInt(navigator.appVersion); 
       var base='http://www.burstnet.com/'; 
       var Tv=''; 
       var agt=navigator.userAgent.toLowerCase(); 
       if (bV>=4) 
         {ts=window.location.pathname+window.location.search; 
          i=0; Tv=0; while (i< ts.length) 
             { Tv=Tv+ts.charCodeAt(i); i=i+1; } Tv="/"+Tv;} 
         else   {Tv=escape(window.location.pathname); 
          if( Tv.charAt(0)!='/' ) Tv="/"+Tv; 
                 else if (Tv.charAt(1)=="/")
       Tv=""; 
         if( Tv.charAt(Tv.length-1) == "/") 
           Tv = Tv + "_";} 
       if (bN=='Netscape'){ 
            if ((bV>=4)&&(agt.indexOf("mac")==-1))
       {  document.write('<s'+'cript src="'+ 
             base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
             +Tv+'">'); 
            document.write('</'+'script>');    
       } 
            else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
               TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
               document.write('<img src="' + base + 'cgi-bin/ads/' + 
               TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
               ' border=0 alt="Click Here"></a>');} 
        } 
       if (bN=='Microsoft Internet Explorer') 
        document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
       + 
         TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
         'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
         'frameborder=0 scrolling=no></ifr'+'ame>'); 
       // --> 
       </script> 
       <noscript><a href="http://www.burstnet.com/ads/ad5645a-map.cgi" target=_top> 
       <img src="http://www.burstnet.com/cgi-bin/ads/ad5645a.cgi" 
        width=468 height=60 border=0 alt="Click Here"></a> 
       </noscript> 
       <!-- END BURST CODE --> 
</center>


<table border="0" bgcolor="" cellpadding="0" cellspacing="0">
<tr><td><p align="center"><img src="../images/vblogo.jpg" border="0" alt="vb logo"></td></tr>
<tr> 
<td rowspan="3" valign="top" height="1"> <p>&nbsp;</p>

<p align="left"><font face= "verdana" color="#000000"><b>Visual Basic Books</b></font><br>
<a href="index.html"><font color="#ffffff">Home</font></a><br>
<a href="beginner.html"><font color="#ffffff">Visual Basic Beginner Books</font></a><br>
<a href="database.html"><font color="#ffffff">Visual Basic Database Books</font></a><br>
<a href="activex.html"><font color="#ffffff">Visual Basic ActiveX Books</font></a><br>
<a href="advanced.html"><font color="#ffffff">Visual Basic Advanced Books</font></a><br>
<a href="vbinternet.html"><font color="#ffffff">VB Internet Programming Books</font></a><br>


</p>
<p><font color="#000000" face="verdana"><b>Resources</b></font><br>
<a href="links.html"><font color="#FFFFFF">Visual Basic Links</font></a><br>
<a href="addlink.html"><font color="#FFFFFF">Add a Link</font></a><br>
<a href="esubscribe.html"><font color="#FFFFFF">Subscribe to Mailing List</font></a>

</p>

<p>


</font>


<td bgcolor="#ffffff" valign="middle"><h1 align="center"><img src="../images/anibook.gif" alt="" width="32" height="32"><font face="trebuchet ms, arial, helvetica" color="#000000"> Visual Basic Books </font><img src="../images/anibook.gif" alt="" width="32" height="32"></h1>

</td>






</tr><tr>
<td bgcolor="#ffffff" colspan="1" valign="top">



<table border="0" cellpadding="5"><tr><td>


<font  color="#000000" FACE="Verdana, Arial, Helvetica" SIZE="-1">

<center><H1> Advanced Microsoft Visual Basic 6 Chapter 1</h1></center>


<FONT FACE="Arial">
</B></FONT><P>Here are a few comments<B> </B>on this routine:</P>

<UL>
<LI>Although it’s a fabricated example, I’ve tried to make sure that it works and is complete.</LI>
<LI>It handles errors.</LI>
<LI>It uses delayed error handling internally.</LI>
<LI>It’s not right for you! You’ll need to rework the code and the structure to suit your particular needs and philosophy.</LI>
<LI>The error handler might raise errors.</LI>
<LI>It doesn’t handle errors occurring in the error handler.</LI>
<LI>It uses a local subroutine, <I>PreserveContext</I>. This subroutine is called only from within this routine, so we use a <I>GoSub</I> to create it. The result is that <I>PreserveContext</I> is truly private and fast—and it doesn’t pollute the global name space. (This routine preserves the key values found in the error object. Tip 11 explains a way to do this using a replacement <I>Err </I>object.)</LI></UL>

<P>Within <I>bDriveExists</I>, I’ve chosen to flag parameter errors and send the information back to the caller by using exceptions. The actual exception is raised using the <I>Raise</I> method of the Visual Basic error object (<I>Err.Raise</I>) and the return value of a function (<I>nLoadErrorDescription</I>). This return value is used to load the correct error string (typically held in string resources and <I>not</I> a database since you want to always be able to get hold of the string quickly). This string is placed into <I>Err.Description </I>just before the <I>Raise</I> method is applied to the error object. Reraising, without reporting, errors like this allows you to build a transaction model of error handling into your code. (See Tip 14 for more on this topic.)</P>
<P> The <I>nLoadErrorDescription </I>function is typically passed the error number (a constant telling it what string to load), and it returns this same number to the caller upon completion. In other words, the function <I>could</I> look something like this (omitting any boilerplate code):</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>Public Function nLoadErrorDescription(ByVal nCode As Integer)<BR>
<BR>
    ' Return the same error code we're passed.<BR>
    nLoadErrorDescription = nCode<BR>
<BR>
    ' Load the error text for nCode from some source and assign it <BR>
    ' to Err.Description.<BR>
    Err.Description = LoadResString(nCode)<BR>
<BR>
    Exit Function<BR>
<BR>
End Function</P></DIR>

</FONT><P>In this example, we’re using a string resource to hold the error text. In reality, the <I>routine</I> we normally use to retrieve an error string (and, indeed, to resolve the constant) is contained in what we call a ROOS—that’s a Resource Only Object Server, which we’ll come back to in Tip 10.</P>
<P>A good error handler is often complex, so we must ask ourselves another question: What will happen if we get an error in the error handler? Well, if we’re in the same local scope as the original error, the error is passed back up the call chain to the next available error handler. (See Tip 5 for more information on the call chain and this mechanism.) In other words, if you’re in the routine proper when this second error occurs, it will be handled &quot;above&quot; your routine; if that’s Visual Basic, you’re dead! &quot;OK,&quot; you say, &quot;to handle it more locally, I must have an error handler within my error handler.&quot; Sounds good—trouble is, it doesn’t work as you might expect. Sure, you can have an <I>On Error Goto xyz </I>(or <I>On Error Resume Next </I>or <I>On Error Resume 0</I>) in your error handler, but the trap will not be set; your code will not jump to <I>xyz</I> if an error occurs in your error handler. The way to handle an error in your error handler is to do it in another procedure. If you call another procedure from your error handler, that routine can have an error trap set. The net effect is that you <I>can</I> have error handling in your error handler just as long as another routine handles the error. The ability to handle errors in error handlers is fundamental to applying a transaction processing model of error handling to your application, a subject I’ll explain further in Tip 14.</P>
<P> To recap, the reason <I>GetAttr </I>doesn’t handle many (if any) internal errors is that to do so would take away its very flexibility. If the routine &quot;told&quot; you that the drive didn’t exist, by using, say, a message box, you couldn’t use it the way we did in <I>bDriveExists</I>.</P>
<P>If you’re still not convinced, I’ll be saying a little more on why raising errors is better than returning True or False later. But for now, let’s think BASICA!</P>

<center><a href="advVB6samplepg4.html">next page....</a></center>

</td></tr></table></table><tr><td bgcolor="#991100"><center>
<font FACE="Verdana, Arial, Helvetica" SIZE="-1"><font color="#FFFFFF">Email us your comments:<a href="mailto:contact@vbbooks.freeservers.com"><img src="../images/emailed.gif"alt="mail" border=0></a><br>Fax: 1(916)404-7719<br>&copy;1999 Valassis Enterprises. All rights reserved.</font>

<P>
<!--Start of WSTR Block-->
<script language=JavaScript>id=1530</script>
<script language=JavaScript src="http://www.meixler-tech.com/wstr/js.cgi"></script>
<!--End of WSTR Block-->
</center>


</body>
</html>

