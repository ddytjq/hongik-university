ID=E0696
URL=http://www.cprogramming.com/codej/issue4.html
SIZE=22197
DATE=12/07/02
TIME=19:23:33
DATASET=C
HTML=<html>

<HEAD>

<meta http-equiv="name" content="C and C++ game programming">

<meta name="keywords"

content="C++ programming, programmers, C++ tutorial, C, source code, tutorials, C++ compiler, binary tree">

<meta name="description"

content="Cprogramming.com is a combination of C++ tutorials, compiler information, programming links, a VERY ACTIVE programming message board, and C and C++ source code .">

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

<TITLE>Cprogramming.com: Code Journal Issue 2</TITLE>
</head>



<body bgcolor=white link="#ff0008" vlink="#ff0008">

  


<table cellspacing=0 cellpadding=0 border=0><tr><td valign=top width=1 bgcolor=black>
<img src="line.gif" width=1 height=62>




</td><td valign=top width=92>


<img src="one.gif" width=92 height=63><br><br>

<table><tr><td width=3></td><td>
<font size=2 face="arial" color="#b4b4b4">
<li><a href="/index.html">Home</a></li>
</font>

</td></tr></table>


<img src="learn.gif" width=92 height=30 alt="Learn"><br>


<table><tr><td width=3></td><td>
<font size=2 face="arial" color="#b4b4b4">
<li><a href="/tutorial.html">Tutorials</a></li>

<li><a href="/source.html">Source</a></li>
<li><a href="/books.html">Books</a></li>
<li><a href="http://www.cprogramming.com/cgi-bin/cdir/Cdirectory.cgi">Directory</a></li>
<li><A href="http://www.cprogramming.com/cgi-bin/quiz.cgi">Quiz</A></li>

</font>
</td></tr></table>


<img src="comp.gif" width=92 height=30 alt="Learn"><br>

<table><tr><td width=3></td><td>

<font size=2 face="arial" color="#b4b4b4">
<li><a href="/borland.html">Borland</a></li>

<li><a href="/djgpp.html">DJGPP</a></li>
<li><a href="/other.html">Other</a></li>
</font>
</td></tr></table>

<img src="q.gif" width=92 height=30 alt="Learn"><br>

<table><tr><td width=3></td><td>

<font size=2 face="arial" color="#b4b4b4">
<li><a href="http://www.cprogramming.com/board.html">C board</a></li>
<li><A href="/function.html">Functions</a></li>
<li><a href="/email.html">Email</a></li>
</font>
</td></tr></table>

 
 
</td><td valign=top width=1 bgcolor="#dfdfdf"><img src="dot.gif" width=1 height=1></td><td valign=top>



<A href="http://www.cprogramming.com/"><img src="cprog.gif" width=497 height=111 alt="Cprogramming.com - your resource for C/C++" border=0></A><center><A href="http://www.cprogramming.com/"></a>
<table border=0 cellspacing=0 cellpadding=0 width=470 height=84><tr><td align=center> 
 <iframe src="http://a.tribalfusion.com/f.ad?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" width=470 height=84 marginwidth=0 marginheight=0 hspace=0 vspace=0 frameborder=0 scrolling=no>
         <script language=javascript>
           randNum = ((new Date()).getTime() % 2147483648) + Math.random();
           document.write(
             "<a href='http://a.tribalfusion.com/i.click?site=Cprogrammingcom&adSpace=ROS&requestID=" + randNum + "' target=_blank >" +
             "<img src='http://a.tribalfusion.com/i.ad?site=Cprogrammingcom&adSpace=ROS&requestID=" + randNum + "'" +
               "width=468 height=60 border=0 alt='Click Here'><br><b>Click Here!</b></a>");
         </script>
         <noscript>
             <a href="http://a.tribalfusion.com/i.click?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" target=_blank >
             <img src="http://a.tribalfusion.com/i.ad?site=Cprogrammingcom&adSpace=ROS&requestID=622570084" 
                  width=468 height=60 border=0 alt="Click Here"><br><b>Click Here!</b></a>
         </noscript>
 </iframe></td></tr></table>
</center>
      <table>
        <tr> 
          <td width=20></td>
          <td> 
   <FONT SIZE="3" FACE="Times New Roman, Times, serif"> 
            <!-- #BeginEditable "maintext" --> 
            <P ALIGN="CENTER"><B><FONT SIZE="5" FACE="Arial, Helvetica, sans-serif">The 
              Latest Issue of Code Journal</FONT></B><BR>
              <FONT SIZE="1" FACE="Arial, Helvetica, sans-serif">(Back to <A HREF="/codejournal/index.htm">Code 
              Journal Main</A>)</FONT></P>
            <P><B>Code Journal</B> is a free, biweekly newsletter on programming 
              and computer science provided jointly by <A HREF="http://www.cprogramming.com/">Cprogramming.com</A> 
              and AI Horizon.             <P>This is the February 20th Issue. 
            <FONT SIZE="2" FACE="Courier New, Courier, mono"><B><A NAME="top">CODE 
            JOURNAL: Your Guide to Programming</A></B><BR>
            <BR>
            February 20, 2002<BR>
            <BR>
            In This Edition:<BR>
            - <A HREF="#welcome">Welcome to the Code Journal</A><BR>
            - <A HREF="#article1">Genetic Algorithms</A><BR>
            - <A HREF="#article2">Unraveling a Pattern of Strings</A><BR>
            <!-- - <A HREF="#qa">Questions and Answers</A><BR>--> - <A HREF="#challenge">Programming 
            Challenge</A><BR>
            <!-- - <A HREF="#errata">Errata</A><BR> --> <BR>
            <A NAME="welcome">Welcome</A> to the <B>Code Journal</B>, a joint 
            venture between <A HREF="http://www.cprogramming.com/">Cprogramming.com</A> 
            and <A HREF="http://www.aihorizon.com/">AI Horizon</A> that aims to 
            provide insightful articles on both C++ and algorithmic programming. 
            Code Journal is helpware: in return for reading it, you are asked 
            to help someone else out with their own programming problems. Good 
            luck, and quick compiling.<BR>
            <BR>
            <A NAME="article1">---------------------------------------------------------</A><BR>
            <B>C/C++ Programming by Alex Allain</B><BR>
            ---------------------------------------------------------<BR>
            <B>Genetic Algorithms</B><BR>
            <BR>
            This article will discuss the basic concept of <FONT COLOR="#009900">Genetic 
            Algorithms</FONT>. Genetic algorithms are useful for solving problems 
            having solutions representable as strings (hence the name Genetic 
            Algorithm - the programming model is based on DNA). In terms of practical 
            value, Genetic Algorithms are useful for solving problems in which 
            the solutions are difficult to find by following a set algorithm. 
            It functions as a sort of systematized brute force approach. Problems 
            Genetic Algorithms are valuable for solving include scheduling problems, 
            game AI, and other problems in which stable solutions are difficult 
            to find.<BR>
            <BR>
            A simple example is finding a five digit number that acts as the best 
            solution to an expression; for example, if you wish to find the number 
            that makes the expression x^2+2x-11 equal to 0, you could of course 
            use brute force to solve the equation, but a genetic algorithm can 
            also be used, and if you have a very complex expression, it may be 
            of great value to use a genetic algorithm, especially when one considers 
            the time saved over brute force. In a sense, all Genetic Algorithm 
            problems boil down to solving complex expressions or sets of expressions, 
            as all problems are representable in that fashion.<BR>
            <BR>
            Genetic algorithms work from the same basis as evolutionary theory. 
            A genetic algorithm has several components: a <FONT COLOR="#009900">pool 
            of solutions</FONT>, a method of evaluating the effectiveness of each 
            solution, a <FONT COLOR="#009900">breeding function</FONT> that combines 
            the best solutions into new solutions, and a <FONT COLOR="#009900">mutation 
            function</FONT>. The pool of solutions do not compete for resources; 
            rather, each solution is tested by an evaluation function (called 
            the <FONT COLOR="#009900">"fitness" function</FONT>), which then gives 
            it a ranking based on its effectiveness at solving the problem compared 
            to the other solutions. <BR>
            <BR>
            The best solution strings are the ones that are ranked highest (that 
            are the most "fit"); the breeding function takes two of the better 
            performing solutions and combines them together into a new solution. 
            The breeding function should repeat the process of randomly selecting 
            two solutions and breeding them; the better performing functions should 
            be given the higher percentage chance of being selected. <BR>
            <BR>
            The breeding function generally works by taking slices of each solution 
            and splicing them together into a new one. Solutions are often represented 
            as strings, so generally, a breeding function will take fragments 
            of random lengths from each string and concatenate them together to 
            form a new string. Each fragment should be placed into the location 
            in the new string that corresponds to its location in the old string. 
            For example, if a string fragment is from positions 5 to 8 in the 
            first string being bred, it should be placed into positions 5 through 
            8 in the new child solution.<BR>
            <BR>
            After the strings have been bred, and the set of potential solutions 
            has been refilled, it is important to have the mutation function. 
            The mutation function is important because it introduces an element 
            of randomness that allows variation in the solution sets, which otherwise 
            would stagnate and have no advantage over a hand-crafted solution. 
            Mutations may diminish the strength of some solutions, but in general 
            it will increase the overall value of the solution set; by including 
            a very small mutation rate, you introduce new traits that might never 
            have otherwise existed within the pool. <BR>
            <BR>
            ************************************<BR>
            Alexander Allain is the webmaster of <A HREF="http://www.cprogramming.com/">Cprogramming.com</A>.<BR>
            Contact him at <A HREF="mailto:webmaster@cprogramming.com">webmaster@cprogramming.com</A> 
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <BR>
            <A NAME="article2">---------------------------------------------------------</A><BR>
            <B>Algorithms and Programming by Eric Suh</B><BR>
            ---------------------------------------------------------<BR>
            Unraveling Patterns of Strings <BR>
            <BR>
            Imagine that you are given a large string of text, and you wish to 
            find a certain string that it contains. The text you are searching 
            through is called the <FONT COLOR="#009900">master string</FONT> and 
            the string you are searching for is called the <FONT COLOR="#009900">pattern 
            string</FONT>. Now, there is a simple algorithm, for this search, 
            and then there is an efficient one. The simple one, of course, follows 
            like this: 
            <PRE CLASS="code">                     -------------
   Master String:    GGRLGGT...
   Pattern String:   GGT
                     -------------</PRE>
            You see that the first two letters match in this position, but the 
            third R T | character does not. Shift the pattern one character to 
            the right. 
            <PRE CLASS="code">                     -------------
   Master String:    GGRLGGT...
   Pattern String:    GGT
                     -------------</PRE>
            Now, the second character in the pattern doesn't match. Shift again.<BR>
            <BR>
            And so on. The problem is that in this search, you are making a lot 
            of unnecessary comparisons. In the first step, for instance, we see 
            that since 'R' doesn't appear at all in the pattern, the next two 
            string comparisons are a waste.<BR>
            <BR>
            What we could do is take the pattern and shift it until the 'R' is 
            behind it. That would save a few comparisons. The new algorithm could 
            get away with only 3 shifts of the pattern to find the match. This 
            algorithm is called the <FONT COLOR="#009900">Boyer-Moore String Search 
            Algorithm</FONT>.<BR>
            <BR>
            The algorithm, first of all, works back to front when comparing the 
            pattern and the master string. The pattern is still moved from front 
            to back, but the comparisons are made from the last character of the 
            pattern. So, in the first step of the above example, the algorithm 
            would compare 'T' in the pattern with 'R' in the master string.<BR>
            <BR>
            If there is a mismatch, such as in the first step of example, then 
            the algorithm goes through the pattern and finds in the remaining 
            part of the pattern the rightmost occurrence of the mismatched character 
            of the master string. <BR>
            <BR>
            Now, this would be slow if you did this every loop, so the algorithm 
            is usually precomputed. That means that you go through the pattern 
            and record some often-used data into tables. Specifically, you need 
            to know how much to shift for any character that you might encounter 
            when there isn't a match. You precompute for each character how far 
            you would shift the pattern if that character were to appear in the 
            master string while we were comparing the last character in the pattern. 
            Then, when we search, we can offset the table value with how far we've 
            matched the pattern and the master string.<BR>
            <BR>
            The table for the pattern of the example might look like this: 
            <PRE CLASS="code">            G : 1
            T : 0</PRE>
            Any character that doesn't appear in the table would signify a shift 
            of the length of the pattern. So, in the first step of the example, 
            the pattern would be shifted 3 (since 'R' doesn't appear in the example 
            string at all).<BR>
            <BR>
            Let's take a more complicated pattern: 
            <PRE CLASS="code">            TAWEGAGATA</PRE>
            The searching table would look like this: (For convenience sake, the 
            algorithm takes the second occurrence from the end of the last letter.) 
            <PRE CLASS="code">            A: 2
            E: 6
            G: 3
            T: 1
            W: 7</PRE>
            The algorithm also computes substrings. For instance, say that we 
            matched the last two characters of this new pattern. The character 
            bank doesn't help very much, since it only tells us to shift it once. 
            What we would like is if the algorithm saw that there was a pattern 
            in the string, and that the "TA" substring occurs again at the beginning 
            of the string.<BR>
            <BR>
            Well, the algorithm does, and we compute substrings before the search. 
            There are only as many substrings as there are characters in the pattern, 
            because we are only looking for substrings that include the last character 
            of the pattern (since we're searching from the last character to the 
            left).<BR>
            <BR>
            There are only seven values in the substring table, one for each character. 
            The value at each character is where the next occurrence is of the 
            part of the pattern up to that character. So, the value at the second 
            to last 'A' of the substring table would contain the shift value for 
            the substring "TA".<BR>
            <BR>
            The substring table would look like this: 
            <PRE CLASS="code">            T: 8
            A: 8
            W: 8
            E: 8
            G: 8
            A: 8
            G: 8
            A: 8
            T: 2
            A: 1</PRE>
            Thus, the algorithm takes whatever is larger, the character shift 
            value or the substring value, and shifts the pattern by that much. 
            So, the pattern skips some of the letters when searching, which greatly 
            increases the speed of the search. This search is one of the best 
            search algorithms for natural text. It should be interesting to program 
            this.<BR>
            <BR>
            ************************************<BR>
            Eric Suh is the webmaster of <A HREF="http://www.aihorizon.com/">AI 
            Horizon</A>, a site devoted to Artificial Intelligence and Computer 
            Science programming.<BR>
            Contact him at <A HREF="mailto:webmaster@aihorizon.com">webmaster@aihorizon.com</A>.<BR>
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <BR>
            <!--
            <A NAME="qa">---------------------------------------------------------</A><BR>
            <B>Questions and Answers on Programming</B><BR>
            ---------------------------------------------------------<BR>
            In response to the numerous emails Cprogramming.com receives, I have 
            written an article on common programming mistakes. Due to its length, 
            it is available only online. Read it at <A HREF="http://www.cprogramming.com/tutorial/common.html">http://www.cprogramming.com/tutorial/common.html</A><BR>
            <BR>
            If you have a question on programming, send it in to either <A HREF="questions@cprogramming.com">Cprogramming.com</A> 
            or <A HREF="questions@aihorizon.com">AI Horizon</A> and your question 
            may be answered here.<BR>
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <BR> --> <A NAME="challenge">---------------------------------------------------------</A><BR>
            <B>Code Challenge</B><BR>
            ---------------------------------------------------------<BR>
            Every issue, we will issue a programming challenge and ask people 
            to submit their solutions within two weeks. A few of the best solutions 
            will be published the next issue, along with a new challenge.<BR>
            <BR>
            No one submitted any answers to last week's code challenge, so we 
            will offer it again this week, except with a hint.<BR>
            <BR>
            This Week's Challenge<BR>
            ------------------------------------<BR>
            <BR>
            One famous chess problem is the <FONT COLOR="#009900">Knight's Tour</FONT>, 
            in which a knight, placed on a starting square, is then moved to every 
            other square on the chessboard. The Knight's Tour is a fairly typical 
            chess problem. Your challenge is not only to write a program to calculate 
            the Knight's Tour from any square on the board, but also to allow 
            the user to add up to five pieces to the board that the moving knight 
            must avoid capturing and must also avoid being moved onto a square 
            where it could be captured. As an interesting note, in <I>The Psychology 
            of Chess,</I> the authors talk about a test for chess talent that 
            works under similar conditions and is based on the speed of response. 
            The test accurately predicated a future grandmaster.<BR>
            <BR>
            <FONT COLOR="#FF3333">HINT:</FONT> Use recursion. <BR>
            <BR>
            Send your solutions to <A HREF="mailto:codejournal@cprogramming.com">solutions@cprogramming.com</A> 
            as source code files, and you may find it published. Please include 
            either your name or an identifying username so that we may attribute 
            the solution to you in the next newsletter. If you wish, you may ask 
            us to withhold your name.<BR>
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV>
            <!-- <BR>
            <A NAME="errata">---------------------------------------------------------</A><BR>
            <B>Errata</B><BR>
            ---------------------------------------------------------<BR>
            <BR>
            In the previous issue Eric stated that Fortran had rigid formatting 
            requirements; however, the latest Fortran standard frees the programmer 
            from these restrictions. <BR>
            <DIV ALIGN="RIGHT"><FONT SIZE="1" FACE="Arial, Helvetica, sans-serif"><A HREF="#top">(Return 
              to Top)</A></FONT></DIV> -->
            <BR>
            ---------------------------------------------------------<BR>
            Suggestions and comments on this newsletter should be sent to <A HREF="mailto:codejournal@cprogramming.com">codejournal@cprogramming.com</A> 
            or <A HREF="mailto:codejournal@aihorizon.com">codejournal@aihorizon.com</A>.<BR>
            <BR>
            <B>Editors:</B><BR>
            Eric Suh, <A HREF="mailto:webmaster@aihorizon.com">webmaster@aihorizon.com<BR>
            </A> Alexander Allain, <A HREF="mailto:webmaster@cprogramming.com">webmaster@cprogramming.com</A><BR>
            <BR>
            To unsubscribe from this journal, send a blank email to <A HREF="mailto:codejournal-unsubscribe@mlm.cprogramming.com">codejournal-unsubscribe@mlm.cprogramming.com</A>. 
            </FONT> <!-- #EndEditable --></FONT>          </td>
        </tr>
        <tr>
          <td width=20></td>
          <td>&nbsp;</td>
        </tr>
      </table>
</td></tr></table>








	
</body>



<SCRIPT LANGUAGE="JavaScript">
	<!--
		document.write("<IMG SRC=\"/cgi-bin/axs/ax.pl?trans.gif&ref=");
		document.write(document.referrer);
		document.write("\" HEIGHT=1 WIDTH=1>");
	// -->
	</SCRIPT><NOSCRIPT>
		</NOSCRIPT></html>
