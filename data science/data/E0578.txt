ID=E0578
URL=http://www.linuxdoc.org/HOWTO/C++Programming-HOWTO-14.html
SIZE=6020
DATE=12/07/02
TIME=19:22:23
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>C++ Programming HOW-TO: C++ Coding Conventions</TITLE>
 <LINK HREF="C++Programming-HOWTO-15.html" REL=next>
 <LINK HREF="C++Programming-HOWTO-13.html" REL=previous>
 <LINK HREF="C++Programming-HOWTO.html#toc14" REL=contents>
</HEAD>
<BODY>
<A HREF="C++Programming-HOWTO-15.html">Next</A>
<A HREF="C++Programming-HOWTO-13.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc14">Contents</A>
<HR>
<H2><A NAME="s14">14. C++ Coding Conventions</A></H2>

<P>Coding convention is very essential for readability and maintenance of programs. And
it also greatly improves the productivity of the programmer. 
Coding convention is required for good coding discipline.
The following is suggested - 
inside class definition:
<UL>
<LI> All public variables must begin with <B>m</B> like <B>mFooVar</B>. 
The <B>m</B> stands for <I>member</I>.</LI>
<LI> All protected variables must begin with <B>mt</B>, 
like <B>mtFooVar</B> and methods with t, like <B>tFooNum()</B>. 
The <B>t</B> stands for <I>protected</I>.</LI>
<LI> All private variables must begin with <B>mv</B>, like <B>mvFooVar</B> and 
methods with v, like <B>vFooLone()</B>. The <B>v</B> stands for <I>private</I>.</LI>
<LI> All public, protected and private variables must begin with 
uppercase after <B>m</B> like F in <B>mFooVar</B>. </LI>
<LI> All pointer variables must be prefixed with p, like 
<UL>
<LI>Public variables <B>mpFooVar</B>  and methods like FooNum()</LI>
<LI>Protected variables <B>mtpFooVar</B> and methods with t like tFooNum()</LI>
<LI>Private variables <B>mvpFooVar</B> and methods with v like vFooNum()</LI>
</UL>
</LI>
</UL>

Uniform world-wide coding convention for C++ language will help better programming.
<P>In the sample code given below <B>t</B> stands for <B>protected</B>,
<B>v</B> stands for <B>private</B>,
<B>m</B> stands for <B>member-variable</B> and
<B>p</B> stands for <B>pointer</B>.
<HR>
<PRE>
class SomeFunMuncho
{
        public:
                int     mTempZimboniMacho; // Only temporary variables should be public as per OOP
                float   *mpTempArrayNumbers;
                int     HandleError();
                float   getBonyBox();  // Public accessor as per OOP design
                float   setBonyBox();  // Public accessor as per OOP design
        protected:
                float   mtBonyBox;
                int     *mtpBonyHands;
                char    *tHandsFull();
                int     tGetNumbers();
        private:
                float   mvJustDoIt;
                char    mvFirstName[30];
                int     *mvpTotalValue;
                char    *vSubmitBars();
                int     vGetNumbers();
};
</PRE>
<HR>

When your program grows by millions of lines of code, then you will greatly
appreciate the naming convention as above. The readability of code improves,
because just by looking at the variable name like <B>mvFirstName</B> you can
tell that it is member of a class and is a private variable.
<P>Visit the C++ Coding Standards URLs
<UL>
<LI> C++ FAQ Lite - Coding standards 
<A HREF="http://www.parashift.com/c++-faq-lite/coding-standards.html">http://www.parashift.com/c++-faq-lite/coding-standards.html</A></LI>
<LI> Rice university coding standard 
<A HREF="http://www.cs.rice.edu/~dwallach/CPlusPlusStyle.html">http://www.cs.rice.edu/~dwallach/CPlusPlusStyle.html</A></LI>
<LI> Identifiers to avoid in C++ Programs 
<A HREF="http://oakroadsystems.com/tech/cppredef.htm">http://oakroadsystems.com/tech/cppredef.htm</A></LI>
<LI> Coding standards from Possibility 
<A HREF="http://www.possibility.com/Cpp/CppCodingStandard.html">http://www.possibility.com/Cpp/CppCodingStandard.html</A>
and 
<A HREF="http://www.cs.umd.edu/users/cml/cstyle/CppCodingStandard.html">mirror site</A></LI>
<LI> Coding standards for Java and C++ from Ambysoft 
<A HREF="http://www.ambysoft.com/JavaCodingStandards.html">http://www.ambysoft.com/JavaCodingStandards.html</A></LI>
<LI> Rules and recommendations 
<A HREF="http://www.cs.umd.edu/users/cml/cstyle/">http://www.cs.umd.edu/users/cml/cstyle/</A></LI>
<LI> Indent and annotate 
<A HREF="http://www.cs.umd.edu/users/cml/cstyle/indhill-annot.html">http://www.cs.umd.edu/users/cml/cstyle/indhill-annot.html</A></LI>
<LI> Elemental rules 
<A HREF="http://www.cs.umd.edu/users/cml/cstyle/Ellemtel-rules.html">http://www.cs.umd.edu/users/cml/cstyle/Ellemtel-rules.html</A></LI>
<LI> C++ style doc 
<A HREF="http://www.cs.umd.edu/users/cml/cstyle/Wildfire-C++Style.html">http://www.cs.umd.edu/users/cml/cstyle/Wildfire-C++Style.html</A></LI>
<LI> C++ Coding Standards by Brett Scolcum 
<A HREF="http://www.skypoint.com/~slocum/prog/cppstds.html">http://www.skypoint.com/~slocum/prog/cppstds.html</A></LI>
<LI> Logikos C++ Coding Standards 
<A HREF="http://www.logikos.com/standards/cpp_std.html">http://www.logikos.com/standards/cpp_std.html</A></LI>
<LI> NRad C++ coding standards 
<A HREF="http://cadswes.colorado.edu/~billo/standards/nrad">http://cadswes.colorado.edu/~billo/standards/nrad</A></LI>
<LI> BEJUG C++ coding standards 
<A HREF="http://www.meurrens.org/ip-Links/java/joodcs/ToddHoff.html">http://www.meurrens.org/ip-Links/java/joodcs/ToddHoff.html</A></LI>
<LI> Arctic Labs coding standards 
<A HREF="http://www.arcticlabs.com/codingstandards">http://www.arcticlabs.com/codingstandards</A>
<P>See also
</LI>
<LI> For rapid navigation with ctags 
<A HREF="http://www.linuxdoc.org/LDP/HOWTO/Vim-HOWTO.html">Vim color text editor</A></LI>
<LI> To improve productivity see 
<A HREF="http://www.linuxdoc.org/LDP/HOWTO/C-C++Beautifier-HOWTO.html">C++ Beautifier HOWTO</A></LI>
</UL>
<P>
<P>
<HR>
<A HREF="C++Programming-HOWTO-15.html">Next</A>
<A HREF="C++Programming-HOWTO-13.html">Previous</A>
<A HREF="C++Programming-HOWTO.html#toc14">Contents</A>
</BODY>
</HTML>

