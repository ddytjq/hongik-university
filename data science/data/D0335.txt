ID=D0335
URL=http://www.absolutejava.com/articles/using-one-element-arrays-to-wrap-primitives.html
SIZE=7960
DATE=16/07/02
TIME=14:43:23
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML>
<HEAD><TITLE>Absolute Java - Using One-Element Arrays to Wrap Primitives</TITLE>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=ISO-8859-1">
<LINK REL="stylesheet" HREF="../styles.css" TYPE="text/css">
</HEAD>
<BODY>
<p class="subtitle" style="margin-top:0px">Using One-Element Arrays to Wrap Primitives</p>
<div class="postSubtitle"><i>This is an article I originally wrote for the August, 2001 edition of <a href="http://www.fawcette.com/javapro/" target="_blank">JavaPro Magazine</a>.
</i></DIV>
	<p>There are often times when it is necessary to maintain a primitive type value (e.g., <code>int</code>, <code>char</code>, etc.) using one of the &quot;primitive wrapper&quot; classes. A common example of this is the problem of maintaining a counter of the number of times a particular object appears in the data you are processing. Let's look at an example of an approach to counting the number of times a unique <code>String</code> is passed to a method. The method below maintains a mapping between the unique <code>String</code>s passed to it and the number of times each unique <code>String</code> is passed:</p>
<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
<!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>void</span> incrementWordCount<span class='codeSeparator'>(</span>String s, Map m<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   Integer counter <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span>Integer<span class='codeSeparator'>)</span>m.get<span class='codeSeparator'>(</span>s<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;   <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>counter <span class='codeOperatorLiteral'>==</span> <span class='codeKeyword'>null</span><span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;      counter <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Integer<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   <span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      counter <span class='codeOperatorLiteral'>=</span> <span class='codeOperatorLiteral'>new</span> Integer<span class='codeSeparator'>(</span>counter.intValue<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span> <span class='codeOperatorLiteral'>+</span> <span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;&nbsp;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;   m.put<span class='codeSeparator'>(</span>s, counter<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>9</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// incrementWordCount()</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->





<p>The problem with this code is that it may create an excessive number of objects, depending on how frequently the <code>incrementWordCount()</code> method is called. Since Java's primitive wrapper objects are immutable, each time the counter is incremented it is necessary to create a new <code>Integer</code> object whose value is one plus the previous value. Excessive temporary object creation (and its associated garbage collection) can cause performance problems.</p>
<p>In cases like this it may be preferable to use a one-element array rather than a primitive wrapper class (such as <code>Integer</code>). Here's the <code>incrementWordCount()</code> method re-written to use a one-element array of int instead of <code>Integer</code> objects:</p>
	<!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
   <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>void</span> incrementWordCount<span class='codeSeparator'>(</span>String s, Map m<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   <span class='codeKeyword'>int</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> counter <span class='codeOperatorLiteral'>=</span> <span class='codeSeparator'>(</span><span class='codeKeyword'>int</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span><span class='codeSeparator'>)</span>m.get<span class='codeSeparator'>(</span>s<span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;   <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>counter <span class='codeOperatorLiteral'>==</span> <span class='codeKeyword'>null</span><span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;      m.put<span class='codeSeparator'>(</span>s, <span class='codeOperatorLiteral'>new</span> <span class='codeKeyword'>int</span><span class='codeSeparator'>[</span><span class='codeSeparator'>]</span> <span class='codeSeparator'>{</span><span class='codeIntegerLiteral'>1</span><span class='codeSeparator'>}</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;   <span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;      <span class='codeOperatorLiteral'>++</span>counter<span class='codeSeparator'>[</span><span class='codeIntegerLiteral'>0</span><span class='codeSeparator'>]</span>;</td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeComment'>// incrementWordCount()</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->





<p>This code allocates a one-element <code>int</code> array to be used as the counter.
	There are two advantages to using this approach over allocating a new
	<code>Integer</code> objects. The first advantage is that we've avoided excessive
	object creation. When the counter needs to be incremented we simply
	retrieve the existing one-element array from the <code>Map</code> and increment its
	(only) element. A new <code>int[]</code> is created only when a word is encountered
	for the first time. The second advantage is that there is no need to
	&quot;re-add&quot; the updated <code>int[]</code> to the <code>Map</code> after incrementing the counter.</p>
<p>Using a one-element array is a general technique for wrapping primitive
	type values with an object, allowing the primitive value to be modified
	without requiring creation of a new object. Of course, whether or not
	it is appropriate to use this technique will depend on your
	application. Java primitive wrappers have functionality that you cannot
	get from a simple one-element array. If you find it necessary to
	frequently update the value maintained in a primitive wrapper, however,
	you should give serious consideration to the viability of using a
	one-element array.
</p>
<DIV ALIGN="center">
<P STYLE="font-size:9pt; font-family:verdana,arial,helvetica; color: black">
Copyright &copy; 1999-2002, Tony LaPaso<BR>
		All Rights Reserved.</P>
</DIV></BODY></HTML>
