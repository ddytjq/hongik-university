ID=E0924
URL=http://www.delorie.com/djgpp/v2faq/faq17_1.html
SIZE=8851
DATE=12/07/02
TIME=19:25:52
DATASET=C
HTML=<html><head><title>DJGPP FAQ -- GCC/Gas won't accept valid assembly code <small>...</small></title>
<base href="http://www.delorie.com/djgpp/v2faq/faq17_1.html">
</head><body><center><!-- BEGIN RICH-MEDIA BURST! CODE --> 
     <script language="JavaScript"> 
     <!-- /* (C) 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
     var TheAdcode = 'ad1954a'; 
     var bN = navigator.appName; 
     var bV = parseInt(navigator.appVersion); 
     var base='http://www.burstnet.com/'; 
     var Tv='/5292'; 
     var agt=navigator.userAgent.toLowerCase(); 
     if (bN=='Netscape'){ 
          if ((bV>=4)&&(agt.indexOf("mac")==-1))
     {  document.write('<s'+'cript src="'+ 
           base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
           +Tv+'">'); 
          document.write('</'+'script>');    
     } 
          else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
             TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
             document.write('<img src="' + base + 'cgi-bin/ads/' + 
             TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
             ' border=0 alt="Click Here"></a>');} 
      } 
     if (bN=='Microsoft Internet Explorer') 
      document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
     + 
       TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
       'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
       'frameborder=0 scrolling=no></ifr'+'ame>'); 
     // --> 
     </script> 
     <noscript><a href="http://www.burstnet.com/ads/ad1954a-map.cgi" target=_top> 
     <img src="http://www.burstnet.com/cgi-bin/ads/ad1954a.cgi" 
      width=468 height=60 border=0 alt="Click Here"></a> 
     </noscript> 
     <!-- END BURST CODE --> 
<table width=100% border=0 cellspacing=0 cellpadding=3><tr><td align=left valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/" target="_top">www.delorie.com</a>/<a href="/djgpp/" target="_top">djgpp</a>/<a href="/djgpp/v2faq/" target="_top">v2faq</a>/faq17_1.html</b></font></small></td>
<td align=right valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/search/">search</a> &nbsp;
</b></font></small></td>
</tr></table><a href="bulktrap.html"></a></center>

Node:<a name="Syntax">Syntax</a>,
Next:<a rel=next href="faq17_2.html">Converting ASM</a>,
Previous:<a rel=previous href="faq17.html">Converting</a>,
Up:<a rel=up href="faq17.html">Converting</a>
<br>

<h2>17.1 GCC/Gas won't accept valid assembly code <small>...</small></h2>

<p><em><strong>Q</strong>: I have some code written in assembly which compiles under
<small>MASM</small> and <small>TASM</small>, but GCC gives me a long list of error
messages.</em>

<br><p>
<p><strong>A</strong>: The GNU Assembler (<code>as.exe</code>), or <code>Gas</code>, called by GCC
accepts the <dfn>AT&amp;T syntax</dfn>, which is different from the <dfn>Intel
syntax</dfn>.  Notable differences between the two syntaxes are:

<ul>
<li>AT&amp;T immediate operands are preceded by <code>$</code>; Intel immediate operands
are undelimited (Intel <code>push 4</code> is AT&amp;T <code>pushl $4</code>).

<li>AT&amp;T register operands are preceded by <code>%</code>; Intel register operands
are undelimited.  AT&amp;T absolute (as opposed to PC-relative)
<code>jump</code>/<code>call</code> operands are prefixed by <code>*</code>; they are
undelimited in Intel syntax.

<li>AT&amp;T and Intel syntax use the opposite order for source and destination
operands.  Intel <code>add&nbsp;eax,&nbsp;4</code> is <code>addl&nbsp;$4,&nbsp;%eax</code> in
AT&amp;T syntax.

<p>The <code>source, dest</code> convention is maintained for compatibility with
previous Unix assemblers, so that GCC won't care about the assembler with
which it is configured, as some of GCC installations (on systems other
than MS-DOS) don't use GNU Binutils.

</p><li>In AT&amp;T syntax, the size of memory operands is determined from the
last character of the opcode name.  Opcode suffixes of <code>b</code>,
<code>w</code>, and <code>l</code> specify byte (8-bit), word (16-bit), and long
(32-bit) memory references.  Intel syntax accomplishes this by prefixing
memory operands (<em>not</em> the opcodes themselves) with <code>`byte
ptr'</code>, <code>`word ptr'</code>, and <code>`dword ptr'.</code>  Thus, Intel
<code>mov&nbsp;al,&nbsp;byte&nbsp;ptr&nbsp;FOO</code> is <code>movb&nbsp;FOO,&nbsp;%al</code> in AT&amp;T
syntax.

<li>Immediate form long jumps and calls are
<code>lcall/ljmp&nbsp;$SECTION,&nbsp;$OFFSET</code> in AT&amp;T syntax; the Intel syntax
is <code>call/jmp&nbsp;far&nbsp;SECTION:OFFSET.</code>  Also, the far return
instruction is <code>lret&nbsp;$STACK-ADJUST</code> in AT&amp;T syntax; Intel syntax
is <code>ret&nbsp;far&nbsp;STACK-ADJUST.</code>

<li>The AT&amp;T assembler does not provide support for multiple-section (a.k.a. 
multi-segment) programs.  Unix style systems expect all programs to be
single-section.

<li>An Intel syntax indirect memory reference of the form

<pre> SECTION:[BASE + INDEX*SCALE + DISP]
</pre>

<p>is translated into the AT&amp;T syntax

<pre> SECTION:DISP(BASE, INDEX, SCALE)
</pre>

</ul>

<p>Examples:

<pre>    <strong>Intel:</strong>  [ebp - 4]         <strong>AT&amp;T:</strong>  -4(%ebp)
    <strong>Intel:</strong>  [foo + eax*4]     <strong>AT&amp;T:</strong>  foo(,%eax,4)
    <strong>Intel:</strong>  [foo]             <strong>AT&amp;T:</strong>  foo(,1)
    <strong>Intel:</strong>  gs:foo            <strong>AT&amp;T:</strong>  %gs:foo
</pre>

<p>For a complete description of the differences,
see <a href="http://www.delorie.com/gnu/docs/binutils/as_164.html">GNU assembler documentation</a>.  If you don't
read this FAQ with an Info browser, download <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/bnu281b.zip">GNU Binutils</a>,
unzip the files named <code>as.iN</code> (where <code>N</code> is a digit) from
it, then type at the DOS prompt:

<pre> info as machine i386
</pre>

<p>You will see a menu of <code>Gas</code> features specific to x86 architecture.

<p>A user guide for inline assembly was written by <a href="mailto:brennan@rt66.com">Brennan Underwood</a>; it describes how to use inline assembly programming
with DJGPP and includes a tutorial on the AT&amp;T assembly syntax.  Check
out the <a href="http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline_djgpp.html">DJGPP inline assembly tutorial</a>.

<p>Another useful tutorial about writing separate assembly-language modules
for DJGPP was written by <a href="mailto:george.foot@merton.oxford.ac.uk">George Foot</a> and is available from <a href="http://users.ox.ac.uk/~mert0407/asmfuncs.txt">George's home page</a>.

<p>The DJGPP User's Guide also has a <a href="http://www.delorie.com/djgpp/doc/ug/asm/">tutorial on writing assembly-language code</a>.  One of the
sections there describes the <a href="http://www.delorie.com/djgpp/doc/ug/asm/about-386.html">CPU architecture</a>, which is geared
towards assembly-language programming.

<p>Yet another tutorial on the subject of inline assembly is available at
&lt;<code>http://www.castle.net/~avly/djasm.html</code>&gt;.

<p>Many people who used Intel syntax and then converted to the AT&amp;T style
say that they like the AT&amp;T variant more.  However, if you prefer to
stick with the Intel syntax, download and install <a href="http://www.web-sites.co.uk/nasm/"><small>NASM</small></a>, which is a free portable assembler.  It is
compatible with DJGPP and accepts a syntax which is much more similar to
the Intel style.  A guide for using <small>NASM</small> with DJGPP was written by
<a href="mailto:mmastrac@acs.ucalgary.ca">Matthew Mastracci</a> and is available
from <a href="http://www.acs.ucalgary.ca/~mmastrac/files/djgppasm.html">Matthew's Web page</a>.

<p>Note that Binutils maintainers are working on adding an option to Gas
which will cause it accept the Intel syntax as well, so it is most
probable that beginning with Binutils 2.10, Gas will have this feature.

<p><hr>



<br clear=both></p>
<a href="bulktrap.html"></a><table width=100% border=0 cellspacing=0 cellpadding=3><tr>
<td align=left valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/users/dj/" target="_top">webmaster</a> &nbsp;
<a href="/donations.html" target="_top">donations</a> &nbsp;
<a href="/store/books/" target="_top">bookstore</a> &nbsp;
</b></font></small></td>
<td align=right valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/" target="_top">delorie software</a> &nbsp;
<a href="/privacy.html" target="_top">privacy</a> &nbsp;
</b></font></small></td>
</tr><tr><td align=left valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
<a href="/copyright.html" target="_top">Copyright © 2001</a> &nbsp;
<a href="/users/eliz/" target="_top">by Eli Zaretskii</a> &nbsp;
</b></font></small></td>
<td align=right valign=top bgcolor="#ffcc99"><small><font face="itc avant garde gothic,helvetica,arial"><b> &nbsp;
Updated Apr 2001 &nbsp;
</b></font></small></td>
</tr></table>
<center><iframe
 SRC="http://www.burstnet.com/cgi-bin/ads/ba1954a.cgi/RETURN-CODE/if/5292/"
 scrolling="no" marginwidth="0" marginheight="0" frameborder="0" vspace="0" hspace="0"
 width="468" height="60"><A target="_top"
 HREF="http://www.burstnet.com/ads/ba1954a-map.cgi/5292"><IMG SRC="http://www.burstnet.com/cgi-bin/ads/ba1954a.cgi/5292"
 border="0" width="468" height="60" alt="Please support our sponsor."></A></iframe><br><small><i>Please take a moment to fill out
this <a href="http://survey.burstmedia.com/cgi-win/client.exe?Burst,welcome,ad1954a,2000">visitor survey</a></i></small>
<br><small><i>You can help support this site by
visiting the advertisers that sponsor it! (only once each, though)</i></small>
</center>
</body></html>


