ID=F0026
URL=http://www.vbuniverse.co.uk/cg.html
SIZE=29413
DATE=09/07/2002
TIME=13:12:38
DATASET=Visual Basic
HTML=<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>vb tutorial</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body bgcolor="#FFFFFF">

<p><font face="Arial" color="#FF0000"><big>The Three Elements of Visual Basic Programming</big></font><i></p>

<p>by Carl Franklin</i> </p>

<p>There are three major areas of knowledge that Visual Basic programming requires: </p>

<p>&nbsp; 

<ul>
  <li><a href="#UI">User Interface design</a> </li>
  <li><a href="#Lang">The Visual Basic language</a> </li>
  <li><a href="#Win">Windows programming issues</a> </li>
  <li><a href="#Advice">Last Minute Advice</a> </li>
</ul>

<p><a name="UI">&nbsp;</p>

<hr SIZE="7">

<p><img border="0" hspace="20" src="uibtn.gif" WIDTH="184" HEIGHT="33"> </p>

<p>If you have played at all with Visual Basic, then you probably know how to drop a
button control on a form, move it around, size it, and maybe even set a few properties
such as the Caption property or the Name property. I am assuming that you have at least
done this. When you click on a control and paint it on a form, you are designing a User
Interface, or the means by which the user operates and interacts with your application. </p>

<p>The User Interface is very important. Different applications have different
requirements. Obviously, an application which requires lots of data entry, such as an
accounting package, has to be fairly keyboard oriented, and should not require lots of
screens to wade through. On the other hand, a conceptual application such as a graphical
mechanical controller application should be mouse-oriented, with lots of drag and drop
control. </p>

<p>User Interface design is a new and esoteric field. This is usually the first point of
contact with Visual Basic for most people... <i>&quot;Oh, I could put a button here, and a
list box here, and... oh! I could put a big two-inch honkin' scroll bar RIGHT HERE!&quot;.</i>
Unfortunately, there is a price to be paid for being too creative in your design. </p>

<p>There are some really excellent books on UI design, and I can't possibly cover even the
basics in depth here. So, in light of all there is to know, we can start with a few simple
rules: </p>

<p>&nbsp;</p>

<h4>Rule #1: Consistency is key</h4>

<p>Don't design three different forms each with a wild background color. Don't have a
&quot;Done&quot; button on one form, an &quot;Exit&quot; button on another, and a
&quot;Quit&quot; button on another. </p>

<p>One of the most powerful ideas behind Windows is the idea of Common User Access. The
idea that every window can be sized, opened, closed, minimized, maximized, etc. with the
exact same method. Menus are in the same place, etc. This idea is powerful because the
user does not have to spend a lot of time learning how to control an application. Once one
application is learned, learning new apps takes less time. The same idea applies <i>within</i>
your application. Give every form roughly the same look and feel, make your menu
structures somewhat similar, make all buttons the same size unless the text requires more
space. Keep these things in mind as you design your forms. </p>

<p>&nbsp;</p>

<h4>Rule #2: Color should convey information, not overwhelm</h4>

<p>While some people consider multi-colored windows nice looking, remember that if your
application is going to define someone's job, if someone is going to sit and use your
application all day long, it can't be hard on the eyes. Light gray is among the easiest
backgrounds to read against. Actually, an off-white background is ideal for reading (such
as is a book page) but using light gray provides for the use of three dimensional effects.
Now, I do not advocate an over-use of 3D effects, but a touch here and there can make a
difference. For example: option buttons and check boxes are much more inviting when they
are 3D. Command buttons are already 3D. Basically, any item that you are going to push to
cause some action is a good candidate for 3D effects. The user sees something move and the
brain equates this with action. </p>

<p>Color conveys information. Red means stop, green means go, yellow means caution. These
are socially acceptable uses of color. What does lime green mean? Did someone get sick?
Yet I always see forms that look like this: </p>

<p><img align="left" border="0" hspace="20" src="frmcolor.gif" WIDTH="377" HEIGHT="204"> This is an example of a
ridiculous dialog box. Don't you feel a headache coming on? Can you imagine looking at
this all day? Why does it have a big red spot that draws your attention to....
&quot;Carl's Cool App?&quot; Yeah, that's important! Note that there are too many buttons.
Why do you need so many buttons? That's what menus are for. Also note the use of the
oversize and bold-text text box. This is a real no-no. <br clear="left">
</p>

<p><img align="left" border="0" hspace="20" src="dialog.gif" WIDTH="377" HEIGHT="204"> This dialog box represents
my standard design for dialog boxes. BorderStyle=2 (fixed double),
BackColor=&amp;H00C0C0C0&amp; (light gray), text and list boxes' FontBold=False. The Done
button's Default property is True, therefore the Done button will be clicked if the user
presses Enter. The Cancel button's Cancel property is True, therefore the Cancel button
will be clicked if the user presses Escape. <br clear="left">
</p>

<p>You can download or view the source code to this form by clicking </a><a href="http://www.cgvb.com/sample.txt">here</a>. 

<ul>
  <li><i>Note: The form is named frmMyDialog. I always use Hungarian Notation when naming
    forms and controls. the &quot;frm&quot; tells you that this is a form. Whatever name you
    want comes after that. In this case, its &quot;MyDialog&quot; </i></li>
</ul>

<p>&nbsp;</p>

<h4>Rule #3: Try not to overwhelm the user</h4>

<p>This is an important rule. Have you ever used a really complex program like Microsoft
Project? Project is a great app, but its overwhelming. Its like sitting down in the
cockpit of an airplane for the first time. Sure, all the controls are there! You can do
ANYTHING YOU WANT! What do you do? Well, I don't know! There needs to be some layering of
information. Menus provide a great way to layer information. The trouble is that many menu
options either fall into more than one category, or none at all. In general, you should
lay out your menus like this: </p>

<p align="center"><img border="0" hspace="0" src="menu.gif" WIDTH="218" HEIGHT="50"> </p>

<p>File, Edit, Options, and Help. Much of what an app does can fall into one of these
categories. Sometimes you need special menus, which is fine, but try to make them fall
under one of the above menus, to remain consistent with many of todays commercial Windows
applications. </p>

<p>There is a point at which too much layering is a problem. The user doesn't want to
search four menus deep for a frequently accessed function of the app. If you keep these
things in mind, the right way to do things will become more and more apparent to you the
more applications you write. </p>

<p>Like I said before, there are many good books on User Interface design. I don't know
all there is to know about it, but let this serve as a jump-start to at least get you
going in the right direction. </p>

<p><a name="Lang">&nbsp;</p>

<hr SIZE="7">

<p><img border="0" hspace="20" src="vblbtn.gif" WIDTH="221" HEIGHT="33"> </p>

<blockquote>
  <p>If you are not so familiar with the BASIC language itself, I suggest picking up a book
  on QBASIC, which comes with DOS and Windows 95. QBASIC uses roughly the same commands as
  Visual Basic, so once you feel comfortable with QBASIC you can start coding in Visual
  Basic right away. </p>
  <p>The VB help file provides a ton of information on the language elements, and it also
  has examples. I would also suggest looking at the sample applications that come with VB to
  get a good idea of how they were written. Source code is the best teacher, and VB source
  code is fortunately very readable. As you scroll through the examples, if you feel unclear
  about a keyword, just put the cursor on it and hit F1. The help file will pop up
  explaining the keyword to you. </p>
  <p>Obviously, I can't cover the entire language in one section of an article, but I would
  like to go over what I think are essential parts of the language, so you can get started
  writing some code. </p>
  <p>I feel that its very important to learn the string handling functions in Visual Basic.
  Many seemingly complex tasks can be accomplished by learning how to handle strings. For
  you absolute newbies, a string is a text variable, made up of characters. It can be one
  character, or up to about 32,000 characters in length. </p>
  <p>Lets start a new project, and place one button on Form1. Double click on the button to
  bring up the code window. All the code for this project will be entered here, in the
  Command1_Click event procedure. When you run the program, the code will execute when you
  click the Command1 button. <b><i>Make sure you place the button in the lower right-hand
  corner of the form.</i></b> The sample code prints text on the form, which you will not be
  able to see if the button is covering the top left area of the form. </p>
  <hr SIZE="7">
  <h4>Assigning a literal string</h4>
  <p>You assign a string with the equals sign, placing the text in quotes. For example, this
  code creates a new string with the Dim statement, and assigns it to &quot;The quick brown
  fox jumped over the lazy dog&quot;. </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>Sub Command1_Click ()

    Dim szText As String

    '-- Assign szText
    szText = &quot;The quick brown fox jumped over the lazy dog&quot;

End Sub
</pre>
    </font>
  </blockquote>
  <hr SIZE="7">
  <h4>Getting the length or size of a string</h4>
  <p>The Len function returns the number of characters in a string. The following code
  prints the length of our famous typing test string: </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>Sub Command1_Click ()

    Dim szText As String

    '-- Assign szText
    szText = &quot;The quick brown fox jumped over the lazy dog&quot;

    '-- Print the length of the string
    Print Len(szText)

End Sub
</pre>
    </font>
  </blockquote>
  <hr SIZE="7">
  <h4>Left$ and Right$</h4>
  <p>The Left$ and Right$ string functions return a portion of the string from either the
  left or the right hand side. The syntax is Left$(szString, nCharacters) where nCharacters
  is the number of characters to return. For example, the following code will print
  &quot;The quick&quot; on the form: </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>Sub Command1_Click ()

    Dim szText As String

    '-- Assign szText
    szText = &quot;The quick brown fox jumped over the lazy dog&quot;

    '-- Print the Leftmost 9 characters
    Print Left$(szText, 9)

End Sub
</pre>
    </font>
  </blockquote>
  <hr SIZE="7">
  <h4>The Powerful Mid$ Function</h4>
  <p>The Mid$ function is indeed powerful, because it can extract a piece of a string. The
  Mid$ function simply returns a portion of a string. You can return characters from the
  right, the left, in the middle; any number of characters from anywhere in the string. Here
  is how it works: <font face="verdana,arial,helvetica" size="3"></p>
  <pre>    szNewString = Mid$(szString, nStartingFrom, nNumChars)
</pre>
  </font><p>The first argument, szString is the string from which you want to return a
  partial string. nStartingFrom is the position of the first character, and nNumChars is the
  number of characters. Type in the rest of the code for this example, and change the
  nStartingFrom and nNumChars to different numbers, and see what results you get: </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>Sub Command1_Click ()

    Dim szText As String
    Dim nStartingFrom As Integer
    Dim nNumChars As Integer

    '-- Assign szText
    szText = &quot;The quick brown fox jumped over the lazy dog&quot;

    '-- Set the starting position
    nStartingFrom = 1

    '-- Set the number of characters
    nNumChars = 9

    '-- Print the partial string
    Print Mid$(szText, nStartingFrom, nNumChars)

End Sub
</pre>
    </font>
  </blockquote>
  <p>Now, If you leave off the last parameter (nNumChars), Mid$ returns all the remaining
  characters. This is important as you will see shortly. </p>
  <hr SIZE="7">
  <h4>The Almighty Instr Function</h4>
  <p>Instr is a numeric function that returns the position of a string within a string. For
  example, Instr(&quot;HELLO&quot;, &quot;HE&quot;) would return 1 because the position of
  HE in HELLO is at the first character. Instr(&quot;HELLO&quot;, &quot;LO&quot;) would
  return 4 because the position of LO within HELLO is the fourth character.
  Instr(&quot;HELLO&quot;, &quot;CHEESE&quot;) would return 0, because CHEESE is not part of
  HELLO. Got it? Good. This is important. </p>
  <hr SIZE="7">
  <h4>szReplace A Function!</h4>
  <p>Given what we already know, lets take a look at a string function to replace a portion
  of a string with another string. The function is called szReplace. You pass three strings;
  The first (szText) is the string in which text is to be replaced, the second (szFind) is
  the text to search for, and the third (szRepl) is the text that will replace szFind: </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>Function szReplace (szText As String, szFind As String, szRepl As String) As String
'-- This function replaces all occurances of szFind with szRepl within
'   szText and returns the resulting string.

    Dim nThere As Integer
    Dim szTemp As String
    
    '-- Copy the incoming text so that szText is not altered.
    szTemp = szText

    '-- Go into a loop
    Do
        '-- Is szFind part of szTemp?
        nThere = InStr(szTemp, szFind)
        If nThere Then
            '-- Yes. nThere is now the position of szFind within szTemp
            
            '        [---------- A ----------]   [-B -]   [------------- C ----------------]
            szTemp = Left$(szTemp, nThere - 1) &amp; szRepl &amp; Mid$(szTemp, nThere + Len(szFind))
        Else
            '-- No. There is nothing more to do, so exit the loop
            Exit Do
        End If
    Loop

    '-- Assign szReplace to the szTemp string, which contains the
    '   modified original text.
    szReplace = szTemp

End Function
</pre>
    </font>
  </blockquote>
  <p>Now, before I tell you what's going on here, here is some code to call the szReplace
  function: </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>Sub Command1_Click ()

    Dim szText As String

    '-- Assign szText
    szText = &quot;The quick brown fox jumped over the lazy dog&quot;

    '-- Replace part of the string, and Print the result.
    Print szReplace(szText, &quot;fox&quot;, &quot;box&quot;)

End Sub
</pre>
    </font>
  </blockquote>
  <p>Lets look at the szReplace function carefully. The first thing that happens is that the
  szText string is copied into the szTemp variable. If you modify passed strings in a
  routine, they are returned to the calling code in the modified state. This can cause all
  sorts of weird problems. Trust me, make a copy of any string that was passed in which you
  are going to modify. </p>
  <p>Next, the code goes into a loop. What is happening here is that the Do and Loop
  commands make sort of a list of code. After the last line in the list executes, control
  goes back to the first line in the list. Its kind of like the instructions on a bottle of
  shampoo. They never tell you to stop! </p>
  <blockquote>
    <font face="verdana,arial,helvetica" size="3"><pre>    Lather
    Rinse
    Repeat

    Lather
    Rinse
    Repeat

    Lather
    Rinse
    Repeat
</pre>
    </font>
  </blockquote>
  <p>Anyway, the code between the Do and the Loop continue to execute until an Exit Do
  statement is encountered, at which time, control goes to the next line after the Loop
  statement. </p>
  <p>The first thing we do inside the loop is test to see if szFind exists within szTemp
  (our copy of szText). This is done with the Instr function. nThere returns the position of
  the match, if there is one. If not, the loop is exited. </p>
  <p>If a match is found, the szTemp string is reconstructed. I have placed markers A, B,
  and C in the code above this line so that I can explain each piece of the reconstructed
  string: <font face="verdana,arial,helvetica" size="3"></p>
  <pre>    '        [---------- A ----------]   [-B -]   [------------- C ----------------]
    szTemp = Left$(szTemp, nThere - 1) &amp; szRepl &amp; Mid$(szTemp, nThere + Len(szFind))
</pre>
  </font><ul>
    <li><b>A</b> returns the leftmost characters of szTemp up to the substring. </li>
    <li><b>B</b> is the replacement string. </li>
    <li><b>C</b> is everything to the right of the found substring. </li>
  </ul>
  <p>The combination of these three parts make up the replaced string. Repeated tests are
  done on szTemp (szText) in case szFind exists more than once. </p>
  <hr SIZE="7">
  <h4>Variable Scope</h4>
  <p>When you write a DOS app, you usually have a bit of code at the top that initializes
  variables, defines static array data, etc. This section of code should go in your startup
  procedure, which is either Form_Load (for a given form) or Sub Main (in a .BAS module).
  Some of these variables you may want accessible by the entire app, and some you may only
  want to define within the form or module. Here is a breakdown of variable scope: <font face="verdana,arial,helvetica" size="3"></p>
  <pre>	Global variables are defined in the General Declarations 
	section of .BAS modules ONLY, and are accessible anywhere 
	in your app. Global variables are defined with the 
	following syntax:

		Global MyVariable As Integer
	

	Module-level variables are defined in the General 
	Declarations section of .BAS modules or .FRM forms, and are
	accessible only by subs and functions within that module
	or form. Module-level variables are defined with the 
	following syntax:
	
		Dim MyVariable As Integer
		

	Local variables are defined in a sub or function within
	a module or form, and are accessible only within that sub
	or function. Optionally, these variables can be defined
	as Static, in which case their values stick after the 
	sub or function has been exited, and will remain for the
	life of the module or form. Local variables are defined
	with the following syntax:
	
		Dim MyVariable As Integer
		
	Static local variables are defined with the following
	syntax:
	
		Static MyVariable As Integer
		
</pre>
  </font>
</blockquote>

<p></a><a name="Win">&nbsp;</p>

<hr SIZE="7">

<h3>Windows Programming Issues</h3>

<blockquote>
  <p>Windows is a more powerful operating system than DOS, and with power comes complexity.
  If you have never programmed for Windows before, there are quite a few concepts you must
  simply digest. This is just an introduction to some of these concepts, and is not meant to
  be a complete reference. I consider this to be the minimum in terms of knowledge of
  Windows that a Visual Basic programmer should know. </p>
  <h4>Windows and Messages</h4>
  <p>First of all, Windows, Windows 95, and Windows NT all use the concepts of windows and
  messaging. Simply put, a Window is really a table of data in memory that defines both the
  visible and the non-visible characteristics of what you see as a Window on the screen.
  When you create a Form with Visual Basic, you are creating a Window. The properties of
  that window such as the position, width, and height, are all stored in an internal table.
  It is the job of the operating system to deal with the issues of user interface that the
  programmer should not have to deal with. These issues include: 1) How do I (the Window)
  know when I have focus?, or When am I in the foreground? 2) How do I know when to redraw
  myself? 3) How do I know when I am being closed? 3) How can I tell when I have been
  minimized or maximized?, etc. </p>
  <p>When you write a Windows program, you do not have to worry about determining when these
  things occur. The operating system notifies you (the window) when these things occur via
  messages. A message is a small piece of data (think of it as a user defined type variable)
  that the OS sends to a Window. The meaning of the message is defined by its numeric value.
  Long story short, messages are a means of communication from the operating system to a
  window, or from one window to another, or from anywhere whatsoever in a Windows
  application to any window. </p>
  <p>All Windows are identified by a handle, an integer value assigned to it by the OS when
  the window is created. Have you ever encountered the hWnd property of a form or a picture
  control, or any other control? This is an integer property that you can only read at
  runtime which holds the value of the window's handle. hWnd stands for handle (h) to a
  window (Wnd). When you want to send a message to a window, you specify its handle to the
  routine that sends the message. </p>
  <p>A Visual Basic Form, and any control that registers itself as a window (which is all
  but a few) has Events such as MouseMove, MouseDown, MouseUp, Paint, Refresh, etc. These
  are basically built in subroutines that are called automatically when the window (control,
  form, etc) receives a message. The Paint event is called when the window receives a
  WM_PAINT message, the MouseDown event is fired when the window receives a WM_LBUTTONDOWN
  message from the OS (when the OS detects that the mouse has been clicked on the window)
  and so on. </p>
  <p>Some controls do not create windows when they are used in a VB program. Instead, their
  properties are managed by Visual Basic. The OS knows nothing of them. These controls are
  called LightWeight controls, and include the shape, label, line, and image controls. You
  may experience oddities with these controls under certain conditions that usually present
  themselves when using third party add-ons that manipulate the user interface in some way.
  Its nothing to worry about. You will have no trouble in identifying the unusual behaviour
  should it rear its ugly head. </p>
  <h4>Event Driven Programming.</h4>
  <p>Those of you who are not used to this idea, I appreciate your situation because I've
  been there. I was a DOS programmer, I've written code in assembler, C, and QuickBASIC. I
  know what it's like to &quot;own the machine.&quot; When you write a Windows app you do
  not own the machine. There is stuff happening in the background all the time. Fortunately,
  Windows does a pretty good job of managing it, but you cannot assume that you have every
  single clock-tick of the microprocessor to yourself. I like to say that in DOS you have
  complete control but you don't quite know how to do stuff. In Windows you do not have
  control but you know exactly what to do. </p>
  <p>When you write for DOS, or any other non-multitasking OS, you are a surgeon. You can
  design from the top down and implement code using scientific prowess and distilled
  thought. When you experience a bug, you can reproduce the situation instruction by
  instruction until you pinpoint the exact cause, which you can easily fix with the sharp
  blade of your scalpel. In Windows, or any other non-linear multitasking OS, you are more
  of a psychologist. You talk to Visual Basic a little bit and hit the run button, observing
  the behavior. When you find undesirable behavior, you try to modify it so that if behaves
  in an acceptable way. If you encounter a bug, you have to try and reproduce it. You may
  not be able to because other components of the system totally unrelated to your code may
  be the culprit. You may have to dig deep into the system to discover that the reason your
  application was crashing is because you have the wrong version of a DLL on one of your
  machines. There is not always a direct cause and effect. </p>
  <p>Now that I've rambled on quite enough about my philosophy of programming, let's get
  back to event driven v.s. top-down programming. You must give in to the idea that you do
  not own the machine. You basically have to observe behavior and respond to it. Learn the
  events. Learn when the Paint event occurs. Experiment by causing the paint event to occur
  and placing small pieces of code such as the &quot;Beep&quot; Keyword, which beeps, in
  those events and experiment. After a while you will get into event-driven mode. These
  events occur. You just have to figure out what to do when they occur. I assure you, once
  you understand what parts of the application are your responsibility and what parts are
  handled by Windows (and VB), you will feel like there is nothing you cannot do. </p>
  <h4>The Windows API</h4>
  <p>This is a term you have probably heard over and over again. API stands for Application
  Programming Interface. The Windows API is a large set of routines that a Windows
  application can call to assist in the process of writing an app, sort of like a built in
  toolbox. That is how I have introduced the Windows API to you, a toolbox. In reality, the
  Windows API is what Windows is made up of. It is the core set of functions that handle the
  Windows part of a windows application. Early Windows apps written in C used solely a
  combination of C and the Windows API to create a Windows application. </p>
  <p>Visual Basic ultimately calls the Windows API functions to do things you tell it to do,
  but the complexities of Windows are cleverly hidden from you in every case where extended
  knowledge of the OS is not necessary to create an application. However, there are some API
  routines that you can use in your Visual Basic program to enhance your app, providing
  functionality that Visual Basic does not. </p>
  <p>It may seem like I'm leaving you in the dust here, but there are tons of examples of
  using API routines in Visual Basic, so I won't make it tough on you. Just go out and buy
  Dan Appleman's smash hit book, The Visual Basic Programmer's Guide to the Windows API.
  This book covers every aspect of programming with the API from a VB programmer's
  perspective. I happen to know Dan, and he is a great programmer, and a great teacher as
  well. </p>
</blockquote>

<p></a><a name="Advice">&nbsp;</p>

<hr SIZE="7">

<h3>Last minute advice</h3>

<blockquote>
  <h4>Use The Online Help</h4>
  <p>Visual Basic comes with great online help. Learn how to learn what you need to know.
  Search by keyword. Look for stuff! Follow threads and &quot;see also&quot; jumps. Sit down
  and absorb the information. </p>
  <p>VB comes with help files that explain the Windows API. Use them too. When you can't
  find the answer, go to the help file. Look it up. If you don't understand it and it looks
  complicated, ask a friend, go on Compuserve in the VBPJ or MSBASIC forum, ask somebody!
  Search the Usenet newsgroup on Carl &amp; Gary's, search for sample code, get creative! </p>
  <h4>Subscribe to technical journals.</h4>
  <p>Get a subscription to Visual Basic Programmer's Journal. There is lots of great
  information in there. I recommend getting all the back issues, or their CD-ROM. So much
  good stuff has been published by VB programmers for VB programmers, that it would be a
  crime to miss it. </p>
  <p>There are other journals available, such as Visual Basic Tech Journal, that also have
  technical information you won't want to miss. If you are struggling, chances are that
  someone else has done so before you and written about it. </p>
  <h4>Use Usenet!</h4>
  <p>Usenet Newsgroups offer a great way to get help on any topic under the sun, including
  Visual Basic programming. If you don't want to go through the ritual of posting a question
  and waiting for a reply, you can search our </a><a href="http://www.cgvb.com/gcgi/news_form">News Archive</a> for keywords in over 200,000
  Usenet messages! </p>
  <h4>Subscribe to the Microsoft Developer Network</h4>
  <p>MSDN includes a huge library of documentation, workarounds, tips, sample code,
  articles, and other priceless information. <a href="http://www.microsoft.com/msdn">You can
  search the library on the Microsoft Website</a> as well as on CD-ROM. </p>
  <h4>Don't give up!</h4>
  <p>Visual Basic programming is fun, creative, productive, and useful. Good Visual Basic
  programmers are in high demand all over the world, and we would like you to one day join
  the ranks of the gurus. </p>
  <p>Best of luck to you, weary traveler. Now go write some code. </p>
</blockquote>
</body>
</html>

