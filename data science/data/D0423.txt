ID=D0423
URL=http://www.absolutejava.com/threads/
SIZE=4630
DATE=16/07/02
TIME=14:45:52
DATASET=Java
HTML=<html>
<head>
<title>Absolute Java - Threads</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../styles.css" type="text/css">
</head>

<body>
<p class="subtitle" style="margin-top:0px">The Ugly Secrets of Java Threads</p>
<div class="postSubtitle">Many programmers are unaware of the fact that Java makes no guarantees regarding
thread priorities. Contrary to popular belief, it is <em>not</em> the case that
a thread with a higher priority will necessarily run before a thread with a lower
priority (<a href="http://java.sun.com/docs/books/jls/" target="_jls">JLS 2</a>,
<a href="http://java.sun.com/docs/books/jls/second_edition/html/memory.doc.html#28457" target="_jls">&sect;17.12</a>).
Furthermore, Java makes no guarentees as to how or when a thread is chosen to
run. Specifically, you are not guaranteed that the Java thread scheduling mechanism
will implement time-slicing, or any other thread schedulaing technique for that
matter.<br>
  <br>
To ensure all threads get an opportunity to execute, use <code>Thread.yield()</code>.
I think it's rather sad that Java does not guarantee preemptive time-slicing as
this reduces the Java platform to a cooperative multi-tasking environment.
</div>
<p class="subtitle"><code>InterruptedException</code> Clears the <em>Interrupted Status</em></p>
<div class="postSubtitle">When an <code>InterruptedException</code> is thrown, the <em>exception status</em>
of the thread that was interrupted will automatically be cleared. For example,
the following snippet of code will <em>always</em> print "<code>Its's false</code>"
whenever an <code>InterruptedException</code> is thrown:</div><p></p>

  <!-- --------------- BEGIN GENERATERD SOURCE CODE CSS TABLE --------------- -->
  <!-- ------------------ Generated by www.absolutejava.com ------------------ -->
<table cellspacing='0' class='codeTable'><tr><td class='lineNumber'><pre>1</td><td><pre>&nbsp;<span class='codeKeyword'>try</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>2</td><td><pre>&nbsp;   Thread.sleep<span class='codeSeparator'>(</span><span class='codeIntegerLiteral'>10000</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>3</td><td><pre>&nbsp;<span class='codeSeparator'>}</span> <span class='codeKeyword'>catch</span><span class='codeSeparator'>(</span>InterruptedException e<span class='codeSeparator'>)</span> <span class='codeSeparator'>{</span></td></tr><tr><td class='lineNumber'><pre>4</td><td><pre>&nbsp;     <span class='codeKeyword'>if</span><span class='codeSeparator'>(</span>Thread.currentThread<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span>.isInterrupted<span class='codeSeparator'>(</span><span class='codeSeparator'>)</span><span class='codeSeparator'>)</span></td></tr><tr><td class='lineNumber'><pre>5</td><td><pre>&nbsp;        System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"It's true"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>6</td><td><pre>&nbsp;     <span class='codeKeyword'>else</span></td></tr><tr><td class='lineNumber'><pre>7</td><td><pre>&nbsp;        System.out.println<span class='codeSeparator'>(</span><span class='codeStringLiteral'>"It's false"</span><span class='codeSeparator'>)</span>;</td></tr><tr><td class='lineNumber'><pre>8</td><td><pre>&nbsp;<span class='codeSeparator'>}</span></td></tr></table>
<!-- --------------- END GENERATERD SOURCE CODE HTML TABLE --------------- -->
<p class="subtitle">Has that Thread Finished or Hasn't it Been Started?</p>
<div class="postSubtitle">Before a thread's <code>start()</code> method is called, its <code>isAlive()</code> method will return <code>false</code>. After a thread's <code>run()</code> method has completed execution, its <code>isAlive()</code> method will again return <code>false</code>. So, if the <code>isAlive()</code> method returns <code>false</code>, how can you know if it indicates the thread has not yet been <code>start()</code>ed or the thread has already completed execution &#151; in either case <code>isAlive()</code> returns <code>false</code>?</div>
<p>The solution is to call the thread's <code>getThreadGroup()</code> method. If this method returns <code>null</code>, the thread has completed execution.</p>
<p>&nbsp;</p>

<div align="center" style="font-size:9pt; font-family:verdana,arial,helvetica; color: black">
    Copyright &copy; 1999-2002, Tony LaPaso<br>
    All Rights Reserved.
</div>
</body>
</html>

