ID=F0911
URL=http://www.visualbasicbooks.com/advVB6samplepg17.html
SIZE=7735
DATE=09/07/2002
TIME=13:27:32
DATASET=Visual Basic
HTML=<html>

<head>



<meta name="description"
content="Visual Basic books for all levels of visual basic programmers are featured and reviewed regularly. Only those Visual Basic books of highest quality appear on this site.">
<meta name="keywords" content="visual basic books,visual basic,vb books,visual basic sites,programming,win32 api,database,beginner,amazon,bookstore">

<title>Visual Basic Books</title>
</head>

<body bgcolor="#6373B5" text="#616161" link="#0000ff" vlink="#666666" alink="#CC9900">
<center>
<!-- BEGIN RICH-MEDIA BURST! CODE --> 
       <script language="JavaScript"> 
       <!-- /* © 1997-1999 BURST! Media, LLC. All Rights Reserved.*/ 
       var TheAdcode = 'ad5645a'; 
       var bN = navigator.appName; 
       var bV = parseInt(navigator.appVersion); 
       var base='http://www.burstnet.com/'; 
       var Tv=''; 
       var agt=navigator.userAgent.toLowerCase(); 
       if (bV>=4) 
         {ts=window.location.pathname+window.location.search; 
          i=0; Tv=0; while (i< ts.length) 
             { Tv=Tv+ts.charCodeAt(i); i=i+1; } Tv="/"+Tv;} 
         else   {Tv=escape(window.location.pathname); 
          if( Tv.charAt(0)!='/' ) Tv="/"+Tv; 
                 else if (Tv.charAt(1)=="/")
       Tv=""; 
         if( Tv.charAt(Tv.length-1) == "/") 
           Tv = Tv + "_";} 
       if (bN=='Netscape'){ 
            if ((bV>=4)&&(agt.indexOf("mac")==-1))
       {  document.write('<s'+'cript src="'+ 
             base+'cgi-bin/ads/'+TheAdcode+'.cgi/RETURN-CODE/JS' 
             +Tv+'">'); 
            document.write('</'+'script>');    
       } 
            else if (bV>=3) {document.write('<'+'a href="'+base+'ads/'+ 
               TheAdcode+'-map.cgi'+Tv+'"target=_top>'); 
               document.write('<img src="' + base + 'cgi-bin/ads/' + 
               TheAdcode + '.cgi' + Tv + '" ismap width=468 height=60' + 
               ' border=0 alt="Click Here"></a>');} 
        } 
       if (bN=='Microsoft Internet Explorer') 
        document.write('<ifr'+'ame id=BURST src="'+base+'cgi-bin/ads/'
       + 
         TheAdcode + '.cgi' + Tv + '/RETURN-CODE" width=468 height=60' + 
         'marginwidth=0 marginheight=0 hspace=0 vspace=0 ' + 
         'frameborder=0 scrolling=no></ifr'+'ame>'); 
       // --> 
       </script> 
       <noscript><a href="http://www.burstnet.com/ads/ad5645a-map.cgi" target=_top> 
       <img src="http://www.burstnet.com/cgi-bin/ads/ad5645a.cgi" 
        width=468 height=60 border=0 alt="Click Here"></a> 
       </noscript> 
       <!-- END BURST CODE --> 
</center>


<table border="0" bgcolor="" cellpadding="0" cellspacing="0">
<tr><td><p align="center"><img src="../images/vblogo.jpg" border="0" alt="vb logo"></td></tr>
<tr> 
<td rowspan="3" valign="top" height="1"> <p>&nbsp;</p>

<p align="left"><font face= "verdana" color="#000000"><b>Visual Basic Books</b></font><br>
<a href="index.html"><font color="#ffffff">Home</font></a><br>
<a href="beginner.html"><font color="#ffffff">Visual Basic Beginner Books</font></a><br>
<a href="database.html"><font color="#ffffff">Visual Basic Database Books</font></a><br>
<a href="activex.html"><font color="#ffffff">Visual Basic ActiveX Books</font></a><br>
<a href="advanced.html"><font color="#ffffff">Visual Basic Advanced Books</font></a><br>
<a href="vbinternet.html"><font color="#ffffff">VB Internet Programming Books</font></a><br>


</p>
<p><font color="#000000" face="verdana"><b>Resources</b></font><br>
<a href="links.html"><font color="#FFFFFF">Visual Basic Links</font></a><br>
<a href="addlink.html"><font color="#FFFFFF">Add a Link</font></a><br>
<a href="esubscribe.html"><font color="#FFFFFF">Subscribe to Mailing List</font></a>

</p>

<p>


</font>


<td bgcolor="#ffffff" valign="middle"><h1 align="center"><img src="../images/anibook.gif" alt="" width="32" height="32"><font face="trebuchet ms, arial, helvetica" color="#000000"> Visual Basic Books </font><img src="../images/anibook.gif" alt="" width="32" height="32"></h1>

</td>






</tr><tr>
<td bgcolor="#ffffff" colspan="1" valign="top">



<table border="0" cellpadding="5"><tr><td>


<font  color="#000000" FACE="Verdana, Arial, Helvetica" SIZE="-1">

<center><H1> Advanced Microsoft Visual Basic 6 Chapter 1</h1></center>


<FONT FACE="Arial">
</B></FONT><B><FONT FACE="Arial" SIZE=5><P>Tip 10: Use a ROOS <BR>
(Resource Only Object Server).</P>
</B></FONT><P>A basic ROOS (pronounced &quot;ruse&quot;) is a little like a string table resource except that it runs in-process or out-of-process as an Automation server. A ROOS provides a structured interface to a set of objects and properties that enables us to build more flexible error handling routines.</P>
<P>For example, the ROOS holds a project’s error constants (or rather the values mapped to the symbols used in the code that are resolved from the object’s type library). The ROOS also holds a set of string resources that hold the actual error text for a given error and the methods used to load and process errors at run time. To change the language used in error reports or perhaps the vocabulary being used (for example, user vs. programmer), simply use a different ROOS. (No more DLLs with weird names!)</P>
<B><FONT FACE="Arial" SIZE=5><P>Tip 11: Replace useful <BR>
intrinsic objects with your own.</P>
</B></FONT><P>Our main ROOS contains a set of alternative standard object classes, <I>TMSErr </I>and <I>TMSApp</I>, for example. These are instantiated as <I>Err</I> and <I>App</I> at application start-up as part of our application template initialization. (All our Visual Basic applications are built on this template.) By creating objects like this, we can add methods, properties, and so on to what looks like one of Visual Basic’s own objects.</P>
<P>For example, our error object has extra methods named <I>Push</I> and <I>Pop</I>. These, mostly for historical reasons, are <I>really</I> useful methods because it’s not clear in Visual Basic when <I>Err.Clear </I>is actually applied to the <I>Err </I>object—that is, when the outstanding error, which you’ve been called to handle, is automatically cleared. This can easily result in the reporting of error 0. Watch out for this because you’ll see it a lot!</P>
<P> Usually, an error is mistakenly cleared in this way when someone is handling an error and from within the error handler he or she calls some other routine that causes Visual Basic to execute an <I>Err.Clear</I>. All sorts of things can make Visual Basic execute an <I>Err.Clear</I>. The result in this case is that the error is lost! These kinds of mistakes are really hard to find. They’re also really easy to put in—lines of code that cause this to happen, that is!</P>
<P>The Help file under Err Object used to include this Caution about losing the error context.</P>
<P>If you set up an error handler using On Error GoTo and that handler calls another procedure, the properties of the Err object <I>may be</I> reset to zero and zero-length strings. To retain values for later use, assign the values of Err properties to variables before calling another procedure, or before executing Resume, On Error, Exit Sub, Exit Function, or Exit Property statements.</P>
<P>Of course, if you do reset <I>Err.Number</I> (perhaps by using <I>On Error GoTo</I> in the called routine), when you return to the calling routine the error will be lost. The answer, of course, is to preserve, or push, the error context onto some kind of error stack. We do this with <I>Err.Push</I>. It’s the first line of code in the error handler—<I>always</I>. (By the way, Visual Basic won’t do an <I>Err.Clear </I>on the call to <I>Err.Push</I> but only on its return—guaranteed.) Here’s an example of how this push and pop method of error handling looks in practice:</P><DIR>

<FONT FACE="Courier New" SIZE=2><P>Private Sub Command1_Click()<BR>
<BR>
    On Error GoTo error_handler:<BR>
<BR>
    VBA.Err.Raise 42<BR>
<BR>
    Exit Sub<BR>
<BR>
error_handler:<BR>
<BR>
    Err.Push<BR>
    Call SomeFunc<BR>
    Err.Pop<BR>
    MsgBox Err.Description<BR>
    Resume Next<BR>
<BR>
End Sub</P></DIR>

</FONT><P>Here we’re raising an error (42, as it happens) and handling it in our error handler just below. The message box reports the error correctly as being an Application Defined Error. If we were to comment out the <I>Err.Push </I>and <I>Err.Pop </I>routines and rerun the code, the error information would be lost and the message box would be empty (as <I>Err.Number </I>and <I>Err.Description </I>have been reset to some suitable &quot;nothing&quot;), assuming the call to <I>SomeFunc </I>completes successfully. In other words, when we come to show the message box, there’s no outstanding error to report! (The call to <I>Err.Push </I>is the first statement in the error handler. This is easy to check for during a code review.)</P><DIR>

<center><a href="advVB6samplepg18.html">next page....</a></center>

</td></tr></table></table><tr><td bgcolor="#991100"><center>
<font FACE="Verdana, Arial, Helvetica" SIZE="-1"><font color="#FFFFFF">Email us your comments:<a href="mailto:contact@vbbooks.freeservers.com"><img src="../images/emailed.gif"alt="mail" border=0></a><br>Fax: 1(916)404-7719<br>&copy;1999 Valassis Enterprises. All rights reserved.</font>

<P>
<!--Start of WSTR Block-->
<script language=JavaScript>id=1530</script>
<script language=JavaScript src="http://www.meixler-tech.com/wstr/js.cgi"></script>
<!--End of WSTR Block-->
</center>


</body>
</html>

