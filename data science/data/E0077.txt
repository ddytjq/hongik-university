ID=E0077
URL=http://www.troubleshooters.com/codecorn/sockets/index.htm
SIZE=39198
DATE=12/07/02
TIME=19:17:10
DATASET=C
HTML=<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="keywords" content="debugging, troubleshooting, Source Code, Access, C++, Delphi, FoxPro, MFC, Microsoft Foundation Classes, SQL, Visual Basic">
   <meta name="Author" content="Steve Litt">
   <meta name="Description" content="A socket programming tutorial">
   <meta name="KeyWords" content="perl,perl programming,python,C,C++,sockets,services,socket,service,CGI,CGI programming,Linux">
   <meta name="GENERATOR" content="Mozilla/4.77 [en] (X11; U; Linux 2.4.3-20mdksmp i686) [Netscape]">
   <title>Socket Programming</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000EE" vlink="#551A8B" alink="#FF0000">

<center>
<h2>
<a NAME="top"></a><a href="../../troubleshooters.htm">Troubleshooters.Com</a>
and <a href="../index.htm">Code Corner</a> Present</h2></center>

<center>
<h1>
<font color="#C80000">Socket Programming<br>
</font><font size=+0>The 10% you need -- for 90% of your work</font></h1></center>

<center>
<h5>
<a href="../../cpyright.htm">Copyright (C) 2001 by Steve Litt</a></h5></center>

<p><br>
<center><table BORDER CELLSPACING=0 CELLPADDING=5 WIDTH="90%" BGCOLOR="#F0FFF7" NOSAVE >
<tr NOSAVE>
<td NOSAVE><b><font size=-1>Steve Litt is the author of <a href="../../bookstore/ttech.htm">Troubleshooting
Techniques of the Successful Technologist</a>, <a href="../../bookstore/rl.htm">Rapid
Learning: Secret Weapon of the Successful Technologist</a>, and <a href="../../bookstore/su.htm">Samba
Unleashed</a>.</font></b></td>
</tr>
</table></center>

<br>&nbsp;
<br><a href="../../cpyright.htm"></a>&nbsp;
<center><table BORDER CELLPADDING=4 BGCOLOR="#FFFFF8" >
<tr ALIGN=LEFT VALIGN=TOP>
<td>
<ul>
<li>
<b><a href="#Introduction">Introduction</a></b></li>

<li>
<b><a href="#Acknowledgments">Acknowledgements</a></b></li>

<li>
<b><a href="#HelloWorld">Hello World</a></b></li>

<li>
<b><a href="#bidirectionaltelnet">A Bidirectional Implementation with Telnet
Client</a></b></li>

<li>
<b><a href="#bidirectionalc">A Bidirectional Implementation with Custom
C Client</a></b></li>

<li>
<b><a href="#LookingAhead">Looking Ahead</a></b></li>
</ul>
</td>
</tr>
</table></center>

<h1>
<a NAME="Introduction"></a>Introduction</h1>
Sockets are interfaces that can "plug into" each other over a network.
Once so "plugged in", the programs so connected communicate.
<p>This article discusses only simple aspects of stream inet sockets (don't
worry about exactly what that is right now). For the purposes of this article,
a "server" program is exposed via a socket connected to a certain /etc/services
port number. A "client" program can then connect its own socket to the
server's socket, at which time the client program's writes to the socket
are read as stdin to the server program, and stdout from the server program
are read from the client's socket reads. This is one subset of socket programming,
but it's perhaps the easiest to master, so this is where you should start.
<br>&nbsp;
<center><table BORDER >
<tr>
<td><img SRC="sockdiag.png" ALT="Diagram of a simple xinetd socket usage" NOSAVE height=211 width=511></td>
</tr>

<tr>
<td>
<center>Diagram of client-server socket connection via xinetd.&nbsp;
<br>Note that the client communicates by reading and writing the socket,
<br>but the server program communicates via stdin and stdout.</center>
</td>
</tr>
</table></center>

<p>This tutorial requires a Linux box. It hasn't been tested on other types
of UNIX, but I think it might work. This tutorial is centered around a
system using <tt>xinetd</tt>, but it would be simple enough to adapt it
to older <tt>inetd</tt> systems. This tutorial will not work under Windows.
I think it's important that this complex type of programming be learned
on the most reliable, straightforward system possible, so Windows is out.
<p>For the purposes of this tutorial, the server application will be at
port 3333. Note that you can implement both the client and the server on
a single computer, in which case the client is connected to a port on the
computer containing both the client and the server. So if you have only
one Linux box you can still do this tutorial.
<h1>
<a NAME="Acknowledgments"></a>Acknowledgments</h1>
This material was told to me by LEAP-CF members Mark Alexander and Nickolai
Zeldovich. Other LEAPsters provided additional information.
<p>A big shout out to all my buddies at Linux Enthusiasts and Professionals
of Central Florida (LEAP-CF). With mailing list and meetings, they (we)
form a 70 brain parallel supercomputer.
<p>And of course, thanks to the help and support of Troubleshooters.Com's
visitors.
<h1>
<a NAME="HelloWorld"></a>Hello World</h1>
Our first socket implementation uses a simple write-only shellscript as
a server application, and telnet as the client. This is the simplest possible
implementation. I've tested this on a mandrake box, and I'd imagine it
would work on any Linux box using xinetd. If your box still uses the older
inetd system, the only difference is that you modify inetd.conf instead
of a file in /etc/xinetd.d, and you restart inetd instead of xinetd. The
following steps are involved:
<ol>
<li>
Create the server application (a simple shellscript)</li>

<li>
Test the server application at the command line</li>

<li>
Decide on a port number and service name</li>

<li>
Declare the port and name in /etc/services</li>

<li>
Create a file for this service in /etc/xinetd.d</li>

<li>
Restart xinetd</li>

<li>
Telnet into the service, and see the server app's output</li>

<li>
Review what you learned</li>
</ol>

<h2>
Create the server application (a simple shellscript)</h2>
We want the simplest possible script for this Hello World, so here it is:
<br>&nbsp;
<table BORDER BGCOLOR="#CCFFFF" >
<tr>
<td>
<pre>#!/bin/bash
/bin/echo -n "Hello World:" | /usr/bin/tee /tmp/log.log
/bin/date | /usr/bin/tee -a /tmp/log.log</pre>
</td>
</tr>
</table>

<p>Save the preceding script as hello.sh, in your home directory (we'll
assume your user id is <tt>myuid</tt>).
<p>Note several things. The top line, showing the program to read the script,
is ABSOLUTELY ESSENTIAL. Although most environments run shellscripts without
that top line, those same scripts will not output when called through sockets
as certain users (user <tt>nobody</tt>, for instance). For a similar reason,
make sure every executable is declared with a complete path, and is not
a link. With a user like user <tt>nobody</tt>, you don't know what the
path will look like. Similarly, the log file is completely specified so
you know where to find it. If you don't specifiy it, it goes in the home
directory of the user hooked to the service by xinetd. Better to specify
it so you know exactly where to find it. <tt>/tmp</tt> is an excellent
place, because on most systems it has universal read and write permissions.
<p>This script writes a single line containing "Hello World:" followed
by a timestamp, both to stdout and to a log file called <tt>/tmp/log.log</tt>.
The log file will become essential in socket debugging, because when the
program runs under a socket the program has no terminal.
<p>
<hr WIDTH="100%"><b><font size=-1>For security reasons, I recommend you
implement the client and server on the same computer, and that you temporarily
disconnect that computer from your network. The last thing you want is
an under-development service exposed to your LAN, and maybe the entire
Internet.</font></b>
<hr WIDTH="100%">
<p><b>Be sure to set the script as executable by all. Remember, you don't
know what user will be executing it. Also, be sure the entire directory
tree housing the script is executable by all, or else other users won't
be able to traverse the tree to execute the file.</b>
<br>&nbsp;
<h2>
Test the server application at the command line</h2>
Run the program, and it should output the hello world phrase followed by
a timestamp. When you look at /tmp/log.log it should contain the same information.
See the session below:
<br>&nbsp;
<table BORDER WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ ./hello.sh
Hello World:Tue Jan 23 12:27:08 EST 2001
[myuid@mydesk myuid]$ cat /tmp/log.log
Hello World:Tue Jan 23 12:27:08 EST 2001
[myuid@mydesk myuid]$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre>
</td>
</tr>
</table>

<p>If you don't get the results shown above, troubleshoot until you do.
<h2>
Decide on a port number and service name</h2>
First, the port number needs to be unused. The port number you choose should
not exist in <tt>/etc/services</tt>. Furthermore, for security reasons
the port number should not be below 1024. For this exercise I use port
3333. You may wish to use a different port so someone knowing you've taken
this tutorial doesn't know of an open port on your system. But in this
tutorial I'll use 3333.
<p>The first thing to do is make sure the port number is not contained
in the /etc/services file. Do that as follows:
<br>&nbsp;
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ cat /etc/services | grep 3333
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>If there's no output, there's no such port number. If there's output,
investigate thoroughly, and you'll probably want to select a different
number.
<p>You also need to check for the existence of an xinetd declared service
with a declared port number matching the new one. Do that with a directory
wide grep:
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ grep -r 3333 /etc/xinetd.d/*
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>Once again, no output means no such port is declared. If there is output,
investigate, and change your new port number if necessary.
<p>As far as the service name, we're going to call the service "hello".
Here's how we check for the existence of a current service called "hello":
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ /sbin/chkconfig -- list | grep -i hello
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>Once again, if there's no output, there's no such service yet, so you're
free to use that service name.
<p>Once you've decided on a port number and a service name (3333 and hello
in this tutorial), continue on...
<h2>
Declare the port and name in /etc/services</h2>
Add the following line to the <tt>/etc/services file</tt>:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#CCFFFF" >
<tr>
<td>
<pre>hello&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3333/tcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # hello tutorial, delete when finished</pre>
</td>
</tr>
</table>

<p>The first field is the service name. The second field is the port number
and the type of protocol (tcp in this case). Anything to the left of a
hash mark (#) is a comment.
<br>
<hr WIDTH="100%"><b><font size=-1>Beware: The xinetd man page says an xinetd
invoked service needn't be declared in <tt>/etc/services</tt>. That does
not match my experience. I was unable to make this work without declaring
it in /etc/services, even using the <tt>xinetd port=</tt> parameter. Make
your life easy. Declare it in <tt>/etc/services</tt> for the purposes of
this tutorial. Then, if you wish, go ahead and find a way to remove it
from /etc/services while retaining the service.</font></b>
<hr WIDTH="100%">
<h2>
Create a file for this service in /etc/xinetd.d</h2>
As user root, create the following file in <tt>/etc/xinetd.d</tt>:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#CCFFFF" >
<tr>
<td>
<pre># default: on
# description: Hello World socket server
service hello
{
&nbsp;&nbsp; port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3333
&nbsp;&nbsp; socket_type&nbsp;&nbsp;&nbsp;&nbsp; = stream
&nbsp;&nbsp; wait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = no
&nbsp;&nbsp; user&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = nobody
&nbsp;&nbsp; server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = /home/slitt/hello.sh
&nbsp;&nbsp; log_on_success&nbsp; += USERID
&nbsp;&nbsp; log_on_failure&nbsp; += USERID
&nbsp;&nbsp; disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = no
}</pre>
</td>
</tr>
</table>

<p>As root, save the preceding file as /etc/xinetd.d/hello. It should read/write
for owner, read for group and other:
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[root@mydesk xinetd.d]# ls -ldF hello
-rw-r--r--&nbsp;&nbsp;&nbsp; 1 root&nbsp;&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 303 Jan 23 13:14 hello
[root@mydesk xinetd.d]#</pre>
</td>
</tr>
</table>

<p>Once you've saved the file properly, you're ready to "turn on" the server
by restarting xinetd...
<h2>
Restart xinetd</h2>
According to the xinetd man page there are many ways to "reconfigure" xinetd.
In the xinetd man page search for SIGUSR2 and you'll find some of the less
intrusive methods. But in my experience, there's no substitute for a known
state. I prefer a complete restart. Here's how it's done on a Mandrake
box:
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[root@mydesk xinetd.d]# /etc/rc.d/init.d/xinetd restart
Stopping xinetd: [&nbsp; OK&nbsp; ]
Starting xinetd: [&nbsp; OK&nbsp; ]
[root@mydesk xinetd.d]#</pre>
</td>
</tr>
</table>

<p>Different Linux distros use different commands and output different
text. So your mileage may vary. Once you've restarted xinetd, your new
service is theoretically working. Time to test using telnet as a client...
<h2>
Telnet into the service, and see the server app's output</h2>
Run the following command:
<br>&nbsp;
<pre>telnet 192.168.100.2 3333</pre>
The IP address is the address of the server containing the hello world
server. The 3333 is the port number. Here's one example of what might happen:
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ telnet 192.168.100.2 3333
Trying 192.168.100.2...
telnet: Unable to connect to remote host: Connection refused
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>In the preceding, note the "Connection refused" message. This means
there's a basic problem with the service, and the user listed in <tt>/etc/xinetd.d/hello</tt>
cannot run <tt>hello.sh</tt>. Note that the log file will not have been
rewritten, so if one exists it has an old timestamp (this is why we put
the timestamp in the server script). Here are some things to check:
<ul>
<li>
Make sure the service and name are listed in <tt>/etc/services</tt>.</li>

<li>
In <tt>/etc/xinetd.d/hello</tt>, make sure:</li>

<ul>
<li>
The <tt>port=</tt> line's value matches the port number in <tt>/etc/services</tt>.</li>

<li>
The service name (just before the squiggly braces) is correct.</li>

<li>
If there's a <tt>disable=</tt>, its value must be <tt>no</tt>.</li>

<li>
If there's a <tt>default:</tt> line, its value must be <tt>on</tt>.</li>

<li>
The <tt>user=</tt> line names a valid user.</li>

<li>
The <tt>server=</tt> line must point to the script to be run (<tt>hello.sh</tt>).
It must be fully pathed.</li>
</ul>
</ul>
After correcting any problems, restart xinetd:
<pre>/etc/rc.d/init.d/xinetd restart</pre>
If none of the above helps, try <b>TEMPORARILY</b> changing the <tt>user=</tt>
line to <tt>root</tt>. That should fix any permission problems. But make
sure that before you change it to root, you disconnect from the Internet.
Otherwise the script kiddies will be on you like squirrels on a tree.
<p>If none of the above helps, use the <a href="../../tuni.htm">Universal
Troubleshooting Process</a> to diagnose the problem. Try to find ways to
narrow the problems, and ways to divide and conquer.
<p>Once you actually get the connection to work, you may be confronted
with a no-output run, as shown below:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ telnet 192.168.100.2 3333
Trying 192.168.100.2...
Connected to 192.168.100.2.
Escape character is '^]'.
Connection closed by foreign host.
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>In the preceding, the connection was made, but no output was recieved.
There's probably something wrong with the script itself. Most likely the
top line declaring the script's interpreter (<tt>/bin/bash</tt> in this
example) is missing or wrong. It could also be a pathing problem with the
"run service as" user, which is why it's so important to fully path all
files in the script. Note that the log file will not have been rewritten,
so if one exists it has an old timestamp (this is why we put the timestamp
in the server script).
<p>Verify that the script's name is the same as named in <tt>/etc/xinetd.d/hello</tt>,
that it's executable for all, that its directory is executable all the
way up the path, and that it contains the <tt>#!/bin/bash</tt> line at
the top, and that there really is a <tt>/bin/bash</tt>, and that it's a
command interpreter. Verify that all files in the script are fully pathed.
Beyond that, troubleshoot.
<p>Once you get it running, you might get output like the following:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ telnet 192.168.100.2 3333
Trying 192.168.100.2...
Connected to 192.168.100.2.
Escape character is '^]'.
/usr/bin/tee: /tmp/log.log: Permission denied
Hello World:/usr/bin/tee: /tmp/log.log: Permission denied
Tue Jan 23 13:26:44 EST 2001
Connection closed by foreign host.
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>You can tell you're close. You're connecting, and you're getting output
obviously originating from your script. But you have a problem creating
/tmp/log.log. That's not surprising, because in a previous step you created
it as user <tt>myuid</tt>, and user <tt>nobody</tt> hasn't the permissions
to delete the old one. As root or another user permissioned to delete <tt>/tmp/log.log</tt>,
delete the old one manually and you should clear the problem. Once all
problems have been cleared, the telnet session should look as follows:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ telnet 192.168.100.2 3333
Trying 192.168.100.2...
Connected to 192.168.100.2.
Escape character is '^]'.
Hello World:Tue Jan 23 13:33:55 EST 2001
Connection closed by foreign host.
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>If you obtain the preceding output, congratulations -- you've just implemented
a Hello World sockets setup.&nbsp; So let's review...
<h2>
Review What You've Learned</h2>
Sockets are a software methodology to connect different processes (programs)
on the same computer or on different computers. The name "socket" reminds
us that once we "plug in" one process into another process's socket, they
can talk to each other by reading and writing the socket.
<p>Sockets are a huge and diverse subject. This tutorial deals with the
subset in which one of the two processes is a "server" by virtue of its
configuration into <tt>xinetd</tt> (or <tt>inetd</tt> if you're running
an older UNIX or Linux distro). In such a scenario, the "server" process,
which in our example is a simple shellscript, is associated with a port
number and a process name via a config file in the <tt>/etc/xinetd.d</tt>
directory. In our case, the file is <tt>/etc/xinetd.d/hello</tt>. Additionally,
the port number is associated with the service name and the tcp protocol
via an entry in <tt>/etc/services</tt>. Once those associations are made,
restarting xinetd makes the script available as a service at the specified
port. Pictorially, it looks something like this:
<center><table BORDER >
<tr>
<td><img SRC="sockdiag.png" ALT="Diagram of a simple xinetd socket usage" NOSAVE height=211 width=511></td>
</tr>

<tr>
<td>
<center>Diagram of client-server socket connection via xinetd.&nbsp;
<br>Note that the client communicates by reading and writing the socket,
<br>but the server program communicates via stdin and stdout.</center>
</td>
</tr>
</table></center>

<p>In the case of our tutorial, we used telnet as the client program, connecting
it to port 3333 on 192.168.100.2 as follows:
<pre>telnet 192.168.100.2 3333</pre>
The server script's output then appears in the telnet program's output.
<p>This has been a simple implementation indeed. You didn't code the client,
but instead used telnet. And communication goes only one way. It's output
from the server app and read in telnet. Nevertheless, you're over the biggest
hurdle.The next step is two way socket communication. Read on...
<h1>
<a NAME="bidirectionaltelnet"></a>A Bidirectional Implementation with Telnet
Client</h1>
Now let's make a bidirectional program. We'll simply attach a new script,
called <tt>hellobidirectional.sh</tt>, to the hello service. First, let's
make the <tt>hellobidirectional.sh</tt> script:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#CCFFFF" >
<tr>
<td>
<pre>#!/bin/bash

logfile="/tmp/log.log"
firstname="initialization"
lastname="initialization"
/bin/echo "LOG: $(/bin/date)" > $logfile
/bin/echo >> $logfile
while test 1; do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ###Forever, see the break in the case statement
&nbsp;&nbsp; /bin/echo >> $logfile
&nbsp;&nbsp; /bin/echo "Begin Cycle: $(/bin/date) **********" >> $logfile
&nbsp;&nbsp; /bin/echo
&nbsp;&nbsp; /bin/echo "Please type Linux celebs name below:" | /usr/bin/tee -a $logfile
&nbsp;&nbsp; read firstname
&nbsp;
&nbsp;&nbsp; ##### NEXT STATEMENT REMOVES EXTRA CTRL+M PUT IN BY TELNET #####
&nbsp;&nbsp; ##### PROGRAMMER: MAKE SURE THE CHAR IS CTRL+M, NOT A CARAT AND AN M! #####
&nbsp;&nbsp; firstname=$(/bin/echo ${firstname}|/bin/sed -e 's/<a href="#ctrlm">^M</a>$//')

&nbsp;&nbsp; /bin/echo ":$firstname, " | /usr/bin/tee -a $logfile
&nbsp;&nbsp; case "$firstname" in
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (richard) lastname="stallman";;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (linus)&nbsp;&nbsp; lastname="torvalds";;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (maddog)&nbsp; lastname="hall";;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (q*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastname="quit"; break;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastname="Unknown celeb";;
&nbsp;&nbsp; esac
&nbsp;&nbsp; /bin/echo "$lastname" | /usr/bin/tee -a $logfile
done&nbsp;&nbsp;&nbsp;

/bin/echo&nbsp; | /usr/bin/tee -a $logfile
/bin/echo "Finished" | /usr/bin/tee -a $logfile</pre>
</td>
</tr>
</table>

<p><a NAME="ctrlm"></a><b><font size=-1>Warning: The ^M is a CTRL+M, a
single character. Unfortunately, this html page can represent it only as
a carat followed by an M. If you copy and paste this script into VI, be
sure to change the carat and M to a genuine CTRL+M! If your script works
on the command line but appears to garble the first name in Telnet, be
sure to check for a legitimate CTRL+M.</font></b>
<p>This script repeatedly queries for a first name, and for three Linux
celebrities it returns their last name. For other people it returns the
string "Unknown celeb", and for any first name beginning with q it terminates,
as you can see in the case statement.
<p>Make the script executable by all, and once again make sure its diirectory
is executable all the way up the tree. Now run it from the command line.
The results should look something like the following, keeping in mind that
the bolded text is what you typed in:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ <b>./hellobidirectional.sh

</b>Please type Linux celebs name below:
<b>richard
</b>:richard,
stallman

Please type Linux celebs name below:
<b>linus
</b>:linus,
torvalds

Please type Linux celebs name below:
<b>q
</b>:q,

Finished
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>Now you know you have a working script. The next step is to attach this
script to the hello service. Simply edit <tt>/etc/xinetd.d/hello</tt>,
and replace the following line:
<br>&nbsp;
<pre>&nbsp;&nbsp; server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = /home/slitt/hello.sh</pre>
With the following line:
<pre>&nbsp;&nbsp; server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = /home/slitt/hellobidirectional.sh</pre>
Now restart <tt>xinetd</tt> with the following command:
<pre>/etc/rc.d/init.d/xinetd restart</pre>
And finally, use telnet as the client. The following shows the telnet session
with text you type bolded:
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td>
<pre>[myuid@mydesk myuid]$ <b>telnet 192.168.100.2 3333
</b>Trying 192.168.100.2...
Connected to 192.168.100.2.
Escape character is '^]'.

Please type Linux celebs name below:
<b>richard
</b>:richard,
stallman

Please type Linux celebs name below:
<b>maddog
</b>:maddog,
hall

Please type Linux celebs name below:
<b>q
</b>:q,

Finished
Connection closed by foreign host.
[myuid@mydesk myuid]$</pre>
</td>
</tr>
</table>

<p>If the first names returned by the script (the first names after the
ones you type in) are garbled, suspect that the sed command is not removing
telnet's trailing CTRL+M characters, and investigate. Troubleshoot any
problems as necessary.
<h1>
<a NAME="bidirectionalc"></a>A Bidirectional Implementation with Custom
C Client</h1>
Use the exact same hellobidirectional.sh you used in the <a href="#bidirectionaltelnet">A
Bidirectional Implementation with Telnet Client</a> section. But this time
we'll access it with a C client. It's not as simple as it might seem. If
this section does its job right, you'll learn some of the socket comm gotchas,
how to recognize them, how to overcome them, and why professional strength
socket clients and servers must know about each others' protocols.
<br>&nbsp;
<h2>
<a NAME="deadlyembrace"></a>File Blocking, and Deadly Embraces</h2>
One problem you'll see in your career as a socket programmer is file blocking.
If you attempt to read an empty socket, you'll wait until the server sends
more data. Forever if necessary. That's called File Blocking, and it's
the default behavior of sockets. Let's say your client code has a "read
all data sent" function containing code something like this:
<pre>while((len = read(sd, buf, buflen)) > 0)
&nbsp;&nbsp;&nbsp; write(1,buf,len);</pre>
That's standard Programming 101, and works perfectly with normal files.
But with sockets, the default behavior (called blocking) is that when the
read that would have returned 0 is attempted, the read waits for data to
come in. So what's wrong with that?
<p>The client is waiting for data from the server, and will not send data
to the server until it receives data from the server. But the server will
send no data to the client until it receives data from the client. Deadly
embrace! The preceding code snippet will hang a socket client under normal
conditions. Blocking can be removed with ioctl(), or the buffer can be
peeked into with select() or poll(). But these are all rather complicated.
<p>As a Hello World compatible solution (kludge really), instead of reading
past the end of data, we'll read up to the end of data by terminating the
loop when we read less than the requested number of bytes:
<pre>while((len = read(sd, buf, buflen)) >= buflen)
&nbsp;&nbsp;&nbsp; write(1,buf,len);</pre>
Interestingly enough, even though you requested to read past the end of
data, it returns only up to the end of data. Blocking doesn't occur until
you try to read a completely drained socket. There's a bug in the preceding
code. If the data in the socket is an exact multiple of buflen, the loop
won't terminate on end of data, but will try one more read on an empty
buffer, causing the previously described deadly embrace. Although in production
code that would be inexcusable, in this Hello World exercise we simply
minimize the likelihood of it happening by making the buffer large with
respect to the expected data. 512 is a good number, and that's what we
will use in the client.
<br>&nbsp;
<h2>
<a NAME="Timingissues"></a>Timing Issues -- the sleep() Solution</h2>
Imagine this. After the user inputs data into the client, the client sends
data to the server, then quickly iterates the loop and grabs server data
out of the socket. The only trouble is, the server hasn't sent the data
yet because it hasn't received data from the client. So the client says
"the server gave me no data" and proceeds to the next requst for user input.
Some time during that user input the server recieves the previous client
iteration's data, and sends back a response. This is how server responses
can continously be one iteration behind the client, making for user confusion
and a Troubleshooter migraine.
<p>Because this exercise is only to teach theory, we "solve" this problem
with an expedient kludge -- we insert a sleep() command immediately after
the client writes data to the socket. In that way, we guarantee that the
server gets the client data and returns its response before the client
tries to grab the response. For a similar reason, a sleep() is inserted
immediately after the client connects to the socket. For a socket connection
to a server on the same box, a 1 second sleep is sufficient. On a heavily
trafficked network, that interval may need to be increased.
<p>Please remember, the purpose of this kludge is so you can learn socket
programming fundimentals without needing to learn about protocols, stop
characters, blocking, ioctl(), and a host of other stuff. As time goes
on I will add content to this page describing and walking you through the
right way to accomplish these things.
<h2>
The Client Code</h2>
So here, without further adieu, is the client code:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#CCFFFF" >
<tr>
<td>
<pre>#include &lt;stdio.h>
#include &lt;string.h>
#include &lt;netdb.h>
#include &lt;linux/in.h>
#include &lt;sys/socket.h>
#include &lt;unistd.h>


#define buflen 512
unsigned int portno = 3333;
char hostname[] = "192.168.100.2";

char *buf[buflen];&nbsp;&nbsp;&nbsp;&nbsp; /* declare global to avoid stack */

void dia(char *sz) { printf("Dia %s\n", sz); }

int printFromSocket(int sd, char *buf)
&nbsp; {
&nbsp; int len = buflen+1;
&nbsp; int continueflag=1;
&nbsp; while((len >= buflen)&amp;&amp;(continueflag)) /* <a href="#deadlyembrace">quit b4 U read an empty socket</a> */
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp; len = read(sd, buf, buflen);
&nbsp;&nbsp;&nbsp; write(1,buf,len);
&nbsp;&nbsp;&nbsp; buf[buflen-1]='\0';&nbsp; /* Note bug if "Finished" ends the buffer */
&nbsp;&nbsp;&nbsp; continueflag=(strstr(buf, "Finished")==NULL); /* terminate if server says "Finished" */&nbsp;
&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; return(continueflag);
&nbsp; }


main()&nbsp;
&nbsp;&nbsp; {
&nbsp;&nbsp; int sd = socket(AF_INET, SOCK_STREAM, 0);&nbsp; /* init socket descriptor */
&nbsp;&nbsp; struct sockaddr_in sin;
&nbsp;&nbsp; struct hostent *host = gethostbyname(hostname);
&nbsp;&nbsp; char buf[buflen];
&nbsp;&nbsp; int len;

&nbsp;&nbsp; /*** PLACE DATA IN sockaddr_in struct ***/
&nbsp;&nbsp; memcpy(&amp;sin.sin_addr.s_addr, host->h_addr, host->h_length);
&nbsp;&nbsp; sin.sin_family = AF_INET;
&nbsp;&nbsp; sin.sin_port = htons(portno);

&nbsp;&nbsp; /*** CONNECT SOCKET TO THE SERVICE DESCRIBED BY sockaddr_in struct ***/
&nbsp;&nbsp; if (connect(sd, (struct sockaddr *)&amp;sin, sizeof(sin)) &lt; 0)
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp; perror("connecting");
&nbsp;&nbsp;&nbsp;&nbsp; exit(1);
&nbsp;&nbsp;&nbsp;&nbsp; }

&nbsp;&nbsp; sleep(1);&nbsp;&nbsp; /* <a href="#Timingissues">give server time to reply</a> */
&nbsp;&nbsp; while(1)
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp; printf("\n\n");
&nbsp;&nbsp;&nbsp;&nbsp; if(!printFromSocket(sd, buf)) break;
&nbsp;&nbsp;&nbsp;&nbsp; fgets(buf, buflen, stdin);&nbsp;&nbsp; /* remember, fgets appends the newline */
&nbsp;&nbsp;&nbsp;&nbsp; write(sd, buf, strlen(buf));
&nbsp;&nbsp;&nbsp;&nbsp; sleep(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* <a href="#Timingissues">give server time to reply</a> */
&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp; close(sd);
&nbsp;&nbsp; }</pre>
</td>
</tr>
</table>

<p>The main routine can be divided roughly into two parts:
<ol>
<li>
Socket initialization with connection, ending with its connect statement
and associated error handling</li>

<li>
Interaction with server via socket, beginning with the first sleep() command.</li>
</ol>
Believe it or not, part 1 is the more straightforward. Basically, you prepare
a socket descriptor (sd) by creating it, initializing a hostent struct
(host) and a sockaddr_in struct (sin). Various copies and other calls prepare
the socket descriptor, and then the connect statement connects the socket
descriptor with the service defined in the sockaddr_in struct. Once that
connect is done, the socket descriptor can be treated very much like a
file descriptor or file handle. They're both integers, and they can both
be used in read() and write() calls.
<p>The second part is the challenge. Most obvious, there's no clean way
to end the loop unless we get a clue from the server. In this case, the
server prints the word "Finished" when it's finished. We create a function
called printFromSocket() to handle all aspects of reading server data from
the socket, as well as telling the main loop when "Finished" has been recieved
so we can terminate the loop.
<p>To prevent deadly embrace, the printFromSocket() function does the "to
the end but not beyond" read discussed <a href="#deadlyembrace">previously</a>.
It also searches for the word "Finished" after every read. When it finds
that string it terminates its loop and also returns the fact that it found
that string, so that the main loop can terminate. An understanding of the
printFromSocket() function yields a good understanding of this client program.
<p>Other than the above, the only tricky part is that a sleep() is inserted
after the connect, and after every data transmission from the client. This
is to prevent the <a href="#Timingissues">timing problems</a> previously
discussed.
<h2>
Conclusion</h2>
Although the preceding exercises were obviously academic, using workarounds
unacceptable in production code, upon their completion you have an excellent
understanding of socket basics. At this point you can take advantage of
more advanced socket documentation to learn to make production code. And
better still, in the coming months I'll be adding more info to this page...
<h1>
<a NAME="LookingAhead"></a>Looking Ahead</h1>
I'll be placing some more content on this page in the coming months. That
content will address the practicalities of production code, eliminating
the need for the obvious kludges you've seen in the previous exercises.
Some of the issues that will be addressed are:
<ul>
<li>
Turning off blocking with ioctl()</li>

<li>
Buffer introspection with select() and poll()</li>

<li>
Using end of transmission and end of program bytecodes to implement synchronous
timing the right way, instead of the sleep() workaround.</li>

<li>
Discussing differences between synchronous and asynchronous communication
between client and server. Asynchronous communication occurs when the client
can respond to the server's data at any time, regardless of the client's
state. And vice versa -- the server can respond to the client's data at
any time, regardless of the server's state. Telnet is an excellent example
of asynchronous client-server communication.</li>

<li>
Creating a Perl server app</li>

<li>
Creating a Perl client</li>
</ul>

<h1>
A Perl Socket Server</h1>
&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#CCFFFF" NOSAVE >
<tr>
<td>
<pre>#!/usr/bin/perl -w

use strict;

my($logfile)="/tmp/log.log";
my($firstname)="initialization";
my($lastname)="initialization";

sub dia
&nbsp; {
#&nbsp; print "dia $_[0] \n";
&nbsp; }

sub teeappendlog
&nbsp; {
&nbsp; system("/bin/echo $_[0]&nbsp; | /usr/bin/tee -a $logfile");
&nbsp; }

sub appendlog
&nbsp; {
&nbsp; system("/bin/echo " . $_[0] . " >> " . $logfile);
&nbsp; }

dia "b4 log trunk";
system("/bin/echo&nbsp; > $logfile");
dia "b4 bin date to log trunk";
appendlog "LOG: " . `/bin/date`;
dia "afer bin date to log trunk";
appendlog "";
while (1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ###Forever, see the break in the case statement
&nbsp;&nbsp; {
&nbsp;&nbsp; appendlog "";
dia "b4 begincycle";
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; my($temp) = `/bin/date`;
&nbsp;&nbsp; chomp($temp);
&nbsp;&nbsp; appendlog "Begin Cycle: $temp&nbsp; **********";

&nbsp;&nbsp; teeappendlog "Please type Linux celebs name below:";
&nbsp;&nbsp; $firstname = &lt;STDIN>;
dia "after read";&nbsp;
&nbsp;&nbsp; ##### NEXT STATEMENT REMOVES EXTRA CTRL+M PUT IN BY TELNET #####
&nbsp;&nbsp; ##### PROGRAMMER: MAKE SURE THE CHAR IS CTRL+M, NOT A CARAT AND AN M! #####
&nbsp;&nbsp; $firstname =~ s/
$//;&nbsp;
&nbsp;&nbsp; chomp($firstname);

dia "after chomp";
&nbsp;&nbsp; teeappendlog ":perlversion:$firstname, ";
&nbsp;&nbsp; $lastname = "Unknown celeb";
&nbsp;&nbsp; if ($firstname eq "richard") { $lastname = "stallman";}
&nbsp;&nbsp; elsif ($firstname eq "linus") { $lastname = "torvalds";}
&nbsp;&nbsp; elsif ($firstname eq "maddog") { $lastname = "hall"}
&nbsp;&nbsp; elsif ($firstname =~ /^q/) { $lastname = "quit"; last;}
&nbsp;&nbsp; teeappendlog "$lastname";
&nbsp;&nbsp; dia "endloop " . $lastname . ", " . $firstname;
&nbsp;&nbsp; }

teeappendlog "$logfile";
teeappendlog "Finished";</pre>
</td>
</tr>
</table>

<p>
<hr>
<p>&nbsp;[ <a href="../../troubleshooters.htm">Troubleshooters.com</a>
| <a href="../index.htm">Code Corner</a> | <a href="mailto:slitt@troubleshooters.com">Email
Steve Litt</a> ]
<p><a href="../../cpyright.htm#top"><img SRC="biglcpyr.gif" BORDER=0 height=30 width=30></a><a href="../../cpyright.htm#top">Copyright
(C)2000 by Steve Litt</a> --
<a href="../../cpyright.htm#top">Legal</a>
<br>&nbsp;
<br>&nbsp;
</body>
</html>

