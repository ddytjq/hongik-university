ID=D0770
URL=http://www.jchq.net/tutorial/11_01Tut.htm
SIZE=14695
DATE=16/07/02
TIME=14:57:43
DATASET=Java
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
	<TITLE>The Java.io package</TITLE>
	<META NAME="GENERATOR" CONTENT="StarOffice/5.2 (Linux)">
	<META NAME="CREATED" CONTENT="20001110;23343700">
	<META NAME="CHANGEDBY" CONTENT=" ">
	<META NAME="CHANGED" CONTENT="20001110;23360100">
	<STYLE>
	<!--
	-->
	</STYLE>
<link rel="stylesheet" href="tutor.css"></HEAD>
<BODY BGCOLOR="#ffffff">
<TABLE WIDTH=95% BORDER=0 CELLPADDING=2 CELLSPACING=0 STYLE="page-break-before: always">
	<COL WIDTH=147*>
	<COL WIDTH=109*>
	<TR>
		<TD WIDTH=57% HEIGHT=104>
			<P><A HREF="introj2.htm"><IMG SRC="images/btnIndex.jpg" NAME="Graphic1" ALT="Return to Tutorial Index" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A><A HREF="introj2.htm"><BR><BR></A><A HREF="../index.htm"><IMG SRC="images/btnHome.jpg" NAME="Graphic2" ALT="Back to the home page of this site" ALIGN=BOTTOM WIDTH=55 HEIGHT=39 BORDER=0></A>
						</P>
		</TD>
		
    <TD WIDTH=43%> 
      <div align="right">
        <pre><IMG SRC="images/hat.gif" NAME="Graphic3" ALT="morterboard" ALIGN=BOTTOM WIDTH=118 HEIGHT=113 BORDER=0></pre>
      </div>
    </TD>
	</TR>
	<TR>
		<TD WIDTH=57% HEIGHT=11>
			<H1 ALIGN=LEFT>Java2 Certification <BR>Tutorial 
			</H1>
		</TD>
		<TD WIDTH=43% BGCOLOR="#ff9900">
			<P>&nbsp;</P>
		</TD>
	</TR>
</TABLE>
<P>You can discuss this topic with others at
<A HREF="http://www.jchq.net/discus">http://www.jchq.net/discus</A><BR>Read
reviews and buy a Java Certification book at
<A HREF="http://www.jchq.net/bookreviews/jcertbooks.htm">http://www.jchq.net/bookreviews/jcertbooks.htm</A>
</P>
<HR>
<H3><B>The Rusty Harold/O'Reilly Java I/O book</B></H3>
<P>O'Reilly have published a book specifically about Java I/O It get
very good reviews at amazon. If you buy it from the following links I
will get a small commission on the purchase</P>
<P>Buy from <A HREF="http://www.amazon.com/exec/obidos/ASIN/1565924851/jchqjavaprogramm">Amazon.com
</A>or from <A HREF="http://www.amazon.co.uk/exec/obidos/ASIN/1565924851/jchqjavaprogramm">Amazon.co.uk</A></P>
<HR>
<H2>11) The java.io package 
</H2>
<H2>Objective 1) 
</H2>
<P><FONT FACE="Arial, Helvetica, sans-serif"><I>Write code that uses
objects of the file class to navigate a file system. </I></FONT>
</P>
<P>In his excellent book Just Java and Beyond Peter van der Linden
starts his chapter on File I/O by saying <BR><BR><I>&quot;It is not
completely fair to remark, as some have, that support for I/O in java
is &quot;bone headed&quot;.</I></P>
<P>I think he was implying that it is not the perfect system, and so
it is an area worthy of double checking your knowledge of before you
go for the exam. When you are learning it you have the compensation
that at least it is a useful area of the language to understand.</P>
<P>The java.io package is concerned with input and output. Any non
trivial program will require I/O. Anything from reading a plain comma
delimeted text file, a XML data file or something more exotic such as
a network stream. The good news is that the Programmer Certification
Exam only expects you to understand the basics of I/O, you do not
have to know about Networking or the more exotic aspects of I/O.</P>
<P>Java I/O is based on the concept of streams. The computer term
streams was first popularised with the Unix operating system and you
may like to consider it as being an analogy with a stream of water.
You have a stream of bits coming in at one end, you apply certain
filter to process the stream. Out the other end of the pipe you send
a modified version of the stream which your program can process..</P>
<P>The names of the I/O Stream classes are not intuitive and things
do not always work as you might guess. 
</P>
<H3>The File Class</H3>
<P>The File class is not entirely descriptive as an instance of the
File class represents a file or directory name rather than a file
itself.</P>
<P>My first assumption when asked about navigating a file system
would be to look for a method to change directory. Unfortunately the
File class does not have such a method and it seems that you simply
have to create a new File object with a different directory for the
constructor.</P>
<P>Also the exam may ask you questions about the ability to make and
delete files and directories which may be considered to come under
the heading of navigating the file system. 
</P>
<TABLE WIDTH=81% BORDER=0 CELLPADDING=2 CELLSPACING=2>
  <TR>
		<TD WIDTH=9%>
			<P><IMG SRC="images/key2.gif" NAME="Graphic4" ALIGN=BOTTOM WIDTH=106 HEIGHT=73 BORDER=0></P>
		</TD>
		<TD WIDTH=91%>
			
      <H4 align="left"><FONT COLOR="#ff0000">Creating an instance of the File 
        class does not create a file in the underlying operating system</FONT></H4>
		</TD>
	</TR>
</TABLE>
<P>The file class offers<BR><BR><I>delete()</I></P>
<P>To delete a file or directory</P>
<P><I>mkdir() and mkdirs()</I></P>
<P>To create directories.</P>
<P>The File class contains the list() which returns a string array
containing all of the files in a directory. This is very handy for
checking to see if a file is available before attempting to open it.
An example of using list.</P>
<PRE>import java.io.*;
public class FileNav{
public static void main(String argv[]){
          String[] filenames;
          File f = new File(&quot;.&quot;);
          filenames = f.list();
          for(int i=0; i&lt; filenames.length; i++)
            System.out.println(filenames[i]);
          }
}</PRE><P>
This simply outputs a list of the files in the current directory
(&quot;*.*&quot;)</P>
<H3><BR>Platform Independence</H3>
<P>The file class is important in writing pure java. I used to think
that pure Java was just about not including native code, but it also
refers to writing platform independent code. Because of the
differences between in the way File systems work it is important to
be aware of platform dependencies such as the directory separator
character. On Win/DOS it is a backslash \, on Unix it is a forward
slash / and on a Mac it is something else. You can get around this
dependency by using the File.separator constant instead of hard
coding in the separator literal. You can see this in use in the Filer
example program that follows.</P>
<H3>A program to navigate the file system</H3>
<P>The following code is rather long (90 odd lines), but if you can
make sense of this you will know most of what you need to understand
the objective. The program allows you to browse the files in a
directory and to change directories. It was partly inspired by some
code in the Java in a Nutshell Examples book from O'reilly. A book I
highly recommend. Here is a screen shot of this program in action
under Linux</P>
<P><BR><IMG SRC="images/Filer.png" NAME="Graphic5" ALIGN=BOTTOM WIDTH=312 HEIGHT=428 BORDER=0></P>
<PRE>import java.awt.*;
import java.awt.event.*;
import java.io.*;
public class Filer extends Frame implements ActionListener{
  /**************************************************************
  Marcus Green October 2000 Part of the Java Programmer Certification
  tutorial available at http://www.jchq.net. Addressing the objective to be able
  to use the File class to navigate the File system.This program will show a 
  list of files in a directory .Clicking on a directory will change to the directory
  and show the contentsNote the use of File.separator to allow this to work on
  Unix or PC (and maybe even the Mac)
  ****************************************************************/
  List lstFiles;
  File currentDir;
  String[] safiles;
  int iEntryType = 6;
  int iRootElement = 0;
  int iElementCount = 20;
  
  public static void main(String argv[]){
    Filer f = new Filer();
    f.setSize(300,400);
    f.setVisible(true);
  }
  Filer(){
    setLayout(new FlowLayout());
    lstFiles = new List(iElementCount);
    lstFiles.addActionListener(this);
    //set the current directory
    File dir = new File(System.getProperty(&quot;user.dir&quot;));
    currentDir = dir;
    listDirectory(dir);
    add(lstFiles);
    addWindowListener(
    new WindowAdapter(){
      public void windowClosing(WindowEvent e){
        System.exit(0);
      }

    } );


  }

  public  void actionPerformed(ActionEvent e){
    int i = lstFiles.getSelectedIndex();
    if(i==iRootElement){
      upDir(currentDir);
    }else{
    String sCurFile = lstFiles.getItem(i);
    //Find the length of the file name and then
    //chop of the filetype part (dir or file)
    int iNameLen = sCurFile.length();
    sCurFile = sCurFile.substring(iEntryType,iNameLen);
    File fCurFile = new File(currentDir.toString()+File.separator + sCurFile);
    if(fCurFile.isDirectory()){
         listDirectory(fCurFile);
          }
    }
       
  }
  public void  upDir(File currentDir){
    File fullPath = new File(currentDir.getAbsolutePath());
    String sparent = fullPath.getAbsoluteFile().getParent();
   if(sparent == null) {
    //At the root so put in the dir separator to indicate this
      lstFiles.remove(iRootElement);
      lstFiles.add(&quot; &quot;+File.separator+&quot; &quot;,iRootElement);
      return;
    }else{
      File fparent = new File(sparent);
      listDirectory(fparent);
    }
  }
  public void listDirectory(File dir){      
    String sCurPath = dir.getAbsolutePath()+File.separator ;
    //Get the directorie entries
    safiles = dir.list();
    //remove the previous lis and add in the entry
    //for moving up a directory
    lstFiles.removeAll();
    lstFiles.addItem(&quot;[ .. ]&quot;);
    String sFileName = new String();
    //loop through the file names and 
    //add them to the list control
    for(int i=0; i&lt; safiles.length; i++){
      File curFile = new File(sCurPath + safiles[i]);
       if(curFile.isDirectory()){
          sFileName = &quot;[dir ]&quot; + safiles[i];
          }else{
            sFileName = &quot;[file]&quot;+safiles[i]; 
        }
      lstFiles.addItem(sFileName);
    }
    add(lstFiles);
  currentDir=dir; 
  }
    
}</PRE>
<HR>
<P><IMG SRC="images/Quiz.gif" NAME="Graphic6" ALIGN=BOTTOM WIDTH=99 HEIGHT=101 BORDER=0>
</P>
<H1>Questions</H1>
<H4>Question 1)</H4>
<P>Which of the following will distinguish between a directory and a
file</P>
<P>1) FileType()<BR>2) isDir()<BR>3) isDirectory()<BR>4)
getDirectory() 
</P>
<HR>
<H4>Question 2)</H4>
<P>Which of the following methods of the File class will delete a
directory or file</P>
<P>1) The file class does not allow you to delete a file or
directory<BR>2) remove()<BR>3) delete()<BR>4) del()</P>
<HR>
<H4>Question 3)</H4>
<P>How can you obtain the names of the files contained in an instance
of the File class called dir?</P>
<P>1) dir.list()<BR>2) dir.list<BR>3) dir.files()<BR>4)
dir.FileNames()</P>
<HR>
<H4>Question 4) 
</H4>
<P>Which of the following will populate an instance of the File class
with the contents of the current directory?</P>
<P>1) File f = new File();<BR>2) File f = new File(&quot;*.*&quot;);<BR>3)
File f = new File('*.*');<BR>4) File f = new File(&quot;.&quot;);</P>
<HR>
<H4>Question 5)</H4>
<P>Given the following code 
</P>
<P>File f = new File(&quot;myfile.txt&quot;);</P>
<P>What method will cause the file &quot;myfile.txt&quot; to be
created in the underlying operating system.?</P>
<P>1) f.write();<BR>2) f.close();<BR>3) f.flush();<BR>4) none of the
above</P>
<HR>
<H4>Question 6)</H4>
<P>Which of the following will chenge to the next directory above the
current directory<BR>1) chDir(&quot;..&quot;);<BR>2) cd(&quot;.&quot;);<BR>3)
up();<BR>4) none of the above</P>
<HR>
<H4>Question 7)</H4>
<P>Which of the following are fields or methods of the File class<BR>1)
getParent()<BR>2) separator<BR>3) dirname<BR>4) getName();</P>
<HR>
<H1>Answers</H1>
<HR>
<H4>Answer to Question 1)</H4>
<P>3) isDirectory()</P>
<HR>
<H4>Answer to Question 2)</H4>
<P>3) delete()</P>
<HR>
<H4>Answer to Question 3)</H4>
<P>1) dir.list()</P>
<P>The list method will return a string array containing the contents
of the current directory. 
</P>
<HR>
<H4>Answer to Question 4)</H4>
<P>4) File f = new File(&quot;.&quot;);</P>
<P>This construction for the File class will obtain the contents of
the current directory on a Dos or Unix style system but I am not sure
what might happen on some other system with a more exotic file
structure such as the Mac OS.</P>
<HR>
<H4>Answer to Question 5)</H4>
<P>4) none of the above</P>
<P>The File class mainly just describes a file that might exist. To
actually create it in the underlying operating system you need to
pass the instance of the File class to an instance of one of the
OutputStream classes. 
</P>
<H4>Answer to Question 6)</H4>
<P>4) none of these<BR>Java has no direct way to change the current
directory. A way around this is to create a new instance of the file
class pointing to the new directory</P>
<H4>Answer to Question 7)</H4>
<P> 1) getParent()<BR>
  2) separator<br>
  4) getName(); </P>
<HR>
<H3>Other Sources on this topic 
</H3>
<P><B>You can browse the samples of the O'Reilly Java I/O book at </B>
</P>
<P><A HREF="http://metalab.unc.edu/javafaq/books/javaio/index.html">http://metalab.unc.edu/javafaq/books/javaio/index.html</A></P>
<P><B>This topic is covered in the Sun Tutorial at</B>
<BR><A HREF="http://java.sun.com/docs/books/tutorial/essential/io/">http://java.sun.com/docs/books/tutorial/essential/io/</A></P>
<P><B>The Java API on the File class at
Sun</B><BR><A HREF="http://java.sun.com/products/jdk/1.2/docs/api/java/io/File.html">http://java.sun.com/products/jdk/1.2/docs/api/java/io/File.html</A></P>
<P>The JLS on Java IO a bit academic and bare
<BR><A HREF="http://www.infospheres.caltech.edu/resources/langspec-1.0/javaio.doc.html">http://www.infospheres.caltech.edu/resources/langspec-1.0/javaio.doc.html</A></P>
<P>Richard Baldwin on
I/O<BR><A HREF="http://home.att.net/%7Ebaldwin.rg/Intermediate/Java060.htm">http://home.att.net/~baldwin.rg/Intermediate/Java060.htm</A></P>
<P>Joyothi has some handy tables for the I/O classes at
<BR><A HREF="http://www.geocities.com/SiliconValley/Network/3693/io.html">http://www.geocities.com/SiliconValley/Network/3693/io.html</A></P>
<P>Last updated<BR>24 Oct 2000<BR>copyright &copy; Marcus Green
2000<BR>most recent version at www.jchq.net 
</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp; 
</P>
<H3>&nbsp;</H3>
<H3>&nbsp; 
</H3>
</BODY>
</HTML>
