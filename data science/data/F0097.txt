ID=F0097
URL=http://www.geocities.com/vkliew/vb/lesson5.html
SIZE=9962
DATE=09/07/2002
TIME=13:14:43
DATASET=Visual Basic
HTML=<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="vkliew">
   <meta name="GENERATOR" content="Mozilla/4.72 [en] (Win98; I) [Netscape]">
   <title>lesson5</title>
</head>
<body>

<center>
<h2>
<font color="#000000">Lesson 5 : Managing Visual Basic Data</font></h2></center>

<p><br><font color="#000000"><b>T</b>here are many types of data we come
across in our daily life. For example, we need to handle data such as names,
adresses, money, date, stock quotes, statistics and etc everyday. In Visual
Basic, we are also going to deal with these kinds of data. However, to
be more systematic, VB divide data into different types.</font>
<p><b><font color="#000000">5.1 Types of Visual Basic Data</font></b>
<p><b><font color="#000000">5.1.1 Numeric Data</font></b>
<p><font color="#000000">Numeric data are data that consists of numbers,
which can be computed mathematically with standard various operators such
as add, minus, multiply, divide and so on. In Visual Basic, the numeric
data is divided into 7 types, they are summarised in Table 6.1</font>
<center>
<p><b><font color="#000000">Table 5.1: Numeric Data Types</font></b></center>

<br><b><font color="#000000"></font></b>&nbsp;
<table BORDER=0 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td WIDTH="8%" BGCOLOR="#FFCC99"><b><u><font color="#000000">Type</font></u></b></td>

<td WIDTH="5%" BGCOLOR="#FFCC99"><b><u><font color="#000000">Storage&nbsp;</font></u></b></td>

<td BGCOLOR="#FFCC99"><b><u><font color="#000000">Range of Values</font></u></b></td>
</tr>

<tr>
<td WIDTH="5%">Byte</td>

<td WIDTH="5%">1 byte</td>

<td>0 to 255</td>
</tr>

<tr>
<td>Integer</td>

<td>2 bytes</td>

<td>-32,768 to 32,767</td>
</tr>

<tr>
<td>Long&nbsp;</td>

<td>4 bytes</td>

<td>-2,147,483,648 to 2,147,483,648</td>
</tr>

<tr>
<td>Single</td>

<td>4 bytes</td>

<td>-3.402823E+38 to -1.401298E-45 for negative values
<br>1.401298E-45 to 3.402823E+38 for positive values.</td>
</tr>

<tr>
<td>Double</td>

<td>8 bytes</td>

<td>-1.79769313486232e+308 to -4.94065645841247E-324 for negative values
<br>4.94065645841247E-324 to 1.79769313486232e+308 for positive values.</td>
</tr>

<tr>
<td>Currency</td>

<td>8 bytes</td>

<td>-922,337,203,685,477.5808 to 922,337,203,685,477.5807</td>
</tr>

<tr>
<td>Decimal</td>

<td>12 bytes</td>

<td>+/- 79,228,162,514,264,337,593,543,950,335 if no decimal is use
<br>+/- 7.9228162514264337593543950335 (28 decimal places).</td>
</tr>
</table>

<p><b><font color="#000000">5.1.2 Nonmeric Data Types</font></b>
<p><font color="#000000">the nonnumeric data types are summarised in Table
5.2</font>
<center>
<p><b><font color="#000000">Table 5.2: Nonnumeric Data Types</font></b></center>

<p><br>
<table BORDER=0 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td WIDTH="20%" BGCOLOR="#FFCC99"><b>Data Type</b></td>

<td WIDTH="20%" BGCOLOR="#FFCC99"><b>Storage</b></td>

<td BGCOLOR="#FFCC99"><b>Range</b></td>
</tr>

<tr>
<td>String(fixed length)</td>

<td>Length of string</td>

<td>1 to 65,400 characters</td>
</tr>

<tr>
<td>String(variable length)</td>

<td>Length + 10 bytes</td>

<td>0 to 2 billion characters</td>
</tr>

<tr>
<td>Date</td>

<td>8 bytes</td>

<td>January 1, 100 to December 31, 9999</td>
</tr>

<tr>
<td>Boolean</td>

<td>2 bytes</td>

<td>True or False</td>
</tr>

<tr>
<td>Object</td>

<td>4 bytes</td>

<td>Any embedded object</td>
</tr>

<tr>
<td>Variant(numeric)</td>

<td>16 bytes</td>

<td>Any value as large as Double</td>
</tr>

<tr>
<td>Variant(text)</td>

<td>Length+22 bytes</td>

<td>Same as variable-length string</td>
</tr>
</table>

<p><b><font color="#000000">5.1.3 Suffixes for Literals</font></b>
<p><font color="#000000">Literals are values that you assign to a data.
In some cases, we need to add a suffix behind a literalso that VB can handle
the calculation more accurately. For example, we can use num=1.3089# for
a Double type data. Some of the suffixes are displayed in Table 5.3.</font>
<center>
<p><b><font color="#000000">Table 5.3</font></b></center>

<p><br>
<center><table BORDER=0 COLS=2 WIDTH="50%" BGCOLOR="#FFFFCC" >
<tr>
<td BGCOLOR="#FFCC99">
<center><b>Suffix</b></center>
</td>

<td BGCOLOR="#FFCC99">
<center><b>Data Type</b></center>
</td>
</tr>

<tr>
<td>
<center>&amp;</center>
</td>

<td>
<center>Long</center>
</td>
</tr>

<tr>
<td>
<center>!</center>
</td>

<td>
<center>Single</center>
</td>
</tr>

<tr>
<td>
<center>#</center>
</td>

<td>
<center>Double</center>
</td>
</tr>

<tr>
<td>
<center>@</center>
</td>

<td>
<center>Currency</center>
</td>
</tr>
</table></center>

<p><font color="#000000">In additon, we need to enclose string literals
within two quotations and date and time literals within two # sign. Strings
can contain any characters, including numbers. The following are few examples:</font>
<p><font color="#000000">memberName="Turban, John."</font>
<br><font color="#000000">TelNumber="1800-900-888-777"</font>
<br><font color="#000000">LastDay=#31-Dec-00#</font>
<br><font color="#000000">ExpTime=#12:00 am#</font>
<p><b><font color="#000000">5.2 Managing Variables</font></b>
<p><font color="#000000">Variables are like mail boxes in the post office.
The contents of the variables changes every now and then, just like the
mail boxes. In term of VB, variables are areas allocated by the computer
memory to hold data. Like the mail boxes, each variable must be given a
name. To name a variable in Visual Basic, you have to follow a set of rules.</font>
<p><b><font color="#000000">5.2.1 Variable Names</font></b>
<p><font color="#000000">The following are the rules when naming the variables
in Visual Basic</font>
<ul>
<li>
<font color="#000000">It must be less than 255 characters</font></li>

<li>
<font color="#000000">No spacing is allowed</font></li>

<li>
<font color="#000000">It must not&nbsp; begin with a number</font></li>

<li>
<font color="#000000">Period is not permitted</font></li>
</ul>
<font color="#000000">Examples of valid and invalid variable names are
displayed in Table 5.4</font><font color="#000000"></font>
<center>
<p><b><font color="#000000">Table 5.4</font></b></center>

<table BORDER=0 COLS=2 WIDTH="100%" BGCOLOR="#FFFFCC" >
<tr>
<td BGCOLOR="#FFCC99">
<center><b><font color="#000000">Valid Name</font></b></center>
</td>

<td BGCOLOR="#FFCC99">
<center><b><font color="#000000">Invalid Name</font></b></center>
</td>
</tr>

<tr>
<td><font color="#000000">My_Car</font></td>

<td><font color="#000000">My.Car&nbsp;</font></td>
</tr>

<tr>
<td><font color="#000000">ThisYear</font></td>

<td><font color="#000000">1NewBoy</font></td>
</tr>

<tr>
<td><font color="#000000">Long_Name_Can_beUSE</font></td>

<td><font color="#000000">He&amp;HisFather&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*&amp; is not acceptable</font></td>
</tr>
</table>

<br>&nbsp;
<p><b><font color="#000000">5.2.2 Declaring Variables</font></b><b><font color="#000000"></font></b>
<p><font color="#000000">In Visual Basic, one needs to declare the variables
before using them by assigning names and data types. They are normally
declared in the genaral section of the codes' windows using the <b>Dim</b>
statement.</font>
<br><font color="#000000">The format&nbsp; is as follows:</font><font color="#000000"></font>
<p><font color="#000000">Dim variableNmae as DataType</font><font color="#000000"></font>
<p><font color="#000000">Example 5.1</font><font color="#000000"></font>
<p><font color="#000000">Dim password As String</font>
<br><font color="#000000">Dim yourName As String</font>
<br><font color="#000000">Dim firstnum As Integer</font>
<br><font color="#000000">Dim secondnum As Integer</font>
<br><font color="#000000">Dim total As Integer</font>
<br><font color="#000000">Dim doDate As Date</font><font color="#000000"></font>
<p><font color="#000000">You may also combine them in one line , separating
each variable with a comma, as follows:</font><font color="#000000"></font>
<p><font color="#000000">Dim password As String,&nbsp; yourName As String,
firstnum As Integer,.............</font><font color="#000000"></font>
<p><font color="#000000">If data type is not specified, VB will automatically
declare the variable as a Variant.</font>
<br><font color="#000000">For string declaration, there are two possible
format, one for the variable-length string&nbsp; and another for the fixed-length
string. For the variable-length string, just use the same format as example
5.1 above. However, for the fixed-length string, you have to use the format
as shown below:</font><font color="#000000"></font>
<p><font color="#000000"><i>Dim VariableName as String * n</i>, where n
definex the number of characters the string can hold.</font><font color="#000000"></font>
<p>Example 5.2:
<p>Dim yourName as String * 10
<p>yourName can holds no more than 10 Characters.
<p><br>
<center>
<p><a href="vbtutor.html">[<font size=+0>Back to contents&nbsp; page]</font></a></center>

<p><br>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --></object></layer></div></span></style></noscript></table></script></applet><script language="JavaScript" src="http://us.i1.yimg.com/us.yimg.com/i/mc/mc.js"></script><script language="JavaScript" src="http://us.geocities.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.geocities.com/visit.gif?1026141574" border=0 width=1 height=1></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001088&t=1026141574" ALT=1 WIDTH=1 HEIGHT=1>

