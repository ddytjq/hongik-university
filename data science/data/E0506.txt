ID=E0506
URL=http://www.linuxdoc.org/HOWTO/PHP-HOWTO-16.html
SIZE=6960
DATE=12/07/02
TIME=19:21:36
DATASET=C
HTML=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>PHP HOW-TO: ctags for PHP</TITLE>
 <LINK HREF="PHP-HOWTO-17.html" REL=next>
 <LINK HREF="PHP-HOWTO-15.html" REL=previous>
 <LINK HREF="PHP-HOWTO.html#toc16" REL=contents>
</HEAD>
<BODY>
<A HREF="PHP-HOWTO-17.html">Next</A>
<A HREF="PHP-HOWTO-15.html">Previous</A>
<A HREF="PHP-HOWTO.html#toc16">Contents</A>
<HR>
<H2><A NAME="ptags"></A> <A NAME="s16">16. ctags for PHP</A></H2>

<P>Tags are extremely valuable and are used for navigation of source code inside the 
editors like vi, emacs, CRiSP, NEdit etc... If you had 
programmed a lot in C, C++ or Java you
might have used the <B>ctags</B> program to create tags.
To see the online manual page, type 'man ctags' at linux/UNIX bash prompt.
The latest version of <B>ctags</B> supports PHP language and is 
available from 
<A HREF="http://ctags.sourceforge.net">http://ctags.sourceforge.net</A>.
<P><B>NOTE: <I>Do NOT use the ptags given below but instead use the latest ctags
which supports PHP language. The program below is just a exercise and sample
and was created when older versions of ctags did not support PHP. The listing
below is kept for historical reasons (a musuem).</I> </B>
<P>The <B>ptags</B> program for PHP is given below, which you can
use to create the tags for PHP source code. Your <B>productivity will
improve 3 to 4 times</B> if you use <B>ptags</B>.
<P>See also Vim color text editor for PHP, C, C++
at 
<A HREF="http://metalab.unc.edu/LDP/HOWTO/Vim-HOWTO.html">http://metalab.unc.edu/LDP/HOWTO/Vim-HOWTO.html</A><P>
<HR>
<PRE>
// Save this file as ptags.cpp and compile by
//              g++ -o ptags ptags.cpp
//*****************************************************************
// Copyright policy is GNU/GPL but additional request is
// that you include author's name and email on all copies
// Author : Al Dev Email: alavoor[AT]yahoo.com
// Usage : ptags *.php3 *.inc
//                 This will generate a file called tags
//*****************************************************************
#include &lt;iostream.h>
#include &lt;fstream>
#include &lt;stdio.h> // for sprintf
#include &lt;stdlib.h> // for system
#include &lt;string.h> // for memset
#include &lt;ctype.h> // for isspace

#define BUFF_LEN  1024
#define LOCATION  9

char *ltrim(char *dd);
char *rtrim(char *ee);

main(int argc, char **argv)
{
        if (argc &lt; 2)
        {
                cerr &lt;&lt; "\nUsage: " &lt;&lt; argv[0] &lt;&lt; " file .... " &lt;&lt; endl;
                exit(0);
        }

        char fname[100] = "tag_file.out";
        FILE    *fpout;
        ofstream    fout(fname);
        if (fout.fail())
        {
                cerr &lt;&lt; "\nError opening file : " &lt;&lt; fname &lt;&lt; endl;
                exit(-1);
        }
        //fpout = fopen(fname, "w");

        for (int ii = 1; ii &lt; argc; ii++)
        {
                /*
                char buff[2024];

                sprintf(buff, "\\rm -f %s; ls %s > %s 2>/dev/null", outfile, argv[1], outfile);
                cout &lt;&lt; "\nbuff = " &lt;&lt; buff &lt;&lt; endl;

                system(buff);
                fclose(fp);
                */
                FILE *fpin = NULL;
                fpin = fopen(argv[ii], "r");
                if (fpin == NULL)
                {
                        cerr &lt;&lt; "\nError opening file : " &lt;&lt; argv[ii] &lt;&lt; endl;
                        exit(-1);
                }
                char buff[BUFF_LEN + 100];
                memset(buff, 0, BUFF_LEN +10);
                for ( ; fgets(buff, BUFF_LEN, fpin) != NULL; )
                {
                        char aa[BUFF_LEN + 100];
                        char aapointer[BUFF_LEN + 100];
                        memset(aa, 0, BUFF_LEN +10);
                        strcpy(aa, buff);
                        strcpy(aapointer, ltrim(aa));
                        strcpy(aa, aapointer);

                        // Remove the trailing new line..
                        {
                                int tmpii = strlen(aa);
                                if (aa[tmpii-1] == '\n')
                                        aa[tmpii-1] = 0;
                        }
                        //cout &lt;&lt; "aa is : " &lt;&lt; aa &lt;&lt; endl;
                        //cout &lt;&lt; "aapointer is : " &lt;&lt; aapointer &lt;&lt; endl;
                        if (strncmp(aa, "function ", LOCATION) != 0)
                                continue;
                        //cout &lt;&lt; buff &lt;&lt; endl;

                        // Example tags file output is like -
                        // al2  al.c    /^al2()$/;"     f
                        {
                                char bb[BUFF_LEN + 100];
                                memset(bb, 0, BUFF_LEN +10);
                                strcpy(bb, &amp; aa[LOCATION]);
                                char *cc = bb;
                                while (cc != NULL &amp;&amp; *cc != '(')
                                        *cc++;
                                *cc = 0;
                                cc = rtrim(bb);
                                //cout &lt;&lt; "bb is : " &lt;&lt; bb &lt;&lt; endl;
                                //cout &lt;&lt; cc &lt;&lt; "\t" &lt;&lt; argv[ii] &lt;&lt; "\t" &lt;&lt; "/^" &lt;&lt; aa &lt;&lt; "$/;\"\tf" &lt;&lt; endl;
                                fout &lt;&lt; cc &lt;&lt; "\t" &lt;&lt; argv[ii] &lt;&lt; "\t" &lt;&lt; "/^" &lt;&lt; aa &lt;&lt; "$/;\"\tf" &lt;&lt; endl;
                                //fprintf(fpout, "%s\t%s\t/^%s$/;\"f\n", cc, argv[ii], aa );
                        }

                        memset(buff, 0, BUFF_LEN +10);
                }
                fclose(fpin);
        }
        fout.flush();
        fout.close();
        //fclose(fpout);

        // Sort and generate the tag file
        {
                char tmpaa[1024];
                sprintf(tmpaa, "sort %s > tags; \\rm -f %s", fname, fname);
                system(tmpaa);
        }
}

char *ltrim(char *dd)
{
    if (dd == NULL)
        return NULL;

    while (isspace(*dd))
        dd++;
        
        return dd;
}

char *rtrim(char *ee)
{
    if (ee == NULL)
        return NULL;

        int tmpii = strlen(ee) - 1;
        for (; tmpii >= 0 ; tmpii--)
        {
                if (isspace(ee[tmpii]) )
                {
                        //cout &lt;&lt; "\nis a space!!" &lt;&lt; endl;
                        ee[tmpii] = 0;
                }
        }
        return ee;
}
</PRE>
<HR>
<P>
<P>
<HR>
<A HREF="PHP-HOWTO-17.html">Next</A>
<A HREF="PHP-HOWTO-15.html">Previous</A>
<A HREF="PHP-HOWTO.html#toc16">Contents</A>
</BODY>
</HTML>

