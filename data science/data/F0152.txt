ID=F0152
URL=http://www.chez.com/scribe/en/directx/d3d8_02.htm
SIZE=8970
DATE=09/07/2002
TIME=13:15:35
DATASET=Visual Basic
HTML=<HTML>
<HEAD>
<LINK rel="stylesheet" type="text/css" href="../..//global.css">
</HEAD>
<BODY>
<TABLE class="menu" width="100%"><TR><TD class="header">
<A href="../index.htm">Home</A> - <A href="../about/index.htm">About</A> - <A href="../assembly/index.htm">Assembly</A> - <A href="../directx/index.htm">DirectX</A> - <A href="../opengl/index.htm">OpenGL</A> - <A href="../dotnet/index.htm">.NET</A> - <A href="../psdk/index.htm">Platform SDK</A> - <A href="../downloads/index.htm">Downloads</A> - <A href="../links/index.htm">Links</A></TD>
<TD class="header" style="text-align:right">June 7, 2001</TD></TR></TABLE><TABLE align="right"><TR><TD><!-- BEGIN WEBSIDESTORY CODE -->
<!-- COPYRIGHT 1997-2001 WEBSIDESTORY, INC. ALL RIGHTS RESERVED. U.S.PATENT PENDING. Privacy notice at: http://websidestory.com/privacy -->
<!-- webbot bot="HTMLMarkup" startspan -->
<script language="javascript">
var _pn="en - 2D Graphics - Sprite"; //page name
var _acct="WQ5909151KCE94EN7";   //account number
var _pndef="title";var _hcv=65;var _mn="wf200";
var _lp=location.protocol.indexOf('https')==0?"https://":"http://";
var _gn="hg1.hitbox.com";function _ps(_h){if(_h.indexOf("en - 2D Graphics - Sprite")==0) {
if (_pndef=="title"){return document.title?document.title:_pndef;}else{
var _g=location.pathname;_h=_g.substring(_g.lastIndexOf("/")+1,_g.length);
if(_h==""){return _pndef};}};return _h;}var _sv=10;var _bn=navigator.appName;
if(_bn.substring(0,9)=="Microsoft"){_bn="MSIE";};var _bv=Math.round(parseFloat(navigator.appVersion)*100);
if((_bn=="MSIE")&&(parseInt(_bv)==2))_bv=301;var _rf=escape(document.referrer);_pn=_ps(_pn);
var _hbfa="<a href='http://rd1.hitbox.com/rd?acct="+_acct+"' target=_top><img src='";
var _hbfc="' border=0 width=125 height=125></a><div><font face='MS Sans Serif,Arial,Helvetica '"+
"size=1><a href='http://counter.hitbox.com/a/hitboxfree.cgi' target='_blank'>privacy</a></font></div>";
var _hbfb="";</script><script language="javascript1.1" id="_hbc">_sv=11;</script><script
language="javascript1.1" src="http://stats.hitbox.com/js/hbf.js"></script><script language="javascript">
if(_hbfb.length!=0){document.write(_hbfa+_hbfb+_hbfc);}else{if((_rf=="undefined")||(_rf=="")){
_rf="bookmark";};document.write(_hbfa+_lp+_gn+"/HG?hc="+_mn+"&hb="+_acct+"&n="+escape(_pn)+
"&cd=1&hv=6"+"&bn="+escape(_bn)+"&bv="+_bv+"&ss=na&sc=na&dt=&sv="+_sv+"&ja=na&ln=na&pl=&rf="+_rf+_hbfc);}
</script><noscript><a href="http://rd1.hitbox.com/rd?acct=WQ5909151KCE94EN7" target=_top><img
src = "http://hg1.hitbox.com/HG?hc=wf200&cd=1&hv=6&ce=u&hb=WQ5909151KCE94EN7&n=en - 2D Graphics - Sprite"
border="0" width=125 height=125></a><div><font face="MS Sans Serif,Arial,Helvetica" size=1><a
href="http://counter.hitbox.com/a/hitboxfree.cgi" target="_blank">privacy</a></font></div>
</noscript><!--//-->

<!-- webbot bot="HTMLMarkup" endspan -->
<!-- END WEBSIDESTORY CODE  -->
</TD></TR></TABLE>
<TABLE align="center"><TR><TD align="right" class="header" width="45%"><A href="d3d8_01.htm">Initializing DirectX Graphics</A>&nbsp;&lt;&lt;</TD>
<TD align="center" class="header" width="10%"><A href="index.htm">Up</A></TD><TD align="left" class="header" width="45%">&gt;&gt;&nbsp;<A href="d3d8_03.htm">2D Graphics - Surfaces</A></TD></TR></TABLE>
<H1>2D Graphics - Sprite</H1>
<P>Note that DirectDraw is no more part of DirectX 8. DirectDraw specific hardware capabilities such as overlays should be included back in DirectX 9. Other calls, if they ever show up again in DirectX 9 are likely to result as a call in the Direct3D layer, the current direction for 2D graphics being to be a special case for 3D (to take full benefit of the 3D hardware capabilities)</P>

<H2>Abstract</H2>
<P>Examine DirectDraw "merging" with Direct3D in DirectX 8.</P>
Download : <A href="../../downloads/d3d8_02.zip">d3d8_02.zip</A> (49 Kb)

<H2>Introduction</H2>
<P>Beginning with DirectX 8, DirectDraw is now "merged" with Direct3D. Actually most newcomers to DirectX 8 would rather say it "disappeared".</P>
<P>In fact, the last step, even for a so-called 3D card, is just to draw textured polygons. On the other hand, a 2D card is only able to "draw" rectangular "textured" areas. For both 3D and 2D applications, additional features such as alpha blending, filtering, mipmapping are likely usefull. It finally appears that the only difference between 2D functionality and 3D functionality is that 2D uses rectangular screen aligned areas and that 3D uses any combination of 2D triangles (being able to do also rectangular screen aligned area). As 3D drives graphics hardware evolution, it also provides alpha blending, filtering, mipmapping capabilities...</P>
<P>With such an overlap, it's clear that duplicating functionality is just a waste of time for hardware vendors, API architects and even developers.</P>
<P>Though it is expected to see <STRONG>2D hardware specific</STRONG> features back in DirectX 9, such as "overlays", it is really unlikely to see again a 2D programming model (that would call anyway in the end the 3D pipeline).</P>
<P>The main drawback is that you'll loose software emulation and your application will need a "3D card". If this is not acceptable to your application, you can always just keep using DirectDraw 7 (that will run just fine against the DirectX 8 runtime that includes, as always, backward compatibility).
<P>Bitmaps are easily replaced by textures though you'll have to accomodate possible size restrictions.
<CODE>D3DX8.CreateTextureFromFile</CODE> allows to load BMP, DDS, GIF, JPG, PNG, and TGA files. Especially TGA files (at least) are able to handle alpha channels. <CODE>D3DX8.CreateTextureFromFileEx</CODE> provides additional capabilities altering the alpha channel at load time to emulate the color key functionality.</P>
Though you'll have to live with possible texture limitation any size as a power of 2 and in a 8 to 256 range shouldn't cause any problem and 1 to 1024 is likely for recent hardware. If you need non rectangular sprite, you can probably always pack your sprite in the same texture and select a texture area to draw the final sprite. Especially it can be quite interesting as it allows to draw sprites with multiple aspects from the same texture (avoiding costly <CODE>Direct3DDevice8.SetTexture</CODE> calls.</P>



The texture is created from the <CODE>donuts1.bmp</CODE> file. As we need extra control over the loading process, we'll use <CODE>D3DX8.CreateTextureFromFileEx</CODE> instead of <CODE>D3DX8.CreateTextureFromFile</CODE> :<BR>
<DIV class="code"><PRE>
Set Texture = d3dx.CreateTextureFromFileEx(Device, _
                                           App.Path & "\donuts1.bmp", _
                                           D3DX_DEFAULT, D3DX_DEFAULT, _
                                           1, _
                                           0, _
                                           D3DFMT_UNKNOWN, _
                                           D3DPOOL_MANAGED, _
                                           D3DX_FILTER_NONE, D3DX_FILTER_NONE, _
                                           &hFF000000, _
                                           ByVal 0, ByVal 0)
</PRE></DIV>
<P><CODE class="variable">Width</CODE> and <CODE class="variable">Height</CODE> are set to <CODE>D3DX_DEFAULT</CODE> so that these dimensions are taken from the file.</P>
<P>As we don't intend to scale down this texture, we don't need a complete mipmap chain as would <CODE>D3DX_DEFAULT</CODE>. For this reason, we are using 1.</P>
<P>As we don't need a <CODE>D3DUSAGE_TARGET</CODE> texture, we just left 0.</P>
<P>We let D3DX choose a suitable format by using <CODE>D3DFMT_UNKNOWN</CODE>.</P>
<P>For now, we'll use <CODE>D3DPOOL_MANAGED</CODE>.</P>
<P>As we don't need to filter the texture or its mipmap chain, we are using <CODE>D3DX_FILTER_NONE</CODE>.</P>
<P>When using a texture to perform 2D operations, we'll likely need to emulate the color key functionality. As we are loading the texture from a BMP file (that doesn't handle alpha values), each pixel is considered fully opaque. For this reason, we are using <CODE>&hFF000000</CODE> for the color value, so that D3DX will set the alpha value of each opaque black pixel to 0. As a result, those pixels will finally appear transparent. Similarly, when using a file format that handles translucency, we could probably make semi translucent red totally transparent by using <CODE>&h80FF0000</CODE> as a color key value.</CODE></P>
<P>At last, as we don't need extra information about the original file, and as we don't use a palettized texture, we don't need to use the last two structures that we can then left to <CODE>ByVal 0</CODE></P>
<H2>Rendering sprites</H2>
Now that the texture is loaded, we can then use a <CODE>D3DXSprite</CODE> object. As this object is stateless, we can use a single object to render all our sprites. In other words, note that <CODE>D3DXSprite</CODE> is actually a sprite renderer created using just the following code :<BR>
<DIV class="code"><PRE>
Set Sprite = d3dx.CreateSprite(Device)
</PRE></DIV>
Inside the main loop, we can render a sprite using :
<DIV class="code"><PRE>
Sprite.Begin <SPAN class="comment">' Save render states</SPAN>
Sprite.Draw Texture, SourceRect, Scaling, Center, Rotation, Translation, &HFFFFFFFF
Sprite.End <SPAN class="comment">' Restore render states</SPAN>
</PRE></DIV>
<P>As mentioned above, note that the <CODE>D3DX8.Draw</CODE> method includes all the needed information and allows each application sprite to use its own texture, source rectangle, scaling, center, rotation, translation and even color. Once again, note that the color value includes the alpha channel, allowing to render semitranslucent sprite (make sure to include an alpha value to actually see the sprite).</P>
<P>Behind the scene, <CODE>D3DXSprite</CODE> uses TLVertices to render a textured quad. If you need additional flexibility, you could use also explicitely TLVertices as shown for DirectX 7 in <A href="d3d_ddraw.htm">Using Direct3D for 2D applications</A> or as shown for DirectX 8, in the  "VBDonuts" sample that is part of the DirectX for Visual Basic SDK. <CODE>D3DXSprite</CODE> is not currently showcased in the SDK, probably because it was added late in the beta program.</P>
<HR>
<DIV class="copyright"><A href="../mail.htm">Patrice Scribe</A></DIV>
<HR>
<DIV class="copyright"><A href="../mail.htm">Patrice Scribe</A></DIV>
</BODY>
</HTML>
<!-- -->
</noscript>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var rnd = Math.floor(Math.random() * 9) + 1 ; 
if (rnd <= 4) { 
window.open('http://pub.chez.com/cgi-bin/perl/popup.pl/popup/default','pub','location=no,toolbar=no,status=no,directories=no,scrollbars=no,width=470,height=120');
} else if(rnd == 5) {
window.open('http://pub.chez.com/cgi-bin/perl/popup.pl/popup/autre4','pub2','location=no,toolbar=no,status=no,directories=no,scrollbars=no,width=250,height=250');
} else if(rnd == 6) {
window.open('http://pub.chez.com/cgi-bin/perl/popup.pl/popup/autre2','pub2','location=no,toolbar=no,status=no,directories=no,scrollbars=no,width=250,height=250');
} else if(rnd >= 7) {
window.open('http://pub.chez.com/cgi-bin/perl/popup.pl/popup/autre','pub2','location=no,toolbar=no,status=no,directories=no,scrollbars=no,width=250,height=250');
}
// -->
</SCRIPT>

<script language="javascript">
WEBO_ZONE=122;
WEBO_PAGE=1;
weboplus_ok=0;
</script>
<script language="javascript"
src="http://js.libertysurf.fr/chez/weborama/weboscopeplus.js"></SCRIPT>
<SCRIPT>if(weboplus_ok==1){weboplus_zp(WEBO_ZONE,WEBO_PAGE);}
</script>

