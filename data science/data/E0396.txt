ID=E0396
URL=http://www.research.att.com/~bs/3rd_printing3.html
SIZE=17509
DATE=12/07/02
TIME=19:20:37
DATASET=C
HTML=<html>
<head>
<title>Stroustrup: Errata for 2nd printing of The C++ Programming Language</title>
</head>
<body bgcolor="FFFBFB">
<center>
<h1>Errata for 2nd printing of The C++ Programming Language</h1>
</center>
Errata for
<a href="homepage.html">
Bjarne Stroustrup</a>:
<a href="3rd.html">
The C++ Programming Language (3rd edition)</a>,
Addison-Wesley, 1997. ISBN0-201-88954-4.
Errata for the 2nd printing yielding the 3rd.
<hr>
<h2>Errors and Clarifications</h2>
<p>
Preface:
<p>
pg vi	Add David Gay to the list of people who commented on early darfts of the book
<p>
<p>
Chapter 1:
<p>
Chapter 2:
<p>
Chapter 3:
<p>
pg 55	s/++i/++i)/
<p>
pg 58	s/C::const_iterator/typename C::const_iterator/
<p>
pg 61	s/oo(os)/oo(os,"\n")/
<p>
pg 61	s/return !is && !os;/return !is.eof() && !os;/
<p>
pg 61	s/attached to an ostream/attached to a file/
<p>
pg 61	add as last sentence of 3.8.3: "The ostream_iterator's second argument is
	used to delimit output values."
<p>
pg 62	s/histogram[string]++;/histogram[s]++;/
<p>
pg 65	s/template&lt;class V>/template&lt;class T>/
<p>
Chapter 4:
<p>
pg 72	s/-127 to 128/-128 to 127/ twice
<p>
pg 79	s/in a C++ program./in a C++ program (for the effects of #include see sec9.2.3)/
<p>
pg 84	s/Nonstatic members of a structure .../Array elements and nonstatic structure or
	class members have their lifetimes determined by the object of which they are part./
<p>
Chapter 5:
<p>
pg 94	s/i&lt;size, i++/i&lt;size; i++/
<p>
pg 98	s/The initializer for a "plain" T must be an lvalue of type T&./The initializer
	for a "plain" T& must be an lvalue of type T./
<p>
pg 101	s/int zip/long zip/
<p>
Chapter 6:
<p>
pg 122	s/x>y:x,y/x>y?x:y/
<p>
Chapter 7:
<p>
pg 147	s/compute2(Vec v)/compute2(const Vec& v)/
<p>
pg 155	s/_see expr.exercices_[17]/see sec6.6[17]/
<p>
pg 157	s/button2[3]/button2[2]/
<p>
pg 162	s/#ifdef identifier causes/#ifdef identifier conditionally causes/
<p>
pg 164	19. s/as defined in sec6.6/s/as defined in sec5.9/
<p>
Chapter 8:
<p>
pg 178	s/we look for get/we look for operator==/
<p>
pg 192	s/cin.get(ch)/input->get(ch)/ twice
<p>
Chapter 9:
<p>
pg 199	s/contains three errors:/contains two errors:/
<p>
pg 199	s/defined twice./defined twice. Note that these are not errors in C (secB.2.2)./
<p>
pg 207	s/ysort(/void ysort(/
<p>
pg 207	s/compare() has C linkage/ccmp() has C linkage/
<p>
pg 208	s/qsort(v,sz,1,&ccmp)/isort(v,sz,1,&ccmp)/ second occurrence
<p>
Chapter 10:
<p>
pg 239	s/catch(Bad_date)/catch(Date::Bad_date)/
<p>
pg 240	s/12<=mm/12&lt;mm/ s/mm%=12;/mm-=12;/ s/Month(m+mm)/Month(mm)/
<p>
pg 266	s/String/string/ twice
<p>
pg 268	s/r1=complex+(complex+(x,y),z)/r1=operator+(x,operator+(y,z))/
<p>
Chapter 11:
<p>
pg 292	s/T* operator++()/Ptr_to_T& operator++()/
<p>
pg 292	s/T* operator--()/Ptr_to_T& operator--()/
<p>
pg 292	s/T* operator++(int)/Ptr_to_T operator++(int)/
<p>
pg 292	s/T* operator--(int)/Ptr_to_T operator--(int)/
<p>
pg 292	s/p.operator--(1)/p.operator--(0)/
<p>
pg 295	s/for( int i = 0;/for( int i = 1;/
<p>
Chapter 12:
<p>
pg 307	s/to pass objects/to pass pointers and references to objects/
<p>
pg 311	s/mem_fct/mem_fun/
<p>
pg 313	add "Point center;" to class Circle
<p>
pg 319	add "void reset_value();" to class Ival_slider
<p>
pg 323	s/Ival_box =/Ival_box* pb =/
<p>
Chapter 13:
<p>
pg 333	s/class Link/struct Link/
<p>
pg 333	s/cout <&lt;t/cout <&lt;p->val/
<p>
pg 335	s/int f(/Record f(/
<p>
pg 338	s/template&lt;class T, class C> T get_nth/template&lt;class T> int get_nth/
<p>
pg 339	s/return C::lt(str1[i],str2[i]);/return C::lt(str1[i],str2[i])?-1:1;/
<p>
pg 340	s/return C::lt(str1[i],str2[i]);/return C::lt(str1[i],str2[i])?-1:1;/
<P>
pg 346	s/:private vector&lt;T>/:public vector&lt;T>/
<p>
pg 348	s/Truncation problems .. from secC.6.2.6./ Truncation problems could be caught
	at run time using a checked conversion in the style of implicit_cast (sec13.3.1)
	and checked (secC.6.2.6):
<p>
pg 348	s/: re(checked_cast&lt;T2>(c.re)), im(checked_cast&lt;T2>(c.im))/
	: re(checked_cast&lt;Scalar>(c.real())), im(checked_cast&lt;Scalar>(c.imag()))/
<p>
pg 349	s/set&lt;Circle>/set&lt;Circle*>/
<p>
Chapter 14:
<p>
Chapter 15:
<p>
Chapter 16:
<p>
pg 436	s/Vector_itor(Vector& vv)/Vector_itor(Vector&lt;T>& vv)/
<p>
pg 444	s/using a reverse_iterator:/using a reverse_iterator (sec19.2.5):/
<p>
pg 447	s/template&lt;class Size, class T2> void assign(Size n, const T2& val = T2());/void assign(size_type n, const T2& val);/ (recent standards resolution)
<p>
pg 452	s/= T()// (recent standard resolution)
<p>
pg 453	s/(p2+1)/p2.base()/
<p>
pg 454	s/16.3.6/16.3.3/
<p>
pg 454	s/delete()/erase()/
<p>
pg 457	s/19.4.5/19.4.2/
<p>
pg 457	s/Other Functions/Other Member Functions/
<p>
Chapter 17:
<p>
pg 463	s/Add elements to end of vector/Change size of vector/
<p>
pg 464	remove "assign(n)" line (recent standards resolution)
<p>
pg 464	stack, queue, and priority_queue have no list operations
<p>
pg 464	pririoty_queue has front and back operations (not list and front)
<p>
pg 464	stack and queue's back operations are const+
<p>
pg 467	s/17.4/17.4.1.5/
<p>
pg 468	s/q) { return/q) const { return/
<p>
pg 472	s/16.3.6/16.3.5/
<p>
pg 473	s/void remove(const T& val)/void remove(const T& val);/
<p>
pg 474	s/17.8[3]/17.8[13]/
<p>
pg 480	s/16.3/16.3.1/
<p>
pg 482	s/pair(const pair&lt;U, V>& p) :first(p->first), second(p->second) { }/pair(const pair&lt;U, V>& p) :first(p.first), second(p.second) { }/
<p>
pg 485	s/operator()(const T& x, const T& y) {/operator()(const T& x, const T& y) const {/
<p>
pg 486	s/keytype& k const/keytype& k) const/
<p>
pg 486	s/keytype&)/keytype& k)/
<p>
pg 487	s/Modifiers/List Operations/
<p>
pg 487	s/modifiers:/list operations:/
<p>
pg 488	s/*(m.insert(make_pair(k,V())).first).second/(*(m.insert(make_pair(k,V())).first)).second/
<p>
pg 490	the body of f() should be
<pre>
	m.insert(make_pair("x",4));
	m.insert(make_pair("x",5));	// no effect: there already is an entry for "x" (sec17.4.1.7)
	// now m["x"] == 4

	mm.insert(make_pair("x",4));
	mm.insert(make_pair("x",5));
	// mm now holds both ("x",4) and ("x",5)

</pre>
<p>
pg 491	s/multiple values that have the same key./multiple occurrences of a key./
<p>
pg 493	renumber variables to b5, b6, b7, b8
<p>
pg 493	s/no char/no char*/
<p>
pg 495	s/true if no bit is 0/true if no bit is 1/
<p>
pg 498	s/H())/H(), const EQ& = EQ())/
<p>
pg 499	s/*size/*b.size()/
<p>
pg 500	s/phone_book1()/phone_book1/
<p>
pg 500	s/}/};/ at the end of class hash_map
<p>
pg 500	s/key_type k/const key_type& k/ twice
<p>
pg 502	s/size_type/size_t/ in struct Hash
<p>
pg 503	s/size_type/size_t/
<p>
Chapter 18:
<p>
pg 510	s/Find the last occurrence of a value./Find the first element larger than a value./
<p>
pg 514	s/operator()/void operator()/
<p>
pg 516	s/,li.end()// twice
<p>
pg 516	s/,vi.end()//
<p>
pg 517	s/club_eq/Club_eq/
<p>
pg 518	s/,b.end()//
<p>
pg 518	s/mem_fun_ref1/mem_fun1_ref/
<p>
pg 521	s/operator()(T* p)/operator()(T* p) const/
<p>
pg 521	s/lp/ls/ twice
<p>
pg 523	s/Pred::result_type not1(/unary_negate&lt;Pred> not1(/
<p>
pg 523	s/Pred::result_type not2(/binary_negate&lt;Pred> not2(/
<p>
pg 530	s/class Out>/class Out, class Pred>/
<p>
pg 531	s/purge(set/purge(deque/
<p>
pg 532	s/return this;/return s;/
<p>
pg 532 s/update_positions(vector/update_positions(list/ twice
<p>
pg 532 s/,oper.end()// twice
<p>
pg 532	s/have an output operator/have an output iterator/
<p>
pg 536	s/list&lt;name>/list&lt;string>/
<p>
pg 536	s/copy elements/remove elements/
<p>
pg 536	s/s(ss)/:town(ss)/
<p>
pg 537	/to containers/to sequences/
<p>
pg 540	/proper place:/proper place with no element comparing less than the Nth element placed after it in the sequence:/ 
<p>
pg 541	s/VI p = lower_bound/VI q = lower_bound/
<p>
pg 541	s/or end()/or last/
<p>
pg 541	s/new sequence/new sorted sequence/
<p>
pg 543	s/with the lowest value/with the highest value/
<p>
pg 543	comment for make_heap():	// turn sequence into heap
<p>
pg 543	comment for sort_heap():	// turn heap into sequence
<p>
pg 544	s/cmp(b,a)/cmp(a,b)/
<p>
pg 545	s/v2+strlen(v1)/v2+strlen(v2)/
<p>
pg 546	s/18.4.4.2./18.4.4.3/ in [10]
<p>
Chapter 19:
<p>
pg 554	s/trivial to define difference()/trivial to define distance()/
<p>
pg 557	After the definition of reverse_iterator add this explanation:
	"A reverse_iterator is implemented using an iterator called current.
	That iterator can (only) point to the elements of its sequence plus
	its one-past-the-end element. However, the reverse_iterator's
	one-past-the-end element is the original sequence's (inaccessible)
	one-before-the-beginning element. Thus, to avoid access violations,
	current points to the element after the one the reverse_iterator
	refers to. This implies that * returns the value *(current-1)
	and that ++ is implemented using -- on current."
<p>
pg 569	s/it (n<=size())/if (n<=capacity())/
<p>
pg 569	replace the line starting ``while(q&lt;v+n)'' with
	``alloc.deallocate(v,capacity()); (it is resize() and not reserve()
	that adds default elements)
<p>
pg 570	s/= T()//
<p>
Chapter 20:
<p>
pg 592	add void push_back(Ch c); to class basic_string (recent standards resolution)
<p>
pg 592	s/= Ch()// (recent standards resolution)
<p>
pg 593	replace the last paragraph of 20.3.9 with "Because string
has a push_back() operation (16.3.5), a back_inserter can be used for a
string exactly as for general containers." (recent standards resolution)
<p>
pg 598	s/const allocator_type&/allocator_type/
<p>
pg 598	add as last paragraph of 20.3.14 "A call reserve(res_arg) throws lenght_error
	if res_arg>max_size()."
<p>
Chapter 21:
<p>
Chapter 22:
<p>
pg 660	s/smallest positive number/smallest positive normalized number/
<p>
pg 663	s/error: floating-point/bad mistake: floating-point/
<p>
pg 665	add member functions
<pre>
	T min() const;	// smallest value using &lt;for comparison; if size()==0 the value is undefined
	T max() const;	// largest value using &lt;for comparison; if size()==0 the value is undefined
</pre>
(recent standard change)
<p>
pg 665	s/34567800/4 8 12 16 20 24 28 32/ for v3
<p>
pg 665	s/00123456/0 0 0 1 1 1 1 2/ for v5
<p>
pg 665	s/rather than/rather than elements shift operators or/
<p>
pg 667	s/!,/%, ==, !=,/
<p>
pg 667	remove non-member functions min() and max(). (recent standard change)
<p>
pg 669	s/index(/slice_index(/ twice
<p>
pg 669	s/1,4,1/4,4,1/ s/1 2 3 4/4 5 6 7/
<p>
pg 670	s/4*y+4th/(4*y+1)th/
<p>
pg 670	s/Since a stride/Since a slice/
<p>
pg 670	s/p.stride==q.stride && p.start==q.start/p.s.stride()==q.s.stride() && p.s.start()==q.s.start()/
<p>
pg 671	s/p.stride==q.stride && p.start==q.start/p.s.stride()==q.s.stride() && p.s.start()==q.s.start()/
<p>
pg 671	remove fill() member function and add
<pre>
	void operator=(const T& v);	// assign v to each erlement
</pre> (recent standards change)
<p>
pg 673	Change the definitions of operator() to
<pre>
	double& operator()(size_t x, size_t y);					// Fortran-style subscripts
	double operator()(size_t x, size_t y) const;

	Slice_iter&lt;double> operator()(size_t i) { return row(i); }
	Cslice_iter&lt;double> operator()(size_t i) const { return row(i); }

</pre>
<p>
pg 673	the const versions of row() and column() should return Cslice_iter&lt;double>
<p>
pg 676	s/is assigned to a Matrix:/is assigned to a Vector:/
<p>
pg 676	s/MVmulMadd/MVmulVadd/ seven times
<p>
pg 678	s/index(/gslice_index(/ thrice
<p>
pg 678	s/v[m].fill(0)/v[m]=0/ (recent standards change)
<p>
pg 679	s/22.4/22.4.2/ twice
<p>
pg 680	s/Note the use of a member template to ensure initialization
	of any complex type with any other (sec13.6.2)./Note the use of member
	templates to ensure initialization and assignment of any complex
	type with any other (sec13.6.2)./
<p>
pg 681 Replace the last complete sentense on the page by
	"Similar specializations ensure that a complex&lt;float> and a
	complex&lt;double> can be quietly converted to a complex&lt;long double>
	but that a complex&lt;long double> cannot be implicitly converted to a
	complex&lt;double> or to a complex&lt;float> and a complex&lt;double>
	cannot be implicitly converted to a  complex&lt;float>."
<p>
pg 682	s/&lt;algo>/&lt;algorithm>/
<p>
pg 682 Replace the example at the bottom of the page and its associated text with:
<p>
The simple version of accumulate()
adds elements of a sequence using their + operator.
For example:
<pre>
	void f(vector&lt;int>& price, list&lt;float>& incr)
	{
		int i = accumulate(price.begin(),price.end(),0);	// accumulate in int
		double d = 0;
		d = accumulate(incr.begin(),incr.end(),d);		// accumulate in double
		// ...
	}
</pre>
Note how the type of the initial value passed determines the return type.
<p>
pg 684	s/ temp.begin/temps.begin/
<p>
pg 685	s/temp_changes/temps/ twice
<p>
Chapter 23:
<p>
Chapter 24:
<p>
Chapter 23:
<p>
Appendix A:
<p>
pg 794	add "export," "and," "and_eq," etc. to list of keywords
<p>
Appendix B:
<p>
pg 817	add "export" to table of keywords.
<p>
Appendix C:
<hr>
<h2>Typos</h2>
<p>
Chapter 1:
<p>
Chapter 2:
<p>
Chapter 3:
<p>
Chapter 4:
<p>
pg 71	s/are converted to ints and integer arithmetic, and/are converted to ints; integer arithmetic and/
<p>
Chapter 5:
<p>
pg 91	s/The empty string is written .../The empty string is written as a pair of
	adjacent double quotes, "" (and has the type const char[1])./
<p>
Chapter 6:
<p>
pg 140
3. (*2)
Read a sequence of possibly whitespace-separated (name,value) pairs,
where the name is a single whitespace-separated word and the value is an
integer or a floating-point value.
<p>
Chapter 7:
<p>
pg 162	s/The directive #ifdef identifier causes/The directive #ifdef identifier conditionally causes/
<p>
Chapter 8:
<p>
Chapter 9:
<p>
pg 201	s/get()/get(char* p)/
<p>
pg 202	s/get()/get(char* p)/
<p>
pg 216	s/chose/choose/
<p>
Chapter 10:
<p>
pg 236	s/Date(int d =0, Month m =Month(0), int y =0);/Date(int dd =0, Month mm =Month(0), int yy =0);/
<p>
Chapter 11:
<p>
pg 299	10. s/String that produce/String that produces/
<p>
pg 300	s/if y and p/if x and p/
<p>
Chapter 12:
<p>
pg 323	s/Ival_box_maker/Ival_maker/
<p>
pg 325	s/of a of a house/ of a house/
<p>
Chapter 13:
<p>
pg 333	s/paramenter/parameter/
<p>
pg 334	s/sort(vector&lt;int&> v)/sort(vector&lt;int&>)/
<p>
pg 334	s/sort(vector&lt;string&> v)/sort(vector&lt;stringt&>)/
<p>
pg 334	s/Vol. l3/Vol. 3/
<p>
pg 336	s/any call that matches sqrt(complex&lt;T>) also match/... also matches/
<p>
pg 341	s/always makes/always make/
<p>
pg 342	s/paramenter/parameter/
<p>
pg 342	s/when a partial specification is/when a partial specialization is/
<p>
pg 342	s/It important ... Vector was achieved/It is important ... Vector is achieved/
<p>
pg 343	s/pattern also a matches/pattern also matches/
<p>
pg 344	s/paramenter/parameter/
<p>
pg 346	s/vec from sec3.7.1/Vec from sec3.7.1/
<p>
Chapter 14:
<p>
Chapter 15:
<p>
Chapter 16:
<p>
pg 446	s/bad reference/bad index/
<p>
pg 450	s/Stack Operators/Stack Operations/
<p>
pg 459	s/algotithm/algorithm/
<p>
Chapter 17:
<p>
pg 462	s/Member Access/Element Access/
<p>
pg 463	remove duplicate "max_size()" line
<p>
pg 468	s/Cmp(x,y)||Comp(y,x)/cmp(x,y)||cmp(y,x)/
<p>
pg 474	s/friut/fruit/
<p>
pg 479	s/&lt;message>/&lt;Message>/
<p>
pg 483	s/and calculates/and also calculates/
<p>
pg 490	s/i++/++i/
<p>
pg 492	s/flips the bit/return ~b[i]/
<p>
pg 492	s/i'th/(i+1)'th/
<p>
pg 497	rename hashmaps to hm1, hm2, and hm3
<p>
pg 498	s/entry (if any)/Entry (if any)/
<p>
pg 502	s/operator()/operator()()/
<p>
pg 504	s/be in order/kept ordered/ in [11]
<p>
pg 505	s/value/binary value/ in 11.
<p>
pg 505	s/removed()/removed/ in 13.
<p>
pg 505	s/17.6/17.6.1/ in 15.
<p>
pg 506	s/with overflow/with overflow in hash_map/ in 24.
<p>
pg 506	s/Tt/St/ in 29.
<p>
pg 506	s/size_type/size_t/ in 33.
<p>
Chapter 18:
<p>
pg 518	s/operator()/operator()()/
<p>
pg 525	s/which pred returns/which pred() returns/
<p>
pg 528	s/The search() and search_n()/The search(), search_n(), and find_end()/
<p>
pg 532	s/produce an output/produce a return value/
<p>
pg 532	s/input sequences is/input sequence is/
<p>
pg 537	s/Out first/Out res/ twice
<p>
pg 537	s/first n values/first n elements/
<p>
pg 537	s/add 20 element/add 20 elements/
<p>
pg 537	s/rotatey its elements left/rotates its elements/
<p>
pg 541 s/The inplace_merge/The inplace_merge()/
<p>
pg 545	s/value of next_permutation/value of next_permutation()/
<p>
pg 547	s/text/test/ in 4.
<p>
Chapter 19:
<p>
Chapter 20:
<p>
Chapter 21:
<p>
Chapter 22:
<p>
pg 663	s/individual members/individual elements/
<p>
pg 665	s/val_array/valarray/
<p>
pg 668	s/first+/start()+/
<p>
pg 667	s/Operations/Nonmember Operations/
<p>
pg 676	s/by result of mvm/by result of m/
<p>
pg 685	s/result/res/ twice
<p>
pg 685	s/In particular, ... turns/In particular, partial_sum() turns .../
<p>
pg 687	s/val_array/valarray/
<p>
pg 687	s/like apply()/like apply() (sec22.4.3)/ twice
<p>
Chapter 23:
<p>
pg 701	s/achieving that/that achieving/ in footnote
<p>
Chapter 24:
<p>
Chapter 25:
</body>
</html>


